{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar BaseManager = require('./BaseManager');\n\nvar MessageReaction = require('../structures/MessageReaction');\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {BaseManager}\n */\n\n\nvar ReactionManager = /*#__PURE__*/function (_BaseManager) {\n  _inherits(ReactionManager, _BaseManager);\n\n  var _super = _createSuper(ReactionManager);\n\n  function ReactionManager(message, iterable) {\n    var _this;\n\n    _classCallCheck(this, ReactionManager);\n\n    _this = _super.call(this, message.client, iterable, MessageReaction);\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n\n    _this.message = message;\n    return _this;\n  }\n\n  _createClass(ReactionManager, [{\n    key: \"add\",\n    value: function add(data, cache) {\n      return _get(_getPrototypeOf(ReactionManager.prototype), \"add\", this).call(this, data, cache, {\n        id: data.emoji.id || data.emoji.name,\n        extras: [this.message]\n      });\n    }\n    /**\n     * The reaction cache of this manager\n     * @type {Collection<Snowflake, MessageReaction>}\n     * @name ReactionManager#cache\n     */\n\n    /**\n     * Data that can be resolved to a MessageReaction object. This can be:\n     * * A MessageReaction\n     * * A Snowflake\n     * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n     */\n\n    /**\n     * Resolves a MessageReactionResolvable to a MessageReaction object.\n     * @method resolve\n     * @memberof ReactionManager\n     * @instance\n     * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n     * @returns {?MessageReaction}\n     */\n\n    /**\n     * Resolves a MessageReactionResolvable to a MessageReaction ID string.\n     * @method resolveID\n     * @memberof ReactionManager\n     * @instance\n     * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n     * @returns {?Snowflake}\n     */\n\n    /**\n     * Removes all reactions from a message.\n     * @returns {Promise<Message>}\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var _this2 = this;\n\n      return this.client.api.channels(this.message.channel.id).messages(this.message.id).reactions[\"delete\"]().then(function () {\n        return _this2.message;\n      });\n    }\n  }]);\n\n  return ReactionManager;\n}(BaseManager);\n\nmodule.exports = ReactionManager;","map":null,"metadata":{},"sourceType":"module"}