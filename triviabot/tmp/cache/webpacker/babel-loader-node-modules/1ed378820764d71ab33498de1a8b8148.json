{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar BaseManager = require('./BaseManager');\n\nvar Message = require('../structures/Message');\n\nvar Collection = require('../util/Collection');\n\nvar LimitedCollection = require('../util/LimitedCollection');\n/**\n * Manages API methods for Messages and holds their cache.\n * @extends {BaseManager}\n */\n\n\nvar MessageManager = /*#__PURE__*/function (_BaseManager) {\n  _inherits(MessageManager, _BaseManager);\n\n  var _super = _createSuper(MessageManager);\n\n  function MessageManager(channel, iterable) {\n    var _this;\n\n    _classCallCheck(this, MessageManager);\n\n    _this = _super.call(this, channel.client, iterable, Message, LimitedCollection, channel.client.options.messageCacheMaxSize);\n    /**\n     * The channel that the messages belong to\n     * @type {TextBasedChannel}\n     */\n\n    _this.channel = channel;\n    return _this;\n  }\n  /**\n   * The cache of Messages\n   * @type {Collection<Snowflake, Message>}\n   * @name MessageManager#cache\n   */\n\n\n  _createClass(MessageManager, [{\n    key: \"add\",\n    value: function add(data, cache) {\n      return _get(_getPrototypeOf(MessageManager.prototype), \"add\", this).call(this, data, cache, {\n        extras: [this.channel]\n      });\n    }\n    /**\n     * The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\n     * `after` are mutually exclusive. All the parameters are optional.\n     * @typedef {Object} ChannelLogsQueryOptions\n     * @property {number} [limit=50] Number of messages to acquire\n     * @property {Snowflake} [before] ID of a message to get the messages that were posted before it\n     * @property {Snowflake} [after] ID of a message to get the messages that were posted after it\n     * @property {Snowflake} [around] ID of a message to get the messages that were posted around it\n     */\n\n    /**\n     * Gets a message, or messages, from this channel.\n     * <info>The returned Collection does not contain reaction users of the messages if they were not cached.\n     * Those need to be fetched separately in such a case.</info>\n     * @param {Snowflake|ChannelLogsQueryOptions} [message] The ID of the message to fetch, or query parameters.\n     * @param {boolean} [cache=true] Whether to cache the message(s)\n     * @returns {Promise<Message>|Promise<Collection<Snowflake, Message>>}\n     * @example\n     * // Get message\n     * channel.messages.fetch('99539446449315840')\n     *   .then(message => console.log(message.content))\n     *   .catch(console.error);\n     * @example\n     * // Get messages\n     * channel.messages.fetch({ limit: 10 })\n     *   .then(messages => console.log(`Received ${messages.size} messages`))\n     *   .catch(console.error);\n     * @example\n     * // Get messages and filter by user ID\n     * channel.messages.fetch()\n     *   .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function fetch(message) {\n      var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return typeof message === 'string' ? this._fetchId(message, cache) : this._fetchMany(message, cache);\n    }\n    /**\n     * Fetches the pinned messages of this channel and returns a collection of them.\n     * <info>The returned Collection does not contain any reaction data of the messages.\n     * Those need to be fetched separately.</info>\n     * @param {boolean} [cache=true] Whether to cache the message(s)\n     * @returns {Promise<Collection<Snowflake, Message>>}\n     * @example\n     * // Get pinned messages\n     * channel.fetchPinned()\n     *   .then(messages => console.log(`Received ${messages.size} messages`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"fetchPinned\",\n    value: function fetchPinned() {\n      var _this2 = this;\n\n      var cache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return this.client.api.channels[this.channel.id].pins.get().then(function (data) {\n        var messages = new Collection();\n\n        var _iterator = _createForOfIteratorHelper(data),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var message = _step.value;\n            messages.set(message.id, _this2.add(message, cache));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return messages;\n      });\n    }\n    /**\n     * Data that can be resolved to a Message object. This can be:\n     * * A Message\n     * * A Snowflake\n     * @typedef {Message|Snowflake} MessageResolvable\n     */\n\n    /**\n     * Resolves a MessageResolvable to a Message object.\n     * @method resolve\n     * @memberof MessageManager\n     * @instance\n     * @param {MessageResolvable} message The message resolvable to resolve\n     * @returns {?Message}\n     */\n\n    /**\n     * Resolves a MessageResolvable to a Message ID string.\n     * @method resolveID\n     * @memberof MessageManager\n     * @instance\n     * @param {MessageResolvable} message The message resolvable to resolve\n     * @returns {?Snowflake}\n     */\n\n    /**\n     * Deletes a message, even if it's not cached.\n     * @param {MessageResolvable} message The message to delete\n     * @param {string} [reason] Reason for deleting this message, if it does not belong to the client user\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message, reason) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                message = this.resolveID(message);\n\n                if (!message) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.client.api.channels(this.channel.id).messages(message)[\"delete\"]({\n                  reason: reason\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _delete(_x, _x2) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"_fetchId\",\n    value: function () {\n      var _fetchId2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(messageID, cache) {\n        var existing, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                existing = this.cache.get(messageID);\n\n                if (!(existing && !existing.partial)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", existing);\n\n              case 3:\n                _context2.next = 5;\n                return this.client.api.channels[this.channel.id].messages[messageID].get();\n\n              case 5:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", this.add(data, cache));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _fetchId(_x3, _x4) {\n        return _fetchId2.apply(this, arguments);\n      }\n\n      return _fetchId;\n    }()\n  }, {\n    key: \"_fetchMany\",\n    value: function () {\n      var _fetchMany2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var options,\n            cache,\n            data,\n            messages,\n            _iterator2,\n            _step2,\n            message,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n                cache = _args3.length > 1 ? _args3[1] : undefined;\n                _context3.next = 4;\n                return this.client.api.channels[this.channel.id].messages.get({\n                  query: options\n                });\n\n              case 4:\n                data = _context3.sent;\n                messages = new Collection();\n                _iterator2 = _createForOfIteratorHelper(data);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    message = _step2.value;\n                    messages.set(message.id, this.add(message, cache));\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                return _context3.abrupt(\"return\", messages);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _fetchMany() {\n        return _fetchMany2.apply(this, arguments);\n      }\n\n      return _fetchMany;\n    }()\n  }]);\n\n  return MessageManager;\n}(BaseManager);\n\nmodule.exports = MessageManager;","map":null,"metadata":{},"sourceType":"module"}