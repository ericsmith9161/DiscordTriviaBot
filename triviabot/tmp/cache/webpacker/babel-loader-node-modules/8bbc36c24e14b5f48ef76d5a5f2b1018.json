{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Util = require('../util/Util');\n/**\n * Represents a Discord voice region for guilds.\n */\n\n\nvar VoiceRegion = /*#__PURE__*/function () {\n  function VoiceRegion(data) {\n    _classCallCheck(this, VoiceRegion);\n\n    /**\n     * The ID of the region\n     * @type {string}\n     */\n    this.id = data.id;\n    /**\n     * Name of the region\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * Whether the region is VIP-only\n     * @type {boolean}\n     */\n\n    this.vip = data.vip;\n    /**\n     * Whether the region is deprecated\n     * @type {boolean}\n     */\n\n    this.deprecated = data.deprecated;\n    /**\n     * Whether the region is optimal\n     * @type {boolean}\n     */\n\n    this.optimal = data.optimal;\n    /**\n     * Whether the region is custom\n     * @type {boolean}\n     */\n\n    this.custom = data.custom;\n  }\n\n  _createClass(VoiceRegion, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Util.flatten(this);\n    }\n  }]);\n\n  return VoiceRegion;\n}();\n\nmodule.exports = VoiceRegion;","map":null,"metadata":{},"sourceType":"module"}