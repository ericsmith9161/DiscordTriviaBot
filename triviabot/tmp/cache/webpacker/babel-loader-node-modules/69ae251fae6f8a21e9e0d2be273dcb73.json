{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Action = require('./Action');\n\nvar VoiceState = require('../../structures/VoiceState');\n\nvar _require = require('../../util/Constants'),\n    Events = _require.Events;\n\nvar VoiceStateUpdate = /*#__PURE__*/function (_Action) {\n  _inherits(VoiceStateUpdate, _Action);\n\n  var _super = _createSuper(VoiceStateUpdate);\n\n  function VoiceStateUpdate() {\n    _classCallCheck(this, VoiceStateUpdate);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VoiceStateUpdate, [{\n    key: \"handle\",\n    value: function handle(data) {\n      var client = this.client;\n      var guild = client.guilds.cache.get(data.guild_id);\n\n      if (guild) {\n        // Update the state\n        var oldState = guild.voiceStates.cache.has(data.user_id) ? guild.voiceStates.cache.get(data.user_id)._clone() : new VoiceState(guild, {\n          user_id: data.user_id\n        });\n        var newState = guild.voiceStates.add(data); // Get the member\n\n        var member = guild.members.cache.get(data.user_id);\n\n        if (member && data.member) {\n          member._patch(data.member);\n        } else if (data.member && data.member.user && data.member.joined_at) {\n          member = guild.members.add(data.member);\n        } // Emit event\n\n\n        if (member && member.user.id === client.user.id) {\n          client.emit('debug', \"[VOICE] received voice state update: \".concat(JSON.stringify(data)));\n          client.voice.onVoiceStateUpdate(data);\n        }\n        /**\n         * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n         * @event Client#voiceStateUpdate\n         * @param {VoiceState} oldState The voice state before the update\n         * @param {VoiceState} newState The voice state after the update\n         */\n\n\n        client.emit(Events.VOICE_STATE_UPDATE, oldState, newState);\n      }\n    }\n  }]);\n\n  return VoiceStateUpdate;\n}(Action);\n\nmodule.exports = VoiceStateUpdate;","map":null,"metadata":{},"sourceType":"module"}