{"ast":null,"code":"'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar noop = function noop() {}; // eslint-disable-line no-empty-function\n\n\nvar methods = ['get', 'post', 'delete', 'patch', 'put'];\nvar reflectors = ['toString', 'valueOf', 'inspect', 'constructor', Symbol.toPrimitive, Symbol[\"for\"]('nodejs.util.inspect.custom')];\n\nfunction buildRoute(manager) {\n  var route = [''];\n  var handler = {\n    get: function get(target, name) {\n      if (reflectors.includes(name)) return function () {\n        return route.join('/');\n      };\n\n      if (methods.includes(name)) {\n        var routeBucket = [];\n\n        for (var i = 0; i < route.length; i++) {\n          // Reactions routes and sub-routes all share the same bucket\n          if (route[i - 1] === 'reactions') break; // Literal IDs should only be taken account if they are the Major ID (the Channel/Guild ID)\n\n          if (/\\d{16,19}/g.test(route[i]) && !/channels|guilds/.test(route[i - 1])) routeBucket.push(':id'); // All other parts of the route should be considered as part of the bucket identifier\n          else routeBucket.push(route[i]);\n        }\n\n        return function (options) {\n          return manager.request(name, route.join('/'), Object.assign({\n            versioned: manager.versioned,\n            route: routeBucket.join('/')\n          }, options));\n        };\n      }\n\n      route.push(name);\n      return new Proxy(noop, handler);\n    },\n    apply: function apply(target, _, args) {\n      route.push.apply(route, _toConsumableArray(args.filter(function (x) {\n        return x != null;\n      }))); // eslint-disable-line eqeqeq\n\n      return new Proxy(noop, handler);\n    }\n  };\n  return new Proxy(noop, handler);\n}\n\nmodule.exports = buildRoute;","map":null,"metadata":{},"sourceType":"module"}