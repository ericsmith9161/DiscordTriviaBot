{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar BaseManager = require('./BaseManager');\n\nvar _require = require('../errors'),\n    Error = _require.Error;\n\nvar Collection = require('../util/Collection');\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {BaseManager}\n */\n\n\nvar ReactionUserManager = /*#__PURE__*/function (_BaseManager) {\n  _inherits(ReactionUserManager, _BaseManager);\n\n  var _super = _createSuper(ReactionUserManager);\n\n  function ReactionUserManager(client, iterable, reaction) {\n    var _this;\n\n    _classCallCheck(this, ReactionUserManager);\n\n    _this = _super.call(this, client, iterable, {\n      name: 'User'\n    });\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n\n    _this.reaction = reaction;\n    return _this;\n  }\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.\n   * @param {Object} [options] Options for fetching the users\n   * @param {number} [options.limit=100] The maximum amount of users to fetch, defaults to 100\n   * @param {Snowflake} [options.before] Limit fetching users to those with an id lower than the supplied id\n   * @param {Snowflake} [options.after] Limit fetching users to those with an id greater than the supplied id\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n\n\n  _createClass(ReactionUserManager, [{\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _ref,\n            _ref$limit,\n            limit,\n            after,\n            before,\n            message,\n            data,\n            users,\n            _iterator,\n            _step,\n            rawUser,\n            user,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? 100 : _ref$limit, after = _ref.after, before = _ref.before;\n                message = this.reaction.message;\n                _context.next = 4;\n                return this.client.api.channels[message.channel.id].messages[message.id].reactions[this.reaction.emoji.identifier].get({\n                  query: {\n                    limit: limit,\n                    before: before,\n                    after: after\n                  }\n                });\n\n              case 4:\n                data = _context.sent;\n                users = new Collection();\n                _iterator = _createForOfIteratorHelper(data);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    rawUser = _step.value;\n                    user = this.client.users.add(rawUser);\n                    this.cache.set(user.id, user);\n                    users.set(user.id, user);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                return _context.abrupt(\"return\", users);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch() {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n    /**\n     * Removes a user from this reaction.\n     * @param {UserResolvable} [user=this.reaction.message.client.user] The user to remove the reaction of\n     * @returns {Promise<MessageReaction>}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var _this2 = this;\n\n      var user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.reaction.message.client.user;\n      var message = this.reaction.message;\n      var userID = message.client.users.resolveID(user);\n      if (!userID) return Promise.reject(new Error('REACTION_RESOLVE_USER'));\n      return message.client.api.channels[message.channel.id].messages[message.id].reactions[this.reaction.emoji.identifier][userID === message.client.user.id ? '@me' : userID][\"delete\"]().then(function () {\n        return _this2.reaction;\n      });\n    }\n  }]);\n\n  return ReactionUserManager;\n}(BaseManager);\n\nmodule.exports = ReactionUserManager;","map":null,"metadata":{},"sourceType":"module"}