{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nrequire('setimmediate');\n\nvar EventEmitter = require('events');\n\nvar RESTManager = require('../rest/RESTManager');\n\nvar _require = require('../util/Constants'),\n    DefaultOptions = _require.DefaultOptions;\n\nvar Util = require('../util/Util');\n/**\n * The base class for all clients.\n * @extends {EventEmitter}\n */\n\n\nvar BaseClient = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(BaseClient, _EventEmitter);\n\n  var _super = _createSuper(BaseClient);\n\n  function BaseClient() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, BaseClient);\n\n    _this = _super.call(this);\n    /**\n     * Timeouts set by {@link BaseClient#setTimeout} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n\n    _this._timeouts = new Set();\n    /**\n     * Intervals set by {@link BaseClient#setInterval} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n\n    _this._intervals = new Set();\n    /**\n     * Intervals set by {@link BaseClient#setImmediate} that are still active\n     * @type {Set<Immediate>}\n     * @private\n     */\n\n    _this._immediates = new Set();\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n\n    _this.options = Util.mergeDefault(DefaultOptions, options);\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n\n    _this.rest = new RESTManager(_assertThisInitialized(_this), options._tokenType);\n    return _this;\n  }\n  /**\n   * API shortcut\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n\n\n  _createClass(BaseClient, [{\n    key: \"destroy\",\n\n    /**\n     * Destroys all assets used by the base client.\n     */\n    value: function destroy() {\n      var _iterator = _createForOfIteratorHelper(this._timeouts),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var t = _step.value;\n          this.clearTimeout(t);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this._intervals),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var i = _step2.value;\n          this.clearInterval(i);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this._immediates),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _i = _step3.value;\n          this.clearImmediate(_i);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._timeouts.clear();\n\n      this._intervals.clear();\n\n      this._immediates.clear();\n    }\n    /**\n     * Sets a timeout that will be automatically cancelled if the client is destroyed.\n     * @param {Function} fn Function to execute\n     * @param {number} delay Time to wait before executing (in milliseconds)\n     * @param {...*} args Arguments for the function\n     * @returns {Timeout}\n     */\n\n  }, {\n    key: \"setTimeout\",\n    value: function (_setTimeout) {\n      function setTimeout(_x, _x2) {\n        return _setTimeout.apply(this, arguments);\n      }\n\n      setTimeout.toString = function () {\n        return _setTimeout.toString();\n      };\n\n      return setTimeout;\n    }(function (fn, delay) {\n      var _this2 = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      var timeout = setTimeout(function () {\n        fn.apply(void 0, args);\n\n        _this2._timeouts[\"delete\"](timeout);\n      }, delay);\n\n      this._timeouts.add(timeout);\n\n      return timeout;\n    })\n    /**\n     * Clears a timeout.\n     * @param {Timeout} timeout Timeout to cancel\n     */\n\n  }, {\n    key: \"clearTimeout\",\n    value: function (_clearTimeout) {\n      function clearTimeout(_x3) {\n        return _clearTimeout.apply(this, arguments);\n      }\n\n      clearTimeout.toString = function () {\n        return _clearTimeout.toString();\n      };\n\n      return clearTimeout;\n    }(function (timeout) {\n      clearTimeout(timeout);\n\n      this._timeouts[\"delete\"](timeout);\n    })\n    /**\n     * Sets an interval that will be automatically cancelled if the client is destroyed.\n     * @param {Function} fn Function to execute\n     * @param {number} delay Time to wait between executions (in milliseconds)\n     * @param {...*} args Arguments for the function\n     * @returns {Timeout}\n     */\n\n  }, {\n    key: \"setInterval\",\n    value: function (_setInterval) {\n      function setInterval(_x4, _x5) {\n        return _setInterval.apply(this, arguments);\n      }\n\n      setInterval.toString = function () {\n        return _setInterval.toString();\n      };\n\n      return setInterval;\n    }(function (fn, delay) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      var interval = setInterval.apply(void 0, [fn, delay].concat(args));\n\n      this._intervals.add(interval);\n\n      return interval;\n    })\n    /**\n     * Clears an interval.\n     * @param {Timeout} interval Interval to cancel\n     */\n\n  }, {\n    key: \"clearInterval\",\n    value: function (_clearInterval) {\n      function clearInterval(_x6) {\n        return _clearInterval.apply(this, arguments);\n      }\n\n      clearInterval.toString = function () {\n        return _clearInterval.toString();\n      };\n\n      return clearInterval;\n    }(function (interval) {\n      clearInterval(interval);\n\n      this._intervals[\"delete\"](interval);\n    })\n    /**\n     * Sets an immediate that will be automatically cancelled if the client is destroyed.\n     * @param {Function} fn Function to execute\n     * @param {...*} args Arguments for the function\n     * @returns {Immediate}\n     */\n\n  }, {\n    key: \"setImmediate\",\n    value: function (_setImmediate) {\n      function setImmediate(_x7) {\n        return _setImmediate.apply(this, arguments);\n      }\n\n      setImmediate.toString = function () {\n        return _setImmediate.toString();\n      };\n\n      return setImmediate;\n    }(function (fn) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      var immediate = setImmediate.apply(void 0, [fn].concat(args));\n\n      this._immediates.add(immediate);\n\n      return immediate;\n    })\n    /**\n     * Clears an immediate.\n     * @param {Immediate} immediate Immediate to cancel\n     */\n\n  }, {\n    key: \"clearImmediate\",\n    value: function (_clearImmediate) {\n      function clearImmediate(_x8) {\n        return _clearImmediate.apply(this, arguments);\n      }\n\n      clearImmediate.toString = function () {\n        return _clearImmediate.toString();\n      };\n\n      return clearImmediate;\n    }(function (immediate) {\n      clearImmediate(immediate);\n\n      this._immediates[\"delete\"](immediate);\n    })\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      for (var _len4 = arguments.length, props = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        props[_key4] = arguments[_key4];\n      }\n\n      return Util.flatten.apply(Util, [this, {\n        domain: false\n      }].concat(props));\n    }\n  }, {\n    key: \"api\",\n    get: function get() {\n      return this.rest.api;\n    }\n  }]);\n\n  return BaseClient;\n}(EventEmitter);\n\nmodule.exports = BaseClient;","map":null,"metadata":{},"sourceType":"module"}