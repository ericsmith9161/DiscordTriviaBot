{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar BaseManager = require('./BaseManager');\n\nvar Role = require('../structures/Role');\n\nvar Permissions = require('../util/Permissions');\n\nvar _require = require('../util/Util'),\n    resolveColor = _require.resolveColor;\n/**\n * Manages API methods for roles and stores their cache.\n * @extends {BaseManager}\n */\n\n\nvar RoleManager = /*#__PURE__*/function (_BaseManager) {\n  _inherits(RoleManager, _BaseManager);\n\n  var _super = _createSuper(RoleManager);\n\n  function RoleManager(guild, iterable) {\n    var _this;\n\n    _classCallCheck(this, RoleManager);\n\n    _this = _super.call(this, guild.client, iterable, Role);\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n\n    _this.guild = guild;\n    return _this;\n  }\n  /**\n   * The role cache of this manager\n   * @type {Collection<Snowflake, Role>}\n   * @name RoleManager#cache\n   */\n\n\n  _createClass(RoleManager, [{\n    key: \"add\",\n    value: function add(data, cache) {\n      return _get(_getPrototypeOf(RoleManager.prototype), \"add\", this).call(this, data, cache, {\n        extras: [this.guild]\n      });\n    }\n    /**\n     * Obtains one or more roles from Discord, or the role cache if they're already available.\n     * @param {Snowflake} [id] ID or IDs of the role(s)\n     * @param {boolean} [cache=true] Whether to cache the new roles objects if it weren't already\n     * @returns {Promise<Role|RoleManager>}\n     * @example\n     * // Fetch all roles from the guild\n     * message.guild.roles.fetch()\n     *   .then(roles => console.log(`There are ${roles.cache.size} roles.`))\n     *   .catch(console.error);\n     * @example\n     * // Fetch a single role\n     * message.guild.roles.fetch('222078108977594368')\n     *   .then(role => console.log(`The role color is: ${role.color}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var cache,\n            existing,\n            roles,\n            _iterator,\n            _step,\n            role,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cache = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n\n                if (!id) {\n                  _context.next = 5;\n                  break;\n                }\n\n                existing = this.cache.get(id);\n\n                if (!existing) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", existing);\n\n              case 5:\n                _context.next = 7;\n                return this.client.api.guilds(this.guild.id).roles.get();\n\n              case 7:\n                roles = _context.sent;\n                _iterator = _createForOfIteratorHelper(roles);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    role = _step.value;\n                    this.add(role, cache);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                return _context.abrupt(\"return\", id ? this.cache.get(id) || null : this);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n    /**\n     * Data that can be resolved to a Role object. This can be:\n     * * A Role\n     * * A Snowflake\n     * @typedef {Role|Snowflake} RoleResolvable\n     */\n\n    /**\n     * Resolves a RoleResolvable to a Role object.\n     * @method resolve\n     * @memberof RoleManager\n     * @instance\n     * @param {RoleResolvable} role The role resolvable to resolve\n     * @returns {?Role}\n     */\n\n    /**\n     * Resolves a RoleResolvable to a role ID string.\n     * @method resolveID\n     * @memberof RoleManager\n     * @instance\n     * @param {RoleResolvable} role The role resolvable to resolve\n     * @returns {?Snowflake}\n     */\n\n    /**\n     * Creates a new role in the guild with given information.\n     * <warn>The position will silently reset to 1 if an invalid one is provided, or none.</warn>\n     * @param {Object} [options] Options\n     * @param {RoleData} [options.data] The data to create the role with\n     * @param {string} [options.reason] Reason for creating this role\n     * @returns {Promise<Role>}\n     * @example\n     * // Create a new role\n     * guild.roles.create()\n     *   .then(console.log)\n     *   .catch(console.error);\n     * @example\n     * // Create a new role with data and a reason\n     * guild.roles.create({\n     *   data: {\n     *     name: 'Super Cool People',\n     *     color: 'BLUE',\n     *   },\n     *   reason: 'we needed a role for Super Cool People',\n     * })\n     *   .then(console.log)\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this2 = this;\n\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$data = _ref.data,\n          data = _ref$data === void 0 ? {} : _ref$data,\n          reason = _ref.reason;\n\n      if (data.color) data.color = resolveColor(data.color);\n      if (data.permissions) data.permissions = Permissions.resolve(data.permissions);\n      return this.guild.client.api.guilds(this.guild.id).roles.post({\n        data: data,\n        reason: reason\n      }).then(function (r) {\n        var _this2$client$actions = _this2.client.actions.GuildRoleCreate.handle({\n          guild_id: _this2.guild.id,\n          role: r\n        }),\n            role = _this2$client$actions.role;\n\n        if (data.position) return role.setPosition(data.position, reason);\n        return role;\n      });\n    }\n    /**\n     * The `@everyone` role of the guild\n     * @type {Role}\n     * @readonly\n     */\n\n  }, {\n    key: \"everyone\",\n    get: function get() {\n      return this.cache.get(this.guild.id);\n    }\n    /**\n     * The role with the highest position in the cache\n     * @type {Role}\n     * @readonly\n     */\n\n  }, {\n    key: \"highest\",\n    get: function get() {\n      return this.cache.reduce(function (prev, role) {\n        return role.comparePositionTo(prev) > 0 ? role : prev;\n      }, this.cache.first());\n    }\n  }]);\n\n  return RoleManager;\n}(BaseManager);\n\nmodule.exports = RoleManager;","map":null,"metadata":{},"sourceType":"module"}