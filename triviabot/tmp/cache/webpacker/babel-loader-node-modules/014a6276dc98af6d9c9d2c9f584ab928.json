{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar BaseManager = require('./BaseManager');\n\nvar _require = require('../errors'),\n    _TypeError = _require.TypeError;\n\nvar GuildEmoji = require('../structures/GuildEmoji');\n\nvar ReactionEmoji = require('../structures/ReactionEmoji');\n\nvar Collection = require('../util/Collection');\n\nvar DataResolver = require('../util/DataResolver');\n/**\n * Manages API methods for GuildEmojis and stores their cache.\n * @extends {BaseManager}\n */\n\n\nvar GuildEmojiManager = /*#__PURE__*/function (_BaseManager) {\n  _inherits(GuildEmojiManager, _BaseManager);\n\n  var _super = _createSuper(GuildEmojiManager);\n\n  function GuildEmojiManager(guild, iterable) {\n    var _this;\n\n    _classCallCheck(this, GuildEmojiManager);\n\n    _this = _super.call(this, guild.client, iterable, GuildEmoji);\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n\n    _this.guild = guild;\n    return _this;\n  }\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name GuildEmojiManager#cache\n   */\n\n\n  _createClass(GuildEmojiManager, [{\n    key: \"add\",\n    value: function add(data, cache) {\n      return _get(_getPrototypeOf(GuildEmojiManager.prototype), \"add\", this).call(this, data, cache, {\n        extras: [this.guild]\n      });\n    }\n    /**\n     * Creates a new custom emoji in the guild.\n     * @param {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n     * @param {string} name The name for the emoji\n     * @param {Object} [options] Options\n     * @param {Collection<Snowflake, Role>|RoleResolvable[]} [options.roles] Roles to limit the emoji to\n     * @param {string} [options.reason] Reason for creating the emoji\n     * @returns {Promise<Emoji>} The created emoji\n     * @example\n     * // Create a new emoji from a url\n     * guild.emojis.create('https://i.imgur.com/w3duR07.png', 'rip')\n     *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n     *   .catch(console.error);\n     * @example\n     * // Create a new emoji from a file on your computer\n     * guild.emojis.create('./memes/banana.png', 'banana')\n     *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(attachment, name) {\n        var _this2 = this;\n\n        var _ref,\n            roles,\n            reason,\n            data,\n            _iterator,\n            _step,\n            role,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref = _args.length > 2 && _args[2] !== undefined ? _args[2] : {}, roles = _ref.roles, reason = _ref.reason;\n                _context.next = 3;\n                return DataResolver.resolveImage(attachment);\n\n              case 3:\n                attachment = _context.sent;\n\n                if (attachment) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new _TypeError('REQ_RESOURCE_TYPE');\n\n              case 6:\n                data = {\n                  image: attachment,\n                  name: name\n                };\n\n                if (!roles) {\n                  _context.next = 28;\n                  break;\n                }\n\n                data.roles = [];\n                _iterator = _createForOfIteratorHelper(roles instanceof Collection ? roles.values() : roles);\n                _context.prev = 10;\n\n                _iterator.s();\n\n              case 12:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 20;\n                  break;\n                }\n\n                role = _step.value;\n                role = this.guild.roles.resolve(role);\n\n                if (role) {\n                  _context.next = 17;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", Promise.reject(new _TypeError('INVALID_TYPE', 'options.roles', 'Array or Collection of Roles or Snowflakes', true)));\n\n              case 17:\n                data.roles.push(role.id);\n\n              case 18:\n                _context.next = 12;\n                break;\n\n              case 20:\n                _context.next = 25;\n                break;\n\n              case 22:\n                _context.prev = 22;\n                _context.t0 = _context[\"catch\"](10);\n\n                _iterator.e(_context.t0);\n\n              case 25:\n                _context.prev = 25;\n\n                _iterator.f();\n\n                return _context.finish(25);\n\n              case 28:\n                return _context.abrupt(\"return\", this.client.api.guilds(this.guild.id).emojis.post({\n                  data: data,\n                  reason: reason\n                }).then(function (emoji) {\n                  return _this2.client.actions.GuildEmojiCreate.handle(_this2.guild, emoji).emoji;\n                }));\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[10, 22, 25, 28]]);\n      }));\n\n      function create(_x, _x2) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n    /**\n     * Data that can be resolved into an GuildEmoji object. This can be:\n     * * A custom emoji ID\n     * * A GuildEmoji object\n     * * A ReactionEmoji object\n     * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable\n     */\n\n    /**\n     * Resolves an EmojiResolvable to an Emoji object.\n     * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n     * @returns {?GuildEmoji}\n     */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(emoji) {\n      if (emoji instanceof ReactionEmoji) return _get(_getPrototypeOf(GuildEmojiManager.prototype), \"resolve\", this).call(this, emoji.id);\n      return _get(_getPrototypeOf(GuildEmojiManager.prototype), \"resolve\", this).call(this, emoji);\n    }\n    /**\n     * Resolves an EmojiResolvable to an Emoji ID string.\n     * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n     * @returns {?Snowflake}\n     */\n\n  }, {\n    key: \"resolveID\",\n    value: function resolveID(emoji) {\n      if (emoji instanceof ReactionEmoji) return emoji.id;\n      return _get(_getPrototypeOf(GuildEmojiManager.prototype), \"resolveID\", this).call(this, emoji);\n    }\n    /**\n     * Data that can be resolved to give an emoji identifier. This can be:\n     * * The unicode representation of an emoji\n     * * An EmojiResolvable\n     * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n     */\n\n    /**\n     * Resolves an EmojiResolvable to an emoji identifier.\n     * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n     * @returns {?string}\n     */\n\n  }, {\n    key: \"resolveIdentifier\",\n    value: function resolveIdentifier(emoji) {\n      var emojiResolvable = this.resolve(emoji);\n      if (emojiResolvable) return emojiResolvable.identifier;\n      if (emoji instanceof ReactionEmoji) return emoji.identifier;\n\n      if (typeof emoji === 'string') {\n        if (!emoji.includes('%')) return encodeURIComponent(emoji);else return emoji;\n      }\n\n      return null;\n    }\n  }]);\n\n  return GuildEmojiManager;\n}(BaseManager);\n\nmodule.exports = GuildEmojiManager;","map":null,"metadata":{},"sourceType":"module"}