{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Base = require('./Base');\n\nvar GuildPreviewEmoji = require('./GuildPreviewEmoji');\n\nvar Collection = require('../util/Collection');\n/**\n * Represents the data about the guild any bot can preview, connected to the specified public guild.\n * @extends {Base}\n */\n\n\nvar GuildPreview = /*#__PURE__*/function (_Base) {\n  _inherits(GuildPreview, _Base);\n\n  var _super = _createSuper(GuildPreview);\n\n  function GuildPreview(client, data) {\n    var _this;\n\n    _classCallCheck(this, GuildPreview);\n\n    _this = _super.call(this, client);\n    if (!data) return _possibleConstructorReturn(_this);\n\n    _this._patch(data);\n\n    return _this;\n  }\n  /**\n   * Builds the public guild with the provided data.\n   * @param {*} data The raw data of the public guild\n   * @private\n   */\n\n\n  _createClass(GuildPreview, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      /**\n       * The id of this public guild\n       * @type {string}\n       */\n      this.id = data.id;\n      /**\n       * The name of this public guild\n       * @type {string}\n       */\n\n      this.name = data.name;\n      /**\n       * The icon of this public guild\n       * @type {?string}\n       */\n\n      this.icon = data.icon;\n      /**\n       * The splash icon of this public guild\n       * @type {?string}\n       */\n\n      this.splash = data.splash;\n      /**\n       * The discovery splash icon of this public guild\n       * @type {?string}\n       */\n\n      this.discoverySplash = data.discovery_splash;\n      /**\n       * An array of enabled guild features\n       * @type {Features[]}\n       */\n\n      this.features = data.features;\n      /**\n       * The approximate count of members in this public guild\n       * @type {number}\n       */\n\n      this.approximateMemberCount = data.approximate_member_count;\n      /**\n       * The approximate count of online members in this public guild\n       * @type {number}\n       */\n\n      this.approximatePresenceCount = data.approximate_presence_count;\n      /**\n       * The description for this public guild\n       * @type {?string}\n       */\n\n      this.description = data.description;\n\n      if (!this.emojis) {\n        /**\n         * Collection of emojis belonging to this public guild\n         * @type {Collection<Snowflake, GuildPreviewEmoji>}\n         */\n        this.emojis = new Collection();\n      } else {\n        this.emojis.clear();\n      }\n\n      var _iterator = _createForOfIteratorHelper(data.emojis),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var emoji = _step.value;\n          this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * The URL to this public guild's splash.\n     * @param {ImageURLOptions} [options={}] Options for the Image URL\n     * @returns {?string}\n     */\n\n  }, {\n    key: \"splashURL\",\n    value: function splashURL() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          format = _ref.format,\n          size = _ref.size;\n\n      if (!this.splash) return null;\n      return this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n    }\n    /**\n     * The URL to this public guild's discovery splash.\n     * @param {ImageURLOptions} [options={}] Options for the Image URL\n     * @returns {?string}\n     */\n\n  }, {\n    key: \"discoverySplashURL\",\n    value: function discoverySplashURL() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          format = _ref2.format,\n          size = _ref2.size;\n\n      if (!this.discoverySplash) return null;\n      return this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n    }\n    /**\n     * The URL to this public guild's icon.\n     * @param {ImageURLOptions} [options={}] Options for the Image URL\n     * @returns {?string}\n     */\n\n  }, {\n    key: \"iconURL\",\n    value: function iconURL() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          format = _ref3.format,\n          size = _ref3.size,\n          dynamic = _ref3.dynamic;\n\n      if (!this.icon) return null;\n      return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n    }\n    /**\n     * Fetches this public guild.\n     * @returns {Promise<GuildPreview>}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function fetch() {\n      var _this2 = this;\n\n      return this.client.api.guilds(this.id).preview.get().then(function (data) {\n        _this2._patch(data);\n\n        return _this2;\n      });\n    }\n    /**\n     * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n     * @returns {string}\n     * @example\n     * // Logs: Hello from My Guild!\n     * console.log(`Hello from ${previewGuild}!`);\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = _get(_getPrototypeOf(GuildPreview.prototype), \"toJSON\", this).call(this);\n\n      json.iconURL = this.iconURL();\n      json.splashURL = this.splashURL();\n      return json;\n    }\n  }]);\n\n  return GuildPreview;\n}(Base);\n\nmodule.exports = GuildPreview;","map":null,"metadata":{},"sourceType":"module"}