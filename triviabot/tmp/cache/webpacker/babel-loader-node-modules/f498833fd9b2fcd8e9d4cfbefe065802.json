{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar GuildChannel = require('./GuildChannel');\n\nvar _require = require('../errors'),\n    Error = _require.Error;\n\nvar Collection = require('../util/Collection');\n\nvar _require2 = require('../util/Constants'),\n    browser = _require2.browser;\n\nvar Permissions = require('../util/Permissions');\n/**\n * Represents a guild voice channel on Discord.\n * @extends {GuildChannel}\n */\n\n\nvar VoiceChannel = /*#__PURE__*/function (_GuildChannel) {\n  _inherits(VoiceChannel, _GuildChannel);\n\n  var _super = _createSuper(VoiceChannel);\n\n  function VoiceChannel() {\n    _classCallCheck(this, VoiceChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VoiceChannel, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      _get(_getPrototypeOf(VoiceChannel.prototype), \"_patch\", this).call(this, data);\n      /**\n       * The bitrate of this voice channel\n       * @type {number}\n       */\n\n\n      this.bitrate = data.bitrate;\n      /**\n       * The maximum amount of users allowed in this channel - 0 means unlimited.\n       * @type {number}\n       */\n\n      this.userLimit = data.user_limit;\n    }\n    /**\n     * The members in this voice channel\n     * @type {Collection<Snowflake, GuildMember>}\n     * @name VoiceChannel#members\n     * @readonly\n     */\n\n  }, {\n    key: \"setBitrate\",\n\n    /**\n     * Sets the bitrate of the channel.\n     * @param {number} bitrate The new bitrate\n     * @param {string} [reason] Reason for changing the channel's bitrate\n     * @returns {Promise<VoiceChannel>}\n     * @example\n     * // Set the bitrate of a voice channel\n     * voiceChannel.setBitrate(48000)\n     *   .then(vc => console.log(`Set bitrate to ${vc.bitrate}bps for ${vc.name}`))\n     *   .catch(console.error);\n     */\n    value: function setBitrate(bitrate, reason) {\n      return this.edit({\n        bitrate: bitrate\n      }, reason);\n    }\n    /**\n     * Sets the user limit of the channel.\n     * @param {number} userLimit The new user limit\n     * @param {string} [reason] Reason for changing the user limit\n     * @returns {Promise<VoiceChannel>}\n     * @example\n     * // Set the user limit of a voice channel\n     * voiceChannel.setUserLimit(42)\n     *   .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setUserLimit\",\n    value: function setUserLimit(userLimit, reason) {\n      return this.edit({\n        userLimit: userLimit\n      }, reason);\n    }\n    /**\n     * Attempts to join this voice channel.\n     * @returns {Promise<VoiceConnection>}\n     * @example\n     * // Join a voice channel\n     * voiceChannel.join()\n     *   .then(connection => console.log('Connected!'))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"join\",\n    value: function join() {\n      if (browser) return Promise.reject(new Error('VOICE_NO_BROWSER'));\n      return this.client.voice.joinChannel(this);\n    }\n    /**\n     * Leaves this voice channel.\n     * @example\n     * // Leave a voice channel\n     * voiceChannel.leave();\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave() {\n      if (browser) return;\n      var connection = this.client.voice.connections.get(this.guild.id);\n      if (connection && connection.channel.id === this.id) connection.disconnect();\n    }\n  }, {\n    key: \"members\",\n    get: function get() {\n      var coll = new Collection();\n\n      var _iterator = _createForOfIteratorHelper(this.guild.voiceStates.cache.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var state = _step.value;\n\n          if (state.channelID === this.id && state.member) {\n            coll.set(state.id, state.member);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return coll;\n    }\n    /**\n     * Checks if the voice channel is full\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"full\",\n    get: function get() {\n      return this.userLimit > 0 && this.members.size >= this.userLimit;\n    }\n    /**\n     * Whether the channel is deletable by the client user\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"deletable\",\n    get: function get() {\n      return _get(_getPrototypeOf(VoiceChannel.prototype), \"deletable\", this) && this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT, false);\n    }\n    /**\n     * Whether the channel is editable by the client user\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"editable\",\n    get: function get() {\n      return this.manageable && this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT, false);\n    }\n    /**\n     * Whether the channel is joinable by the client user\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"joinable\",\n    get: function get() {\n      if (browser) return false;\n      if (!this.viewable) return false;\n      if (!this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT, false)) return false;\n      if (this.full && !this.permissionsFor(this.client.user).has(Permissions.FLAGS.MOVE_MEMBERS, false)) return false;\n      return true;\n    }\n    /**\n     * Checks if the client has permission to send audio to the voice channel\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"speakable\",\n    get: function get() {\n      return this.permissionsFor(this.client.user).has(Permissions.FLAGS.SPEAK, false);\n    }\n  }]);\n\n  return VoiceChannel;\n}(GuildChannel);\n\nmodule.exports = VoiceChannel;","map":null,"metadata":{},"sourceType":"module"}