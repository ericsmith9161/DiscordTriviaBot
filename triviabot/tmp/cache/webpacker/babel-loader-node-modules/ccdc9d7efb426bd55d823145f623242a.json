{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nrequire(\"dotenv\").config();\n\nvar fetch = require(\"node-fetch\");\n\nvar Discord = require(\"discord.js\");\n\nvar url = \"localhost:3000/\";\nvar client = new Discord.Client();\nclient.login(process.env.DISCORD_TOKEN);\n\nvar getLeader = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var response, json, board, i;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(url);\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            json = _context.sent;\n            board = \"\";\n            i = 1;\n            json.forEach(function (player) {\n              board += \"\".concat(i, \". \").concat(player.name, \": \").concat(player.score, \"\\n\");\n              i++;\n            });\n            return _context.abrupt(\"return\", board.trim());\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 13]]);\n  }));\n\n  return function getLeader(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar newPlayer = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n    var response, json;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch(url, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return response.json();\n\n          case 6:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", json.name);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 10]]);\n  }));\n\n  return function newPlayer(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getPlayer = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n    var response, json;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return fetch(url);\n\n          case 3:\n            response = _context3.sent;\n            _context3.next = 6;\n            return response.json();\n\n          case 6:\n            json = _context3.sent;\n            return _context3.abrupt(\"return\", json);\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 10]]);\n  }));\n\n  return function getPlayer(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar getQuestion = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(url) {\n    var response, json;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return fetch(url);\n\n          case 3:\n            response = _context4.sent;\n            _context4.next = 6;\n            return response.json();\n\n          case 6:\n            json = _context4.sent;\n            return _context4.abrupt(\"return\", json);\n\n          case 10:\n            _context4.prev = 10;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(_context4.t0);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 10]]);\n  }));\n\n  return function getQuestion(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar getResponses = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(question, message) {\n    var answer, filter, collector;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            // filter for responses > 3 chars and included in answer\n            answer = question.answer.toLowerCase();\n\n            filter = function filter(msg) {\n              if (msg.content.startsWith(\"?t\")) {\n                msg.reply(\"if you say so...\");\n                var response = msg.content.slice(3);\n                var words = response.split(\" \");\n                var condition = false;\n                words.forEach(function (word) {\n                  if (answer.includes(word.toLowerCase()) && word.length > 3) {\n                    condition = true;\n                  }\n                });\n                return condition;\n              } else {\n                return false;\n              }\n            };\n\n            collector = message.channel.createMessageCollector(filter, {\n              time: 30000\n            });\n            collector.on(\"collect\", /*#__PURE__*/function () {\n              var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(msg) {\n                var player, id, value, update;\n                return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        console.log(\"Collected \".concat(msg));\n                        _context5.next = 3;\n                        return getPlayer(\"http://localhost:3000/players?player=\".concat(msg.author.username));\n\n                      case 3:\n                        player = _context5.sent;\n                        id = player.id;\n                        value = question.value;\n                        _context5.next = 8;\n                        return addPoints(\"http://localhost:3000/players/\".concat(id, \"?value=\").concat(value));\n\n                      case 8:\n                        update = _context5.sent;\n\n                      case 9:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5);\n              }));\n\n              return function (_x7) {\n                return _ref6.apply(this, arguments);\n              };\n            }());\n            collector.on(\"end\", /*#__PURE__*/function () {\n              var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(collected) {\n                var board;\n                return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        console.log(\"Collected \".concat(collected.size, \" items\"));\n                        message.channel.send(\"The correct answer was: \".concat(question.answer));\n                        _context6.next = 4;\n                        return getLeader(\"http://localhost:3000/players\");\n\n                      case 4:\n                        board = _context6.sent;\n                        message.channel.send(\"the current leaderboard is:\\n \".concat(board));\n\n                      case 6:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee6);\n              }));\n\n              return function (_x8) {\n                return _ref7.apply(this, arguments);\n              };\n            }());\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function getResponses(_x5, _x6) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar addPoints = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(url) {\n    var response, json;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return fetch(url, {\n              method: \"PATCH\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n\n          case 3:\n            response = _context8.sent;\n            _context8.next = 6;\n            return response.json();\n\n          case 6:\n            json = _context8.sent;\n            return _context8.abrupt(\"return\", json);\n\n          case 10:\n            _context8.prev = 10;\n            _context8.t0 = _context8[\"catch\"](0);\n            console.log(_context8.t0);\n\n          case 13:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[0, 10]]);\n  }));\n\n  return function addPoints(_x9) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nclient.on(\"ready\", function () {\n  console.log(\"Logged in as \".concat(client.user.tag, \"!\"));\n});\nclient.on(\"message\", /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(msg) {\n    var command, options, limit, path, board, name, player, difficulty, diff, question, questionText;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!msg.content.startsWith(\"!t\")) {\n              _context9.next = 37;\n              break;\n            }\n\n            command = msg.content.split(\" \");\n            options = {\n              port: 3000\n            };\n\n            if (!(command.length > 1)) {\n              _context9.next = 34;\n              break;\n            }\n\n            _context9.t0 = command[1].toLowerCase();\n            _context9.next = _context9.t0 === \"leaderboard\" ? 7 : _context9.t0 === \"join\" ? 14 : _context9.t0 === \"score\" ? 19 : _context9.t0 === \"question\" ? 24 : 32;\n            break;\n\n          case 7:\n            if (command[2]) {\n              limit = parseInt(command[2]);\n            }\n\n            path = limit ? \"/players?limit=\".concat(limit) : \"/players\";\n            _context9.next = 11;\n            return getLeader(\"http://localhost:3000\".concat(path));\n\n          case 11:\n            board = _context9.sent;\n            msg.reply(\"the current leaderboard is:\\n \".concat(board));\n            return _context9.abrupt(\"break\", 32);\n\n          case 14:\n            _context9.next = 16;\n            return newPlayer(\"http://localhost:3000/players?name=\".concat(msg.author.username));\n\n          case 16:\n            name = _context9.sent;\n            msg.reply(\"you have joined the game as \".concat(name, \".\"));\n            return _context9.abrupt(\"break\", 32);\n\n          case 19:\n            _context9.next = 21;\n            return getPlayer(\"http://localhost:3000/players?player=\".concat(msg.author.username));\n\n          case 21:\n            player = _context9.sent;\n            msg.reply(\"your current score is \".concat(player.score, \".\"));\n            return _context9.abrupt(\"break\", 32);\n\n          case 24:\n            if (command[2]) {\n              difficulty = command[2].toUpperCase();\n            }\n\n            diff = difficulty ? \"/questions?difficulty=\".concat(difficulty) : \"/questions\";\n            _context9.next = 28;\n            return getQuestion(\"http://localhost:3000\".concat(diff));\n\n          case 28:\n            question = _context9.sent;\n            questionText = question.question_text;\n            msg.reply(questionText + \"\\nYou have 30 seconds to answer! Type ?t before your response. If this is your first time join the game with !t join before you answer.\");\n            getResponses(question, msg);\n\n          case 32:\n            _context9.next = 35;\n            break;\n\n          case 34:\n            return _context9.abrupt(\"return\");\n\n          case 35:\n            _context9.next = 38;\n            break;\n\n          case 37:\n            return _context9.abrupt(\"return\");\n\n          case 38:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function (_x10) {\n    return _ref9.apply(this, arguments);\n  };\n}());","map":{"version":3,"sources":["/Users/akifsaifi/dev/discord_bots/DiscordTriviaBot/triviabot/app/javascript/index.js"],"names":["require","config","fetch","Discord","url","client","Client","login","process","env","DISCORD_TOKEN","getLeader","response","json","board","i","forEach","player","name","score","trim","console","log","newPlayer","method","headers","getPlayer","getQuestion","getResponses","question","message","answer","toLowerCase","filter","msg","content","startsWith","reply","slice","words","split","condition","word","includes","length","collector","channel","createMessageCollector","time","on","author","username","id","value","addPoints","update","collected","size","send","user","tag","command","options","port","limit","parseInt","path","difficulty","toUpperCase","diff","questionText","question_text"],"mappings":"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","sourcesContent":["require(\"dotenv\").config();\nconst fetch = require(\"node-fetch\");\nconst Discord = require(\"discord.js\");\n\nconst url = \"localhost:3000/\";\nconst client = new Discord.Client();\nclient.login(process.env.DISCORD_TOKEN);\n\nconst getLeader = async (url) => {\n  try {\n    const response = await fetch(url);\n    let json = await response.json();\n    let board = \"\";\n    let i = 1;\n    json.forEach((player) => {\n      board += `${i}. ${player.name}: ${player.score}\\n`;\n      i++;\n    });\n    return board.trim();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst newPlayer = async (url) => {\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const json = await response.json();\n    return json.name;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getPlayer = async (url) => {\n  try {\n    const response = await fetch(url);\n    const json = await response.json();\n    return json;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getQuestion = async (url) => {\n  try {\n    const response = await fetch(url);\n    const json = await response.json();\n    return json;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getResponses = async (question, message) => {\n  // filter for responses > 3 chars and included in answer\n  let answer = question.answer.toLowerCase();\n  const filter = (msg) => {\n    if (msg.content.startsWith(\"?t\")) {\n      msg.reply(`if you say so...`);\n      let response = msg.content.slice(3);\n      let words = response.split(\" \");\n      let condition = false;\n      words.forEach((word) => {\n        if (answer.includes(word.toLowerCase()) && word.length > 3) {\n          condition = true;\n        }\n      });\n      return condition;\n    } else {\n      return false;\n    }\n  };\n  const collector = message.channel.createMessageCollector(filter, {\n    time: 30000,\n  });\n\n  collector.on(\"collect\", async (msg) => {\n    console.log(`Collected ${msg}`);\n    const player = await getPlayer(\n      `http://localhost:3000/players?player=${msg.author.username}`\n    );\n    let id = player.id;\n    let value = question.value;\n    const update = await addPoints(\n      `http://localhost:3000/players/${id}?value=${value}`\n    );\n  });\n\n  collector.on(\"end\", async (collected) => {\n    console.log(`Collected ${collected.size} items`);\n    message.channel.send(`The correct answer was: ${question.answer}`);\n    let board = await getLeader(`http://localhost:3000/players`);\n    message.channel.send(`the current leaderboard is:\\n ${board}`);\n  });\n};\n\nconst addPoints = async (url) => {\n  try {\n    const response = await fetch(url, {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const json = await response.json();\n    return json;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nclient.on(\"ready\", () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\n\nclient.on(\"message\", async (msg) => {\n  if (msg.content.startsWith(\"!t\")) {\n    let command = msg.content.split(\" \");\n    const options = { port: 3000 };\n    if (command.length > 1) {\n      switch (command[1].toLowerCase()) {\n        case \"leaderboard\":\n          let limit;\n          if (command[2]) {\n            limit = parseInt(command[2]);\n          }\n          let path = limit ? `/players?limit=${limit}` : \"/players\";\n          let board = await getLeader(`http://localhost:3000${path}`);\n          msg.reply(`the current leaderboard is:\\n ${board}`);\n          break;\n        case \"join\":\n          let name = await newPlayer(\n            `http://localhost:3000/players?name=${msg.author.username}`\n          );\n          msg.reply(`you have joined the game as ${name}.`);\n          break;\n        case \"score\":\n          let player = await getPlayer(\n            `http://localhost:3000/players?player=${msg.author.username}`\n          );\n          msg.reply(`your current score is ${player.score}.`);\n          break;\n        case \"question\":\n          let difficulty;\n          if (command[2]) {\n            difficulty = command[2].toUpperCase();\n          }\n          let diff = difficulty\n            ? `/questions?difficulty=${difficulty}`\n            : \"/questions\";\n          let question = await getQuestion(`http://localhost:3000${diff}`);\n          let questionText = question.question_text;\n          msg.reply(\n            questionText +\n              \"\\nYou have 30 seconds to answer! Type ?t before your response. If this is your first time join the game with !t join before you answer.\"\n          );\n          getResponses(question, msg);\n      }\n    } else {\n      return;\n    }\n  } else {\n    return;\n  }\n});\n\n"]},"metadata":{},"sourceType":"module"}