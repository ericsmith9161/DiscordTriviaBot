{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Base = require('./Base');\n\nvar _require = require('../util/Constants'),\n    ChannelTypes = _require.ChannelTypes;\n\nvar Snowflake = require('../util/Snowflake');\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n */\n\n\nvar Channel = /*#__PURE__*/function (_Base) {\n  _inherits(Channel, _Base);\n\n  var _super = _createSuper(Channel);\n\n  function Channel(client, data) {\n    var _this;\n\n    _classCallCheck(this, Channel);\n\n    _this = _super.call(this, client);\n    var type = Object.keys(ChannelTypes)[data.type];\n    /**\n     * The type of the channel, either:\n     * * `dm` - a DM channel\n     * * `text` - a guild text channel\n     * * `voice` - a guild voice channel\n     * * `category` - a guild category channel\n     * * `news` - a guild news channel\n     * * `store` - a guild store channel\n     * * `unknown` - a generic channel of unknown type, could be Channel or GuildChannel\n     * @type {string}\n     */\n\n    _this.type = type ? type.toLowerCase() : 'unknown';\n    /**\n     * Whether the channel has been deleted\n     * @type {boolean}\n     */\n\n    _this.deleted = false;\n    if (data) _this._patch(data);\n    return _this;\n  }\n\n  _createClass(Channel, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      /**\n       * The unique ID of the channel\n       * @type {Snowflake}\n       */\n      this.id = data.id;\n    }\n    /**\n     * The timestamp the channel was created at\n     * @type {number}\n     * @readonly\n     */\n\n  }, {\n    key: \"toString\",\n\n    /**\n     * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n     * @returns {string}\n     * @example\n     * // Logs: Hello from <#123456789012345678>!\n     * console.log(`Hello from ${channel}!`);\n     */\n    value: function toString() {\n      return \"<#\".concat(this.id, \">\");\n    }\n    /**\n     * Deletes this channel.\n     * @returns {Promise<Channel>}\n     * @example\n     * // Delete the channel\n     * channel.delete()\n     *   .then(console.log)\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this2 = this;\n\n      return this.client.api.channels(this.id)[\"delete\"]().then(function () {\n        return _this2;\n      });\n    }\n    /**\n     * Fetches this channel.\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function fetch() {\n      return this.client.channels.fetch(this.id, true);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _get2;\n\n      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n        props[_key] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(Channel.prototype), \"toJSON\", this)).call.apply(_get2, [this, {\n        createdTimestamp: true\n      }].concat(props));\n    }\n  }, {\n    key: \"createdTimestamp\",\n    get: function get() {\n      return Snowflake.deconstruct(this.id).timestamp;\n    }\n    /**\n     * The time the channel was created at\n     * @type {Date}\n     * @readonly\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function get() {\n      return new Date(this.createdTimestamp);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(client, data, guild) {\n      var Structures = require('../util/Structures');\n\n      var channel;\n\n      if (!data.guild_id && !guild) {\n        if (data.recipients && data.type !== ChannelTypes.GROUP || data.type === ChannelTypes.DM) {\n          var DMChannel = Structures.get('DMChannel');\n          channel = new DMChannel(client, data);\n        } else if (data.type === ChannelTypes.GROUP) {\n          var PartialGroupDMChannel = require('./PartialGroupDMChannel');\n\n          channel = new PartialGroupDMChannel(client, data);\n        }\n      } else {\n        guild = guild || client.guilds.cache.get(data.guild_id);\n\n        if (guild) {\n          switch (data.type) {\n            case ChannelTypes.TEXT:\n              {\n                var TextChannel = Structures.get('TextChannel');\n                channel = new TextChannel(guild, data);\n                break;\n              }\n\n            case ChannelTypes.VOICE:\n              {\n                var VoiceChannel = Structures.get('VoiceChannel');\n                channel = new VoiceChannel(guild, data);\n                break;\n              }\n\n            case ChannelTypes.CATEGORY:\n              {\n                var CategoryChannel = Structures.get('CategoryChannel');\n                channel = new CategoryChannel(guild, data);\n                break;\n              }\n\n            case ChannelTypes.NEWS:\n              {\n                var NewsChannel = Structures.get('NewsChannel');\n                channel = new NewsChannel(guild, data);\n                break;\n              }\n\n            case ChannelTypes.STORE:\n              {\n                var StoreChannel = Structures.get('StoreChannel');\n                channel = new StoreChannel(guild, data);\n                break;\n              }\n          }\n\n          if (channel) guild.channels.cache.set(channel.id, channel);\n        }\n      }\n\n      return channel;\n    }\n  }]);\n\n  return Channel;\n}(Base);\n\nmodule.exports = Channel;","map":null,"metadata":{},"sourceType":"module"}