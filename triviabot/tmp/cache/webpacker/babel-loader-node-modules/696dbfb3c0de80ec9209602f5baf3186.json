{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('../../util/Constants'),\n    PartialTypes = _require.PartialTypes;\n/*\n\nABOUT ACTIONS\n\nActions are similar to WebSocket Packet Handlers, but since introducing\nthe REST API methods, in order to prevent rewriting code to handle data,\n\"actions\" have been introduced. They're basically what Packet Handlers\nused to be but they're strictly for manipulating data and making sure\nthat WebSocket events don't clash with REST methods.\n\n*/\n\n\nvar GenericAction = /*#__PURE__*/function () {\n  function GenericAction(client) {\n    _classCallCheck(this, GenericAction);\n\n    this.client = client;\n  }\n\n  _createClass(GenericAction, [{\n    key: \"handle\",\n    value: function handle(data) {\n      return data;\n    }\n  }, {\n    key: \"getPayload\",\n    value: function getPayload(data, manager, id, partialType, cache) {\n      var existing = manager.cache.get(id);\n\n      if (!existing && this.client.options.partials.includes(partialType)) {\n        return manager.add(data, cache);\n      }\n\n      return existing;\n    }\n  }, {\n    key: \"getChannel\",\n    value: function getChannel(data) {\n      var id = data.channel_id || data.id;\n      return data.channel || this.getPayload({\n        id: id,\n        guild_id: data.guild_id,\n        recipients: [data.author || {\n          id: data.user_id\n        }]\n      }, this.client.channels, id, PartialTypes.CHANNEL);\n    }\n  }, {\n    key: \"getMessage\",\n    value: function getMessage(data, channel, cache) {\n      var id = data.message_id || data.id;\n      return data.message || this.getPayload({\n        id: id,\n        channel_id: channel.id,\n        guild_id: data.guild_id || (channel.guild ? channel.guild.id : null)\n      }, channel.messages, id, PartialTypes.MESSAGE, cache);\n    }\n  }, {\n    key: \"getReaction\",\n    value: function getReaction(data, message, user) {\n      var id = data.emoji.id || decodeURIComponent(data.emoji.name);\n      return this.getPayload({\n        emoji: data.emoji,\n        count: message.partial ? null : 0,\n        me: user ? user.id === this.client.user.id : false\n      }, message.reactions, id, PartialTypes.REACTION);\n    }\n  }, {\n    key: \"getMember\",\n    value: function getMember(data, guild) {\n      var id = data.user.id;\n      return this.getPayload({\n        user: {\n          id: id\n        }\n      }, guild.members, id, PartialTypes.GUILD_MEMBER);\n    }\n  }, {\n    key: \"getUser\",\n    value: function getUser(data) {\n      var id = data.user_id;\n      return data.user || this.getPayload({\n        id: id\n      }, this.client.users, id, PartialTypes.USER);\n    }\n  }]);\n\n  return GenericAction;\n}();\n\nmodule.exports = GenericAction;","map":null,"metadata":{},"sourceType":"module"}