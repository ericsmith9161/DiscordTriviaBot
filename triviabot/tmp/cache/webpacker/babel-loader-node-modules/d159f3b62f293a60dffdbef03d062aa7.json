{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('../errors'),\n    _TypeError = _require.TypeError;\n\nvar Collection = require('../util/Collection');\n/**\n * Manages API methods for roles of a GuildMember and stores their cache.\n */\n\n\nvar GuildMemberRoleManager = /*#__PURE__*/function () {\n  function GuildMemberRoleManager(member) {\n    _classCallCheck(this, GuildMemberRoleManager);\n\n    /**\n     * The GuildMember this manager belongs to\n     * @type {GuildMember}\n     */\n    this.member = member;\n    /**\n     * The Guild this manager belongs to\n     * @type {Guild}\n     */\n\n    this.guild = member.guild;\n    Object.defineProperty(this, 'client', {\n      value: member.client\n    });\n  }\n  /**\n   * The filtered collection of roles of the member\n   * @type {Collection<Snowflake, Role>}\n   * @private\n   * @readonly\n   */\n\n\n  _createClass(GuildMemberRoleManager, [{\n    key: \"add\",\n\n    /**\n     * Adds a role (or multiple roles) to the member.\n     * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n     * @param {string} [reason] Reason for adding the role(s)\n     * @returns {Promise<GuildMember>}\n     */\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(roleOrRoles, reason) {\n        var _this = this;\n\n        var _roleOrRoles, newRoles, clone;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(roleOrRoles instanceof Collection || Array.isArray(roleOrRoles))) {\n                  _context.next = 8;\n                  break;\n                }\n\n                roleOrRoles = roleOrRoles.map(function (r) {\n                  return _this.guild.roles.resolve(r);\n                });\n\n                if (!roleOrRoles.includes(null)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new _TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true);\n\n              case 4:\n                newRoles = _toConsumableArray(new Set((_roleOrRoles = roleOrRoles).concat.apply(_roleOrRoles, _toConsumableArray(this._roles.values()))));\n                return _context.abrupt(\"return\", this.set(newRoles, reason));\n\n              case 8:\n                roleOrRoles = this.guild.roles.resolve(roleOrRoles);\n\n                if (!(roleOrRoles === null)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new _TypeError('INVALID_TYPE', 'roles', 'Role, Snowflake or Array or Collection of Roles or Snowflakes', true);\n\n              case 11:\n                _context.next = 13;\n                return this.client.api.guilds[this.guild.id].members[this.member.id].roles[roleOrRoles.id].put({\n                  reason: reason\n                });\n\n              case 13:\n                clone = this.member._clone();\n                clone._roles = [].concat(_toConsumableArray(this._roles.keys()), [roleOrRoles.id]);\n                return _context.abrupt(\"return\", clone);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function add(_x, _x2) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * Removes a role (or multiple roles) from the member.\n     * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n     * @param {string} [reason] Reason for removing the role(s)\n     * @returns {Promise<GuildMember>}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(roleOrRoles, reason) {\n        var _this2 = this;\n\n        var newRoles, clone, _newRoles;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(roleOrRoles instanceof Collection || Array.isArray(roleOrRoles))) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                roleOrRoles = roleOrRoles.map(function (r) {\n                  return _this2.guild.roles.resolve(r);\n                });\n\n                if (!roleOrRoles.includes(null)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new _TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true);\n\n              case 4:\n                newRoles = this._roles.filter(function (role) {\n                  return !roleOrRoles.includes(role);\n                });\n                return _context2.abrupt(\"return\", this.set(newRoles, reason));\n\n              case 8:\n                roleOrRoles = this.guild.roles.resolve(roleOrRoles);\n\n                if (!(roleOrRoles === null)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                throw new _TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true);\n\n              case 11:\n                _context2.next = 13;\n                return this.client.api.guilds[this.guild.id].members[this.member.id].roles[roleOrRoles.id][\"delete\"]({\n                  reason: reason\n                });\n\n              case 13:\n                clone = this.member._clone();\n                _newRoles = this._roles.filter(function (role) {\n                  return role.id !== roleOrRoles.id;\n                });\n                clone._roles = _toConsumableArray(_newRoles.keys());\n                return _context2.abrupt(\"return\", clone);\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function remove(_x3, _x4) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * Sets the roles applied to the member.\n     * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to apply\n     * @param {string} [reason] Reason for applying the roles\n     * @returns {Promise<GuildMember>}\n     * @example\n     * // Set the member's roles to a single role\n     * guildMember.roles.set(['391156570408615936'])\n     *   .then(console.log)\n     *   .catch(console.error);\n     * @example\n     * // Remove all the roles from a member\n     * guildMember.roles.set([])\n     *   .then(member => console.log(`Member roles is now of ${member.roles.cache.size} size`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(roles, reason) {\n      return this.member.edit({\n        roles: roles\n      }, reason);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new this.constructor(this.member);\n      clone.member._roles = _toConsumableArray(this._roles.keyArray());\n      return clone;\n    }\n  }, {\n    key: \"_roles\",\n    get: function get() {\n      var _this3 = this;\n\n      var everyone = this.guild.roles.everyone;\n      return this.guild.roles.cache.filter(function (role) {\n        return _this3.member._roles.includes(role.id);\n      }).set(everyone.id, everyone);\n    }\n    /**\n     * The roles of this member\n     * @type {Collection<Snowflake, Role>}\n     * @readonly\n     */\n\n  }, {\n    key: \"cache\",\n    get: function get() {\n      return this._roles;\n    }\n    /**\n     * The role of the member used to hoist them in a separate category in the users list\n     * @type {?Role}\n     * @readonly\n     */\n\n  }, {\n    key: \"hoist\",\n    get: function get() {\n      var hoistedRoles = this._roles.filter(function (role) {\n        return role.hoist;\n      });\n\n      if (!hoistedRoles.size) return null;\n      return hoistedRoles.reduce(function (prev, role) {\n        return !prev || role.comparePositionTo(prev) > 0 ? role : prev;\n      });\n    }\n    /**\n     * The role of the member used to set their color\n     * @type {?Role}\n     * @readonly\n     */\n\n  }, {\n    key: \"color\",\n    get: function get() {\n      var coloredRoles = this._roles.filter(function (role) {\n        return role.color;\n      });\n\n      if (!coloredRoles.size) return null;\n      return coloredRoles.reduce(function (prev, role) {\n        return !prev || role.comparePositionTo(prev) > 0 ? role : prev;\n      });\n    }\n    /**\n     * The role of the member with the highest position\n     * @type {Role}\n     * @readonly\n     */\n\n  }, {\n    key: \"highest\",\n    get: function get() {\n      return this._roles.reduce(function (prev, role) {\n        return role.comparePositionTo(prev) > 0 ? role : prev;\n      }, this._roles.first());\n    }\n  }]);\n\n  return GuildMemberRoleManager;\n}();\n\nmodule.exports = GuildMemberRoleManager;","map":null,"metadata":{},"sourceType":"module"}