{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar BaseManager = require('./BaseManager');\n\nvar Channel = require('../structures/Channel');\n\nvar _require = require('../util/Constants'),\n    Events = _require.Events;\n/**\n * A manager of channels belonging to a client\n * @extends {BaseManager}\n */\n\n\nvar ChannelManager = /*#__PURE__*/function (_BaseManager) {\n  _inherits(ChannelManager, _BaseManager);\n\n  var _super = _createSuper(ChannelManager);\n\n  function ChannelManager(client, iterable) {\n    _classCallCheck(this, ChannelManager);\n\n    return _super.call(this, client, iterable, Channel);\n  }\n  /**\n   * The cache of Channels\n   * @type {Collection<Snowflake, Channel>}\n   * @name ChannelManager#cache\n   */\n\n\n  _createClass(ChannelManager, [{\n    key: \"add\",\n    value: function add(data, guild) {\n      var cache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var existing = this.cache.get(data.id);\n\n      if (existing) {\n        if (existing._patch && cache) existing._patch(data);\n        if (guild) guild.channels.add(existing);\n        return existing;\n      }\n\n      var channel = Channel.create(this.client, data, guild);\n\n      if (!channel) {\n        this.client.emit(Events.DEBUG, \"Failed to find guild, or unknown type for channel \".concat(data.id, \" \").concat(data.type));\n        return null;\n      }\n\n      if (cache) this.cache.set(channel.id, channel);\n      return channel;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      var channel = this.cache.get(id);\n      if (channel.guild) channel.guild.channels.cache[\"delete\"](id);\n      this.cache[\"delete\"](id);\n    }\n    /**\n     * Data that can be resolved to give a Channel object. This can be:\n     * * A Channel object\n     * * A Snowflake\n     * @typedef {Channel|Snowflake} ChannelResolvable\n     */\n\n    /**\n     * Resolves a ChannelResolvable to a Channel object.\n     * @method resolve\n     * @memberof ChannelManager\n     * @instance\n     * @param {ChannelResolvable} channel The channel resolvable to resolve\n     * @returns {?Channel}\n     */\n\n    /**\n     * Resolves a ChannelResolvable to a channel ID string.\n     * @method resolveID\n     * @memberof ChannelManager\n     * @instance\n     * @param {ChannelResolvable} channel The channel resolvable to resolve\n     * @returns {?Snowflake}\n     */\n\n    /**\n     * Obtains a channel from Discord, or the channel cache if it's already available.\n     * @param {Snowflake} id ID of the channel\n     * @param {boolean} [cache=true] Whether to cache the new channel object if it isn't already\n     * @returns {Promise<Channel>}\n     * @example\n     * // Fetch a channel by its id\n     * client.channels.fetch('222109930545610754')\n     *   .then(channel => console.log(channel.name))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var cache,\n            existing,\n            data,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cache = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n                existing = this.cache.get(id);\n\n                if (!(existing && !existing.partial)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", existing);\n\n              case 4:\n                _context.next = 6;\n                return this.client.api.channels(id).get();\n\n              case 6:\n                data = _context.sent;\n                return _context.abrupt(\"return\", this.add(data, null, cache));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }]);\n\n  return ChannelManager;\n}(BaseManager);\n\nmodule.exports = ChannelManager;","map":null,"metadata":{},"sourceType":"module"}