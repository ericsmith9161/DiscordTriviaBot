{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar _require = require('./Presence'),\n    Presence = _require.Presence;\n\nvar _require2 = require('../errors'),\n    _TypeError = _require2.TypeError;\n\nvar Collection = require('../util/Collection');\n\nvar _require3 = require('../util/Constants'),\n    ActivityTypes = _require3.ActivityTypes,\n    OPCodes = _require3.OPCodes;\n\nvar ClientPresence = /*#__PURE__*/function (_Presence) {\n  _inherits(ClientPresence, _Presence);\n\n  var _super = _createSuper(ClientPresence);\n\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} [data={}] The data for the client presence\n   */\n  function ClientPresence(client) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, ClientPresence);\n\n    return _super.call(this, client, Object.assign(data, {\n      status: 'online',\n      user: {\n        id: null\n      }\n    }));\n  }\n\n  _createClass(ClientPresence, [{\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(presence) {\n        var packet, _iterator, _step, shardID;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._parse(presence);\n\n              case 2:\n                packet = _context.sent;\n                this.patch(packet);\n\n                if (typeof presence.shardID === 'undefined') {\n                  this.client.ws.broadcast({\n                    op: OPCodes.STATUS_UPDATE,\n                    d: packet\n                  });\n                } else if (Array.isArray(presence.shardID)) {\n                  _iterator = _createForOfIteratorHelper(presence.shardID);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      shardID = _step.value;\n                      this.client.ws.shards.get(shardID).send({\n                        op: OPCodes.STATUS_UPDATE,\n                        d: packet\n                      });\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                } else {\n                  this.client.ws.shards.get(presence.shardID).send({\n                    op: OPCodes.STATUS_UPDATE,\n                    d: packet\n                  });\n                }\n\n                return _context.abrupt(\"return\", this);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function set(_x) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"_parse\",\n    value: function () {\n      var _parse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref) {\n        var status, since, afk, activity, applicationID, assets, a, _iterator2, _step2, asset, packet;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                status = _ref.status, since = _ref.since, afk = _ref.afk, activity = _ref.activity;\n                applicationID = activity && (activity.application ? activity.application.id || activity.application : null);\n                assets = new Collection();\n\n                if (!activity) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                if (!(typeof activity.name !== 'string')) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw new _TypeError('INVALID_TYPE', 'name', 'string');\n\n              case 6:\n                if (!activity.type) activity.type = 0;\n\n                if (!(activity.assets && applicationID)) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.prev = 8;\n                _context2.next = 11;\n                return this.client.api.oauth2.applications(applicationID).assets.get();\n\n              case 11:\n                a = _context2.sent;\n                _iterator2 = _createForOfIteratorHelper(a);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    asset = _step2.value;\n                    assets.set(asset.name, asset.id);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                _context2.next = 18;\n                break;\n\n              case 16:\n                _context2.prev = 16;\n                _context2.t0 = _context2[\"catch\"](8);\n\n              case 18:\n                packet = {\n                  afk: afk != null ? afk : false,\n                  // eslint-disable-line eqeqeq\n                  since: since != null ? since : null,\n                  // eslint-disable-line eqeqeq\n                  status: status || this.status,\n                  game: activity ? {\n                    type: activity.type,\n                    name: activity.name,\n                    url: activity.url,\n                    details: activity.details || undefined,\n                    state: activity.state || undefined,\n                    assets: activity.assets ? {\n                      large_text: activity.assets.largeText || undefined,\n                      small_text: activity.assets.smallText || undefined,\n                      large_image: assets.get(activity.assets.largeImage) || activity.assets.largeImage,\n                      small_image: assets.get(activity.assets.smallImage) || activity.assets.smallImage\n                    } : undefined,\n                    timestamps: activity.timestamps || undefined,\n                    party: activity.party || undefined,\n                    application_id: applicationID || undefined,\n                    secrets: activity.secrets || undefined,\n                    instance: activity.instance || undefined\n                  } : null\n                };\n\n                if ((status || afk || since) && !activity) {\n                  packet.game = this.activities[0] || null;\n                }\n\n                if (packet.game) {\n                  packet.game.type = typeof packet.game.type === 'number' ? packet.game.type : ActivityTypes.indexOf(packet.game.type);\n                }\n\n                return _context2.abrupt(\"return\", packet);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[8, 16]]);\n      }));\n\n      function _parse(_x2) {\n        return _parse2.apply(this, arguments);\n      }\n\n      return _parse;\n    }()\n  }]);\n\n  return ClientPresence;\n}(Presence);\n\nmodule.exports = ClientPresence;","map":null,"metadata":{},"sourceType":"module"}