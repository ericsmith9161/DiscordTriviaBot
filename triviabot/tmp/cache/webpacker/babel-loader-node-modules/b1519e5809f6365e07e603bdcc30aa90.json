{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Action = require('./Action');\n\nvar _require = require('../../util/Constants'),\n    Events = _require.Events;\n\nvar GuildDeleteAction = /*#__PURE__*/function (_Action) {\n  _inherits(GuildDeleteAction, _Action);\n\n  var _super = _createSuper(GuildDeleteAction);\n\n  function GuildDeleteAction(client) {\n    var _this;\n\n    _classCallCheck(this, GuildDeleteAction);\n\n    _this = _super.call(this, client);\n    _this.deleted = new Map();\n    return _this;\n  }\n\n  _createClass(GuildDeleteAction, [{\n    key: \"handle\",\n    value: function handle(data) {\n      var client = this.client;\n      var guild = client.guilds.cache.get(data.id);\n\n      if (guild) {\n        var _iterator = _createForOfIteratorHelper(guild.channels.cache.values()),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var channel = _step.value;\n            if (channel.type === 'text') channel.stopTyping(true);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (data.unavailable) {\n          // Guild is unavailable\n          guild.available = false;\n          /**\n           * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n           * @event Client#guildUnavailable\n           * @param {Guild} guild The guild that has become unavailable\n           */\n\n          client.emit(Events.GUILD_UNAVAILABLE, guild); // Stops the GuildDelete packet thinking a guild was actually deleted,\n          // handles emitting of event itself\n\n          return {\n            guild: null\n          };\n        }\n\n        var _iterator2 = _createForOfIteratorHelper(guild.channels.cache.values()),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _channel = _step2.value;\n            this.client.channels.remove(_channel.id);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        if (guild.voice && guild.voice.connection) guild.voice.connection.disconnect(); // Delete guild\n\n        client.guilds.cache[\"delete\"](guild.id);\n        guild.deleted = true;\n        /**\n         * Emitted whenever a guild kicks the client or the guild is deleted/left.\n         * @event Client#guildDelete\n         * @param {Guild} guild The guild that was deleted\n         */\n\n        client.emit(Events.GUILD_DELETE, guild);\n        this.deleted.set(guild.id, guild);\n        this.scheduleForDeletion(guild.id);\n      } else {\n        guild = this.deleted.get(data.id) || null;\n      }\n\n      return {\n        guild: guild\n      };\n    }\n  }, {\n    key: \"scheduleForDeletion\",\n    value: function scheduleForDeletion(id) {\n      var _this2 = this;\n\n      this.client.setTimeout(function () {\n        return _this2.deleted[\"delete\"](id);\n      }, this.client.options.restWsBridgeTimeout);\n    }\n  }]);\n\n  return GuildDeleteAction;\n}(Action);\n\nmodule.exports = GuildDeleteAction;","map":null,"metadata":{},"sourceType":"module"}