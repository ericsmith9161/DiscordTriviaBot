{"ast":null,"code":"'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Collection = require('../util/Collection');\n\nvar Structures;\n/**\n * Manages the API methods of a data model and holds its cache.\n * @abstract\n */\n\nvar BaseManager = /*#__PURE__*/function () {\n  function BaseManager(client, iterable, holds) {\n    var cacheType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Collection;\n\n    _classCallCheck(this, BaseManager);\n\n    if (!Structures) Structures = require('../util/Structures');\n    /**\n     * The data structure belonging to this manager\n     * @name BaseManager#holds\n     * @type {Function}\n     * @private\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'holds', {\n      value: Structures.get(holds.name) || holds\n    });\n    /**\n     * The client that instantiated this Manager\n     * @name BaseManager#client\n     * @type {Client}\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The type of Collection of the Manager\n     * @type {Collection}\n     */\n\n    this.cacheType = cacheType;\n    /**\n     * Holds the cache for the data model\n     * @type {Collection}\n     */\n\n    for (var _len = arguments.length, cacheOptions = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n      cacheOptions[_key - 4] = arguments[_key];\n    }\n\n    this.cache = _construct(cacheType, cacheOptions);\n\n    if (iterable) {\n      var _iterator = _createForOfIteratorHelper(iterable),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var i = _step.value;\n          this.add(i);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n\n  _createClass(BaseManager, [{\n    key: \"add\",\n    value: function add(data) {\n      var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          id = _ref.id,\n          _ref$extras = _ref.extras,\n          extras = _ref$extras === void 0 ? [] : _ref$extras;\n\n      var existing = this.cache.get(id || data.id);\n      if (existing && existing._patch && cache) existing._patch(data);\n      if (existing) return existing;\n      var entry = this.holds ? _construct(this.holds, [this.client, data].concat(_toConsumableArray(extras))) : data;\n      if (cache) this.cache.set(id || entry.id, entry);\n      return entry;\n    }\n    /**\n     * Resolves a data entry to a data Object.\n     * @param {string|Object} idOrInstance The id or instance of something in this Manager\n     * @returns {?Object} An instance from this Manager\n     */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(idOrInstance) {\n      if (idOrInstance instanceof this.holds) return idOrInstance;\n      if (typeof idOrInstance === 'string') return this.cache.get(idOrInstance) || null;\n      return null;\n    }\n    /**\n     * Resolves a data entry to a instance ID.\n     * @param {string|Object} idOrInstance The id or instance of something in this Manager\n     * @returns {?Snowflake}\n     */\n\n  }, {\n    key: \"resolveID\",\n    value: function resolveID(idOrInstance) {\n      if (idOrInstance instanceof this.holds) return idOrInstance.id;\n      if (typeof idOrInstance === 'string') return idOrInstance;\n      return null;\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.cache;\n    }\n  }]);\n\n  return BaseManager;\n}();\n\nmodule.exports = BaseManager;","map":null,"metadata":{},"sourceType":"module"}