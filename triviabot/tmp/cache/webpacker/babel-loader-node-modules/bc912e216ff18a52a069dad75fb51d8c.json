{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar APIRequest = require('./APIRequest');\n\nvar routeBuilder = require('./APIRouter');\n\nvar RequestHandler = require('./RequestHandler');\n\nvar _require = require('../errors'),\n    Error = _require.Error;\n\nvar Collection = require('../util/Collection');\n\nvar _require2 = require('../util/Constants'),\n    Endpoints = _require2.Endpoints;\n\nvar RESTManager = /*#__PURE__*/function () {\n  function RESTManager(client) {\n    var _this = this;\n\n    var tokenPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Bot';\n\n    _classCallCheck(this, RESTManager);\n\n    this.client = client;\n    this.handlers = new Collection();\n    this.tokenPrefix = tokenPrefix;\n    this.versioned = true;\n    this.globalTimeout = null;\n\n    if (client.options.restSweepInterval > 0) {\n      client.setInterval(function () {\n        _this.handlers.sweep(function (handler) {\n          return handler._inactive;\n        });\n      }, client.options.restSweepInterval * 1000);\n    }\n  }\n\n  _createClass(RESTManager, [{\n    key: \"getAuth\",\n    value: function getAuth() {\n      var token = this.client.token || this.client.accessToken;\n      if (token) return \"\".concat(this.tokenPrefix, \" \").concat(token);\n      throw new Error('TOKEN_MISSING');\n    }\n  }, {\n    key: \"push\",\n    value: function push(handler, apiRequest) {\n      return new Promise(function (resolve, reject) {\n        handler.push({\n          request: apiRequest,\n          resolve: resolve,\n          reject: reject,\n          retries: 0\n        })[\"catch\"](reject);\n      });\n    }\n  }, {\n    key: \"request\",\n    value: function request(method, url) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var apiRequest = new APIRequest(this, method, url, options);\n      var handler = this.handlers.get(apiRequest.route);\n\n      if (!handler) {\n        handler = new RequestHandler(this);\n        this.handlers.set(apiRequest.route, handler);\n      }\n\n      return this.push(handler, apiRequest);\n    }\n  }, {\n    key: \"api\",\n    get: function get() {\n      return routeBuilder(this);\n    }\n  }, {\n    key: \"cdn\",\n    get: function get() {\n      return Endpoints.CDN(this.client.options.http.cdn);\n    }\n  }, {\n    key: \"endpoint\",\n    set: function set(endpoint) {\n      this.client.options.http.api = endpoint;\n    }\n  }]);\n\n  return RESTManager;\n}();\n\nmodule.exports = RESTManager;","map":null,"metadata":{},"sourceType":"module"}