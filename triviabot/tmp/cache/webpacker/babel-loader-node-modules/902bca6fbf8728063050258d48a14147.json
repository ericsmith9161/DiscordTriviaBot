{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar EventEmitter = require('events');\n\nvar WebSocketShard = require('./WebSocketShard');\n\nvar PacketHandlers = require('./handlers');\n\nvar _require = require('../../errors'),\n    DJSError = _require.Error;\n\nvar Collection = require('../../util/Collection');\n\nvar _require2 = require('../../util/Constants'),\n    Events = _require2.Events,\n    ShardEvents = _require2.ShardEvents,\n    Status = _require2.Status,\n    WSCodes = _require2.WSCodes,\n    WSEvents = _require2.WSEvents;\n\nvar Util = require('../../util/Util');\n\nvar BeforeReadyWhitelist = [WSEvents.READY, WSEvents.RESUMED, WSEvents.GUILD_CREATE, WSEvents.GUILD_DELETE, WSEvents.GUILD_MEMBERS_CHUNK, WSEvents.GUILD_MEMBER_ADD, WSEvents.GUILD_MEMBER_REMOVE];\nvar UNRECOVERABLE_CLOSE_CODES = Object.keys(WSCodes).slice(1).map(Number);\nvar UNRESUMABLE_CLOSE_CODES = [1000, 4006, 4007];\n/**\n * The WebSocket manager for this client.\n * <info>This class forwards raw dispatch events,\n * read more about it here {@link https://discordapp.com/developers/docs/topics/gateway}</info>\n * @extends EventEmitter\n */\n\nvar WebSocketManager = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(WebSocketManager, _EventEmitter);\n\n  var _super = _createSuper(WebSocketManager);\n\n  function WebSocketManager(client) {\n    var _this;\n\n    _classCallCheck(this, WebSocketManager);\n\n    _this = _super.call(this);\n    /**\n     * The client that instantiated this WebSocketManager\n     * @type {Client}\n     * @readonly\n     * @name WebSocketManager#client\n     */\n\n    Object.defineProperty(_assertThisInitialized(_this), 'client', {\n      value: client\n    });\n    /**\n     * The gateway this manager uses\n     * @type {?string}\n     */\n\n    _this.gateway = undefined;\n    /**\n     * The amount of shards this manager handles\n     * @private\n     * @type {number}\n     */\n\n    _this.totalShards = _this.client.options.shards.length;\n    /**\n     * A collection of all shards this manager handles\n     * @type {Collection<number, WebSocketShard>}\n     */\n\n    _this.shards = new Collection();\n    /**\n     * An array of shards to be connected or that need to reconnect\n     * @type {Set<WebSocketShard>}\n     * @private\n     * @name WebSocketManager#shardQueue\n     */\n\n    Object.defineProperty(_assertThisInitialized(_this), 'shardQueue', {\n      value: new Set(),\n      writable: true\n    });\n    /**\n     * An array of queued events before this WebSocketManager became ready\n     * @type {object[]}\n     * @private\n     * @name WebSocketManager#packetQueue\n     */\n\n    Object.defineProperty(_assertThisInitialized(_this), 'packetQueue', {\n      value: []\n    });\n    /**\n     * The current status of this WebSocketManager\n     * @type {number}\n     */\n\n    _this.status = Status.IDLE;\n    /**\n     * If this manager was destroyed. It will prevent shards from reconnecting\n     * @type {boolean}\n     * @private\n     */\n\n    _this.destroyed = false;\n    /**\n     * If this manager is currently reconnecting one or multiple shards\n     * @type {boolean}\n     * @private\n     */\n\n    _this.reconnecting = false;\n    /**\n     * The current session limit of the client\n     * @private\n     * @type {?Object}\n     * @prop {number} total Total number of identifies available\n     * @prop {number} remaining Number of identifies remaining\n     * @prop {number} reset_after Number of milliseconds after which the limit resets\n     */\n\n    _this.sessionStartLimit = undefined;\n    return _this;\n  }\n  /**\n   * The average ping of all WebSocketShards\n   * @type {number}\n   * @readonly\n   */\n\n\n  _createClass(WebSocketManager, [{\n    key: \"debug\",\n\n    /**\n     * Emits a debug message.\n     * @param {string} message The debug message\n     * @param {?WebSocketShard} [shard] The shard that emitted this message, if any\n     * @private\n     */\n    value: function debug(message, shard) {\n      this.client.emit(Events.DEBUG, \"[WS => \".concat(shard ? \"Shard \".concat(shard.id) : 'Manager', \"] \").concat(message));\n    }\n    /**\n     * Connects this manager to the gateway.\n     * @private\n     */\n\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var invalidToken, _yield$this$client$ap, gatewayURL, recommendedShards, sessionStartLimit, total, remaining, reset_after, shards;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                invalidToken = new DJSError(WSCodes[4004]);\n                _context.next = 3;\n                return this.client.api.gateway.bot.get()[\"catch\"](function (error) {\n                  throw error.httpStatus === 401 ? invalidToken : error;\n                });\n\n              case 3:\n                _yield$this$client$ap = _context.sent;\n                gatewayURL = _yield$this$client$ap.url;\n                recommendedShards = _yield$this$client$ap.shards;\n                sessionStartLimit = _yield$this$client$ap.session_start_limit;\n                this.sessionStartLimit = sessionStartLimit;\n                total = sessionStartLimit.total, remaining = sessionStartLimit.remaining, reset_after = sessionStartLimit.reset_after;\n                this.debug(\"Fetched Gateway Information\\n    URL: \".concat(gatewayURL, \"\\n    Recommended Shards: \").concat(recommendedShards));\n                this.debug(\"Session Limit Information\\n    Total: \".concat(total, \"\\n    Remaining: \").concat(remaining));\n                this.gateway = \"\".concat(gatewayURL, \"/\");\n                shards = this.client.options.shards;\n\n                if (shards === 'auto') {\n                  this.debug(\"Using the recommended shard count provided by Discord: \".concat(recommendedShards));\n                  this.totalShards = this.client.options.shardCount = recommendedShards;\n                  shards = this.client.options.shards = Array.from({\n                    length: recommendedShards\n                  }, function (_, i) {\n                    return i;\n                  });\n                }\n\n                this.totalShards = shards.length;\n                this.debug(\"Spawning shards: \".concat(shards.join(', ')));\n                this.shardQueue = new Set(shards.map(function (id) {\n                  return new WebSocketShard(_this2, id);\n                }));\n                _context.next = 19;\n                return this._handleSessionLimit(remaining, reset_after);\n\n              case 19:\n                return _context.abrupt(\"return\", this.createShards());\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n    /**\n     * Handles the creation of a shard.\n     * @returns {Promise<boolean>}\n     * @private\n     */\n\n  }, {\n    key: \"createShards\",\n    value: function () {\n      var _createShards = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var _this$shardQueue, shard;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.shardQueue.size) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 2:\n                _this$shardQueue = _slicedToArray(this.shardQueue, 1), shard = _this$shardQueue[0];\n                this.shardQueue[\"delete\"](shard);\n\n                if (!shard.eventsAttached) {\n                  shard.on(ShardEvents.ALL_READY, function (unavailableGuilds) {\n                    /**\n                     * Emitted when a shard turns ready.\n                     * @event Client#shardReady\n                     * @param {number} id The shard ID that turned ready\n                     * @param {?Set<string>} unavailableGuilds Set of unavailable guild IDs, if any\n                     */\n                    _this3.client.emit(Events.SHARD_READY, shard.id, unavailableGuilds);\n\n                    if (!_this3.shardQueue.size) _this3.reconnecting = false;\n\n                    _this3.checkShardsReady();\n                  });\n                  shard.on(ShardEvents.CLOSE, function (event) {\n                    if (event.code === 1000 ? _this3.destroyed : UNRECOVERABLE_CLOSE_CODES.includes(event.code)) {\n                      /**\n                       * Emitted when a shard's WebSocket disconnects and will no longer reconnect.\n                       * @event Client#shardDisconnect\n                       * @param {CloseEvent} event The WebSocket close event\n                       * @param {number} id The shard ID that disconnected\n                       */\n                      _this3.client.emit(Events.SHARD_DISCONNECT, event, shard.id);\n\n                      _this3.debug(WSCodes[event.code], shard);\n\n                      return;\n                    }\n\n                    if (UNRESUMABLE_CLOSE_CODES.includes(event.code)) {\n                      // These event codes cannot be resumed\n                      shard.sessionID = undefined;\n                    }\n                    /**\n                     * Emitted when a shard is attempting to reconnect or re-identify.\n                     * @event Client#shardReconnecting\n                     * @param {number} id The shard ID that is attempting to reconnect\n                     */\n\n\n                    _this3.client.emit(Events.SHARD_RECONNECTING, shard.id);\n\n                    _this3.shardQueue.add(shard);\n\n                    if (shard.sessionID) {\n                      _this3.debug(\"Session ID is present, attempting an immediate reconnect...\", shard);\n\n                      _this3.reconnect(true);\n                    } else {\n                      shard.destroy({\n                        reset: true,\n                        emit: false,\n                        log: false\n                      });\n\n                      _this3.reconnect();\n                    }\n                  });\n                  shard.on(ShardEvents.INVALID_SESSION, function () {\n                    _this3.client.emit(Events.SHARD_RECONNECTING, shard.id);\n                  });\n                  shard.on(ShardEvents.DESTROYED, function () {\n                    _this3.debug('Shard was destroyed but no WebSocket connection was present! Reconnecting...', shard);\n\n                    _this3.client.emit(Events.SHARD_RECONNECTING, shard.id);\n\n                    _this3.shardQueue.add(shard);\n\n                    _this3.reconnect();\n                  });\n                  shard.eventsAttached = true;\n                }\n\n                this.shards.set(shard.id, shard);\n                _context2.prev = 6;\n                _context2.next = 9;\n                return shard.connect();\n\n              case 9:\n                _context2.next = 23;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](6);\n\n                if (!(_context2.t0 && _context2.t0.code && UNRECOVERABLE_CLOSE_CODES.includes(_context2.t0.code))) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                throw new DJSError(WSCodes[_context2.t0.code]);\n\n              case 17:\n                if (!(!_context2.t0 || _context2.t0.code)) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                this.debug('Failed to connect to the gateway, requeueing...', shard);\n                this.shardQueue.add(shard);\n                _context2.next = 23;\n                break;\n\n              case 22:\n                throw _context2.t0;\n\n              case 23:\n                if (!this.shardQueue.size) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                this.debug(\"Shard Queue Size: \".concat(this.shardQueue.size, \"; continuing in 5 seconds...\"));\n                _context2.next = 27;\n                return Util.delayFor(5000);\n\n              case 27:\n                _context2.next = 29;\n                return this._handleSessionLimit();\n\n              case 29:\n                return _context2.abrupt(\"return\", this.createShards());\n\n              case 30:\n                return _context2.abrupt(\"return\", true);\n\n              case 31:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 11]]);\n      }));\n\n      function createShards() {\n        return _createShards.apply(this, arguments);\n      }\n\n      return createShards;\n    }()\n    /**\n     * Handles reconnects for this manager.\n     * @param {boolean} [skipLimit=false] IF this reconnect should skip checking the session limit\n     * @private\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: \"reconnect\",\n    value: function () {\n      var _reconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var skipLimit,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                skipLimit = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;\n\n                if (!(this.reconnecting || this.status !== Status.READY)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", false);\n\n              case 3:\n                this.reconnecting = true;\n                _context3.prev = 4;\n\n                if (skipLimit) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 8;\n                return this._handleSessionLimit();\n\n              case 8:\n                _context3.next = 10;\n                return this.createShards();\n\n              case 10:\n                _context3.next = 22;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](4);\n                this.debug(\"Couldn't reconnect or fetch information about the gateway. \".concat(_context3.t0));\n\n                if (!(_context3.t0.httpStatus !== 401)) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                this.debug(\"Possible network error occurred. Retrying in 5s...\");\n                _context3.next = 19;\n                return Util.delayFor(5000);\n\n              case 19:\n                this.reconnecting = false;\n                return _context3.abrupt(\"return\", this.reconnect());\n\n              case 21:\n                // If we get an error at this point, it means we cannot reconnect anymore\n                if (this.client.listenerCount(Events.INVALIDATED)) {\n                  /**\n                   * Emitted when the client's session becomes invalidated.\n                   * You are expected to handle closing the process gracefully and preventing a boot loop\n                   * if you are listening to this event.\n                   * @event Client#invalidated\n                   */\n                  this.client.emit(Events.INVALIDATED); // Destroy just the shards. This means you have to handle the cleanup yourself\n\n                  this.destroy();\n                } else {\n                  this.client.destroy();\n                }\n\n              case 22:\n                _context3.prev = 22;\n                this.reconnecting = false;\n                return _context3.finish(22);\n\n              case 25:\n                return _context3.abrupt(\"return\", true);\n\n              case 26:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 12, 22, 25]]);\n      }));\n\n      function reconnect() {\n        return _reconnect.apply(this, arguments);\n      }\n\n      return reconnect;\n    }()\n    /**\n     * Broadcasts a packet to every shard this manager handles.\n     * @param {Object} packet The packet to send\n     * @private\n     */\n\n  }, {\n    key: \"broadcast\",\n    value: function broadcast(packet) {\n      var _iterator = _createForOfIteratorHelper(this.shards.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var shard = _step.value;\n          shard.send(packet);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Destroys this manager and all its shards.\n     * @private\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.destroyed) return;\n      this.debug(\"Manager was destroyed. Called by:\\n\".concat(new Error('MANAGER_DESTROYED').stack));\n      this.destroyed = true;\n      this.shardQueue.clear();\n\n      var _iterator2 = _createForOfIteratorHelper(this.shards.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var shard = _step2.value;\n          shard.destroy({\n            closeCode: 1000,\n            reset: true,\n            emit: false,\n            log: false\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Handles the timeout required if we cannot identify anymore.\n     * @param {number} [remaining] The amount of remaining identify sessions that can be done today\n     * @param {number} [resetAfter] The amount of time in which the identify counter resets\n     * @private\n     */\n\n  }, {\n    key: \"_handleSessionLimit\",\n    value: function () {\n      var _handleSessionLimit2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(remaining, resetAfter) {\n        var _yield$this$client$ap2, session_start_limit;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(typeof remaining === 'undefined' && typeof resetAfter === 'undefined')) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.client.api.gateway.bot.get();\n\n              case 3:\n                _yield$this$client$ap2 = _context4.sent;\n                session_start_limit = _yield$this$client$ap2.session_start_limit;\n                this.sessionStartLimit = session_start_limit;\n                remaining = session_start_limit.remaining;\n                resetAfter = session_start_limit.reset_after;\n                this.debug(\"Session Limit Information\\n    Total: \".concat(session_start_limit.total, \"\\n    Remaining: \").concat(remaining));\n\n              case 9:\n                if (remaining) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                this.debug(\"Exceeded identify threshold. Will attempt a connection in \".concat(resetAfter, \"ms\"));\n                _context4.next = 13;\n                return Util.delayFor(resetAfter);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _handleSessionLimit(_x, _x2) {\n        return _handleSessionLimit2.apply(this, arguments);\n      }\n\n      return _handleSessionLimit;\n    }()\n    /**\n     * Processes a packet and queues it if this WebSocketManager is not ready.\n     * @param {Object} [packet] The packet to be handled\n     * @param {WebSocketShard} [shard] The shard that will handle this packet\n     * @returns {boolean}\n     * @private\n     */\n\n  }, {\n    key: \"handlePacket\",\n    value: function handlePacket(packet, shard) {\n      var _this4 = this;\n\n      if (packet && this.status !== Status.READY) {\n        if (!BeforeReadyWhitelist.includes(packet.t)) {\n          this.packetQueue.push({\n            packet: packet,\n            shard: shard\n          });\n          return false;\n        }\n      }\n\n      if (this.packetQueue.length) {\n        var item = this.packetQueue.shift();\n        this.client.setImmediate(function () {\n          _this4.handlePacket(item.packet, item.shard);\n        });\n      }\n\n      if (packet && PacketHandlers[packet.t]) {\n        PacketHandlers[packet.t](this.client, packet, shard);\n      }\n\n      return true;\n    }\n    /**\n     * Checks whether the client is ready to be marked as ready.\n     * @private\n     */\n\n  }, {\n    key: \"checkShardsReady\",\n    value: function () {\n      var _checkShardsReady = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var promises;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.status === Status.READY)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 2:\n                if (!(this.shards.size !== this.totalShards || this.shards.some(function (s) {\n                  return s.status !== Status.READY;\n                }))) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 4:\n                this.status = Status.NEARLY;\n\n                if (!this.client.options.fetchAllMembers) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                _context5.prev = 6;\n                promises = this.client.guilds.cache.map(function (guild) {\n                  if (guild.available) return guild.members.fetch(); // Return empty promise if guild is unavailable\n\n                  return Promise.resolve();\n                });\n                _context5.next = 10;\n                return Promise.all(promises);\n\n              case 10:\n                _context5.next = 15;\n                break;\n\n              case 12:\n                _context5.prev = 12;\n                _context5.t0 = _context5[\"catch\"](6);\n                this.debug(\"Failed to fetch all members before ready! \".concat(_context5.t0, \"\\n\").concat(_context5.t0.stack));\n\n              case 15:\n                this.triggerClientReady();\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[6, 12]]);\n      }));\n\n      function checkShardsReady() {\n        return _checkShardsReady.apply(this, arguments);\n      }\n\n      return checkShardsReady;\n    }()\n    /**\n     * Causes the client to be marked as ready and emits the ready event.\n     * @private\n     */\n\n  }, {\n    key: \"triggerClientReady\",\n    value: function triggerClientReady() {\n      this.status = Status.READY;\n      this.client.readyAt = new Date();\n      /**\n       * Emitted when the client becomes ready to start working.\n       * @event Client#ready\n       */\n\n      this.client.emit(Events.CLIENT_READY);\n      this.handlePacket();\n    }\n  }, {\n    key: \"ping\",\n    get: function get() {\n      var sum = this.shards.reduce(function (a, b) {\n        return a + b.ping;\n      }, 0);\n      return sum / this.shards.size;\n    }\n  }]);\n\n  return WebSocketManager;\n}(EventEmitter);\n\nmodule.exports = WebSocketManager;","map":null,"metadata":{},"sourceType":"module"}