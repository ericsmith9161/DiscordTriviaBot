{"ast":null,"code":"'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('../errors'),\n    _TypeError = _require.TypeError;\n\nvar Collection = require('../util/Collection');\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n */\n\n\nvar GuildEmojiRoleManager = /*#__PURE__*/function () {\n  function GuildEmojiRoleManager(emoji) {\n    _classCallCheck(this, GuildEmojiRoleManager);\n\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n\n    this.guild = emoji.guild;\n    /**\n     * The client belonging to this manager\n     * @type {Client}\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'client', {\n      value: emoji.client\n    });\n  }\n  /**\n   * The filtered collection of roles of the guild emoji\n   * @type {Collection<Snowflake, Role>}\n   * @private\n   * @readonly\n   */\n\n\n  _createClass(GuildEmojiRoleManager, [{\n    key: \"add\",\n\n    /**\n     * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n     * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n     * @returns {Promise<GuildEmoji>}\n     */\n    value: function add(roleOrRoles) {\n      var _this = this,\n          _roleOrRoles;\n\n      if (roleOrRoles instanceof Collection) return this.add(roleOrRoles.keyArray());\n      if (!Array.isArray(roleOrRoles)) return this.add([roleOrRoles]);\n      roleOrRoles = roleOrRoles.map(function (r) {\n        return _this.guild.roles.resolve(r);\n      });\n\n      if (roleOrRoles.includes(null)) {\n        return Promise.reject(new _TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n      }\n\n      var newRoles = _toConsumableArray(new Set((_roleOrRoles = roleOrRoles).concat.apply(_roleOrRoles, _toConsumableArray(this._roles.values()))));\n\n      return this.set(newRoles);\n    }\n    /**\n     * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n     * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n     * @returns {Promise<GuildEmoji>}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(roleOrRoles) {\n      var _this2 = this;\n\n      if (roleOrRoles instanceof Collection) return this.remove(roleOrRoles.keyArray());\n      if (!Array.isArray(roleOrRoles)) return this.remove([roleOrRoles]);\n      roleOrRoles = roleOrRoles.map(function (r) {\n        return _this2.guild.roles.resolveID(r);\n      });\n\n      if (roleOrRoles.includes(null)) {\n        return Promise.reject(new _TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n      }\n\n      var newRoles = this._roles.keyArray().filter(function (role) {\n        return !roleOrRoles.includes(role);\n      });\n\n      return this.set(newRoles);\n    }\n    /**\n     * Sets the role(s) that can use this emoji.\n     * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to apply\n     * @returns {Promise<GuildEmoji>}\n     * @example\n     * // Set the emoji's roles to a single role\n     * guildEmoji.roles.set(['391156570408615936'])\n     *   .then(console.log)\n     *   .catch(console.error);\n     * @example\n     * // Remove all roles from an emoji\n     * guildEmoji.roles.set([])\n     *    .then(console.log)\n     *    .catch(console.error);\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(roles) {\n      return this.emoji.edit({\n        roles: roles\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new this.constructor(this.emoji);\n\n      clone._patch(this._roles.keyArray().slice());\n\n      return clone;\n    }\n    /**\n     * Patches the roles for this manager's cache\n     * @param {Snowflake[]} roles The new roles\n     * @private\n     */\n\n  }, {\n    key: \"_patch\",\n    value: function _patch(roles) {\n      this.emoji._roles = roles;\n    }\n  }, {\n    key: \"_roles\",\n    get: function get() {\n      var _this3 = this;\n\n      return this.guild.roles.cache.filter(function (role) {\n        return _this3.emoji._roles.includes(role.id);\n      });\n    }\n    /**\n     * The cache of roles belonging to this emoji\n     * @type {Collection<Snowflake, Role>}\n     * @readonly\n     */\n\n  }, {\n    key: \"cache\",\n    get: function get() {\n      return this._roles;\n    }\n  }]);\n\n  return GuildEmojiRoleManager;\n}();\n\nmodule.exports = GuildEmojiRoleManager;","map":null,"metadata":{},"sourceType":"module"}