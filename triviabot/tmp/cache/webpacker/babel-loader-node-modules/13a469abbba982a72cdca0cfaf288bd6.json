{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Base = require('./Base');\n\nvar Team = require('./Team');\n\nvar _require = require('../util/Constants'),\n    ClientApplicationAssetTypes = _require.ClientApplicationAssetTypes,\n    Endpoints = _require.Endpoints;\n\nvar Snowflake = require('../util/Snowflake');\n\nvar AssetTypes = Object.keys(ClientApplicationAssetTypes);\n/**\n * Represents a Client OAuth2 Application.\n * @extends {Base}\n */\n\nvar ClientApplication = /*#__PURE__*/function (_Base) {\n  _inherits(ClientApplication, _Base);\n\n  var _super = _createSuper(ClientApplication);\n\n  function ClientApplication(client, data) {\n    var _this;\n\n    _classCallCheck(this, ClientApplication);\n\n    _this = _super.call(this, client);\n\n    _this._patch(data);\n\n    return _this;\n  }\n\n  _createClass(ClientApplication, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      /**\n       * The ID of the app\n       * @type {Snowflake}\n       */\n      this.id = data.id;\n      /**\n       * The name of the app\n       * @type {string}\n       */\n\n      this.name = data.name;\n      /**\n       * The app's description\n       * @type {string}\n       */\n\n      this.description = data.description;\n      /**\n       * The app's icon hash\n       * @type {string}\n       */\n\n      this.icon = data.icon;\n      /**\n       * The app's cover image\n       * @type {?string}\n       */\n\n      this.cover = data.cover_image || null;\n      /**\n       * The app's RPC origins, if enabled\n       * @type {string[]}\n       */\n\n      this.rpcOrigins = data.rpc_origins || [];\n      /**\n       * If this app's bot requires a code grant when using the OAuth2 flow\n       * @type {?boolean}\n       */\n\n      this.botRequireCodeGrant = typeof data.bot_require_code_grant !== 'undefined' ? data.bot_require_code_grant : null;\n      /**\n       * If this app's bot is public\n       * @type {?boolean}\n       */\n\n      this.botPublic = typeof data.bot_public !== 'undefined' ? data.bot_public : null;\n      /**\n       * The owner of this OAuth application\n       * @type {?User|Team}\n       */\n\n      this.owner = data.team ? new Team(this.client, data.team) : data.owner ? this.client.users.add(data.owner) : null;\n    }\n    /**\n     * The timestamp the app was created at\n     * @type {number}\n     * @readonly\n     */\n\n  }, {\n    key: \"iconURL\",\n\n    /**\n     * A link to the application's icon.\n     * @param {ImageURLOptions} [options={}] Options for the Image URL\n     * @returns {?string} URL to the icon\n     */\n    value: function iconURL() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          format = _ref.format,\n          size = _ref.size;\n\n      if (!this.icon) return null;\n      return this.client.rest.cdn.AppIcon(this.id, this.icon, {\n        format: format,\n        size: size\n      });\n    }\n    /**\n     * A link to this application's cover image.\n     * @param {ImageURLOptions} [options={}] Options for the Image URL\n     * @returns {?string} URL to the cover image\n     */\n\n  }, {\n    key: \"coverImage\",\n    value: function coverImage() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          format = _ref2.format,\n          size = _ref2.size;\n\n      if (!this.cover) return null;\n      return Endpoints.CDN(this.client.options.http.cdn).AppIcon(this.id, this.cover, {\n        format: format,\n        size: size\n      });\n    }\n    /**\n     * Asset data.\n     * @typedef {Object} ClientAsset\n     * @property {Snowflake} id The asset ID\n     * @property {string} name The asset name\n     * @property {string} type The asset type\n     */\n\n    /**\n     * Gets the clients rich presence assets.\n     * @returns {Promise<Array<ClientAsset>>}\n     */\n\n  }, {\n    key: \"fetchAssets\",\n    value: function fetchAssets() {\n      return this.client.api.oauth2.applications(this.id).assets.get().then(function (assets) {\n        return assets.map(function (a) {\n          return {\n            id: a.id,\n            name: a.name,\n            type: AssetTypes[a.type - 1]\n          };\n        });\n      });\n    }\n    /**\n     * When concatenated with a string, this automatically returns the application's name instead of the\n     * ClientApplication object.\n     * @returns {string}\n     * @example\n     * // Logs: Application name: My App\n     * console.log(`Application name: ${application}`);\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _get(_getPrototypeOf(ClientApplication.prototype), \"toJSON\", this).call(this, {\n        createdTimestamp: true\n      });\n    }\n  }, {\n    key: \"createdTimestamp\",\n    get: function get() {\n      return Snowflake.deconstruct(this.id).timestamp;\n    }\n    /**\n     * The time the app was created at\n     * @type {Date}\n     * @readonly\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function get() {\n      return new Date(this.createdTimestamp);\n    }\n  }]);\n\n  return ClientApplication;\n}(Base);\n\nmodule.exports = ClientApplication;","map":null,"metadata":{},"sourceType":"module"}