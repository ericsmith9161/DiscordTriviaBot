{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Channel = require('./Channel');\n\nvar TextBasedChannel = require('./interfaces/TextBasedChannel');\n\nvar MessageManager = require('../managers/MessageManager');\n/**\n * Represents a direct message channel between two users.\n * @extends {Channel}\n * @implements {TextBasedChannel}\n */\n\n\nvar DMChannel = /*#__PURE__*/function (_Channel) {\n  _inherits(DMChannel, _Channel);\n\n  var _super = _createSuper(DMChannel);\n\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the DM channel\n   */\n  function DMChannel(client, data) {\n    var _this;\n\n    _classCallCheck(this, DMChannel);\n\n    _this = _super.call(this, client, data); // Override the channel type so partials have a known type\n\n    _this.type = 'dm';\n    /**\n     * A manager of the messages belonging to this channel\n     * @type {MessageManager}\n     */\n\n    _this.messages = new MessageManager(_assertThisInitialized(_this));\n    _this._typing = new Map();\n    return _this;\n  }\n\n  _createClass(DMChannel, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      _get(_getPrototypeOf(DMChannel.prototype), \"_patch\", this).call(this, data);\n\n      if (data.recipients) {\n        /**\n         * The recipient on the other end of the DM\n         * @type {User}\n         */\n        this.recipient = this.client.users.add(data.recipients[0]);\n      }\n      /**\n       * The ID of the last message in the channel, if one was sent\n       * @type {?Snowflake}\n       */\n\n\n      this.lastMessageID = data.last_message_id;\n      /**\n       * The timestamp when the last pinned message was pinned, if there was one\n       * @type {?number}\n       */\n\n      this.lastPinTimestamp = data.last_pin_timestamp ? new Date(data.last_pin_timestamp).getTime() : null;\n    }\n    /**\n     * Whether this DMChannel is a partial\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"fetch\",\n\n    /**\n     * Fetch this DMChannel.\n     * @returns {Promise<DMChannel>}\n     */\n    value: function fetch() {\n      return this.recipient.createDM();\n    }\n    /**\n     * When concatenated with a string, this automatically returns the recipient's mention instead of the\n     * DMChannel object.\n     * @returns {string}\n     * @example\n     * // Logs: Hello from <@123456789012345678>!\n     * console.log(`Hello from ${channel}!`);\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.recipient.toString();\n    } // These are here only for documentation purposes - they are implemented by TextBasedChannel\n\n    /* eslint-disable no-empty-function */\n\n  }, {\n    key: \"send\",\n    value: function send() {}\n  }, {\n    key: \"startTyping\",\n    value: function startTyping() {}\n  }, {\n    key: \"stopTyping\",\n    value: function stopTyping() {}\n  }, {\n    key: \"createMessageCollector\",\n    value: function createMessageCollector() {}\n  }, {\n    key: \"awaitMessages\",\n    value: function awaitMessages() {} // Doesn't work on DM channels; bulkDelete() {}\n\n  }, {\n    key: \"partial\",\n    get: function get() {\n      return typeof this.lastMessageID === 'undefined';\n    }\n  }, {\n    key: \"lastMessage\",\n    get: function get() {}\n  }, {\n    key: \"lastPinAt\",\n    get: function get() {}\n  }, {\n    key: \"typing\",\n    get: function get() {}\n  }, {\n    key: \"typingCount\",\n    get: function get() {}\n  }]);\n\n  return DMChannel;\n}(Channel);\n\nTextBasedChannel.applyToClass(DMChannel, true, ['bulkDelete']);\nmodule.exports = DMChannel;","map":null,"metadata":{},"sourceType":"module"}