{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Base = require('./Base');\n\nvar _require = require('./Presence'),\n    Presence = _require.Presence;\n\nvar TextBasedChannel = require('./interfaces/TextBasedChannel');\n\nvar _require2 = require('../errors'),\n    Error = _require2.Error;\n\nvar Snowflake = require('../util/Snowflake');\n\nvar UserFlags = require('../util/UserFlags');\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\n\n\nvar User = /*#__PURE__*/function (_Base) {\n  _inherits(User, _Base);\n\n  var _super = _createSuper(User);\n\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the user\n   */\n  function User(client, data) {\n    var _this;\n\n    _classCallCheck(this, User);\n\n    _this = _super.call(this, client);\n    /**\n     * The ID of the user\n     * @type {Snowflake}\n     */\n\n    _this.id = data.id;\n    /**\n     * Whether or not the user is a bot\n     * @type {boolean}\n     * @name User#bot\n     */\n\n    _this.bot = Boolean(data.bot);\n\n    _this._patch(data);\n\n    return _this;\n  }\n\n  _createClass(User, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      /**\n       * The username of the user\n       * @type {?string}\n       * @name User#username\n       */\n      if (data.username) this.username = data.username;\n      /**\n       * A discriminator based on username for the user\n       * @type {?string}\n       * @name User#discriminator\n       */\n\n      if (data.discriminator) this.discriminator = data.discriminator;\n      /**\n       * The ID of the user's avatar\n       * @type {?string}\n       * @name User#avatar\n       */\n\n      if (typeof data.avatar !== 'undefined') this.avatar = data.avatar;\n      if (typeof data.bot !== 'undefined') this.bot = Boolean(data.bot);\n      /**\n       * Whether the user is an Official Discord System user (part of the urgent message system)\n       * @type {?boolean}\n       * @name User#system\n       */\n\n      if (typeof data.system !== 'undefined') this.system = Boolean(data.system);\n      /**\n       * The locale of the user's client (ISO 639-1)\n       * @type {?string}\n       * @name User#locale\n       */\n\n      if (data.locale) this.locale = data.locale;\n      /**\n       * The flags for this user\n       * @type {?UserFlags}\n       */\n\n      if (typeof data.public_flags !== 'undefined') this.flags = new UserFlags(data.public_flags);\n      /**\n       * The ID of the last message sent by the user, if one was sent\n       * @type {?Snowflake}\n       */\n\n      this.lastMessageID = null;\n      /**\n       * The ID of the channel for the last message sent by the user, if one was sent\n       * @type {?Snowflake}\n       */\n\n      this.lastMessageChannelID = null;\n    }\n    /**\n     * Whether this User is a partial\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"avatarURL\",\n\n    /**\n     * A link to the user's avatar.\n     * @param {ImageURLOptions} [options={}] Options for the Image URL\n     * @returns {?string}\n     */\n    value: function avatarURL() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          format = _ref.format,\n          size = _ref.size,\n          dynamic = _ref.dynamic;\n\n      if (!this.avatar) return null;\n      return this.client.rest.cdn.Avatar(this.id, this.avatar, format, size, dynamic);\n    }\n    /**\n     * A link to the user's default avatar\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: \"displayAvatarURL\",\n\n    /**\n     * A link to the user's avatar if they have one.\n     * Otherwise a link to their default avatar will be returned.\n     * @param {ImageURLOptions} [options={}] Options for the Image URL\n     * @returns {string}\n     */\n    value: function displayAvatarURL(options) {\n      return this.avatarURL(options) || this.defaultAvatarURL;\n    }\n    /**\n     * The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user\n     * @type {?string}\n     * @readonly\n     */\n\n  }, {\n    key: \"typingIn\",\n\n    /**\n     * Checks whether the user is typing in a channel.\n     * @param {ChannelResolvable} channel The channel to check in\n     * @returns {boolean}\n     */\n    value: function typingIn(channel) {\n      channel = this.client.channels.resolve(channel);\n      return channel._typing.has(this.id);\n    }\n    /**\n     * Gets the time that the user started typing.\n     * @param {ChannelResolvable} channel The channel to get the time in\n     * @returns {?Date}\n     */\n\n  }, {\n    key: \"typingSinceIn\",\n    value: function typingSinceIn(channel) {\n      channel = this.client.channels.resolve(channel);\n      return channel._typing.has(this.id) ? new Date(channel._typing.get(this.id).since) : null;\n    }\n    /**\n     * Gets the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.\n     * @param {ChannelResolvable} channel The channel to get the time in\n     * @returns {number}\n     */\n\n  }, {\n    key: \"typingDurationIn\",\n    value: function typingDurationIn(channel) {\n      channel = this.client.channels.resolve(channel);\n      return channel._typing.has(this.id) ? channel._typing.get(this.id).elapsedTime : -1;\n    }\n    /**\n     * The DM between the client's user and this user\n     * @type {?DMChannel}\n     * @readonly\n     */\n\n  }, {\n    key: \"createDM\",\n\n    /**\n     * Creates a DM channel between the client and the user.\n     * @returns {Promise<DMChannel>}\n     */\n    value: function () {\n      var _createDM = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var dmChannel, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dmChannel = this.dmChannel;\n\n                if (!(dmChannel && !dmChannel.partial)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", dmChannel);\n\n              case 3:\n                _context.next = 5;\n                return this.client.api.users(this.client.user.id).channels.post({\n                  data: {\n                    recipient_id: this.id\n                  }\n                });\n\n              case 5:\n                data = _context.sent;\n                return _context.abrupt(\"return\", this.client.actions.ChannelCreate.handle(data).channel);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createDM() {\n        return _createDM.apply(this, arguments);\n      }\n\n      return createDM;\n    }()\n    /**\n     * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n     * @returns {Promise<DMChannel>}\n     */\n\n  }, {\n    key: \"deleteDM\",\n    value: function () {\n      var _deleteDM = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var dmChannel, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dmChannel = this.dmChannel;\n\n                if (dmChannel) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new Error('USER_NO_DMCHANNEL');\n\n              case 3:\n                _context2.next = 5;\n                return this.client.api.channels(dmChannel.id)[\"delete\"]();\n\n              case 5:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", this.client.actions.ChannelDelete.handle(data).channel);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function deleteDM() {\n        return _deleteDM.apply(this, arguments);\n      }\n\n      return deleteDM;\n    }()\n    /**\n     * Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\n     * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n     * @param {User} user User to compare with\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(user) {\n      var equal = user && this.id === user.id && this.username === user.username && this.discriminator === user.discriminator && this.avatar === user.avatar;\n      return equal;\n    }\n    /**\n     * Fetches this user's flags.\n     * @returns {Promise<UserFlags>}\n     */\n\n  }, {\n    key: \"fetchFlags\",\n    value: function () {\n      var _fetchFlags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.flags) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.flags);\n\n              case 2:\n                _context3.next = 4;\n                return this.client.api.users(this.id).get();\n\n              case 4:\n                data = _context3.sent;\n\n                this._patch(data);\n\n                return _context3.abrupt(\"return\", this.flags);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetchFlags() {\n        return _fetchFlags.apply(this, arguments);\n      }\n\n      return fetchFlags;\n    }()\n    /**\n     * Fetches this user.\n     * @returns {Promise<User>}\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function fetch() {\n      return this.client.users.fetch(this.id, true);\n    }\n    /**\n     * When concatenated with a string, this automatically returns the user's mention instead of the User object.\n     * @returns {string}\n     * @example\n     * // Logs: Hello from <@123456789012345678>!\n     * console.log(`Hello from ${user}!`);\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"<@\".concat(this.id, \">\");\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _get2;\n\n      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n        props[_key] = arguments[_key];\n      }\n\n      var json = (_get2 = _get(_getPrototypeOf(User.prototype), \"toJSON\", this)).call.apply(_get2, [this, {\n        createdTimestamp: true,\n        defaultAvatarURL: true,\n        tag: true,\n        lastMessage: false,\n        lastMessageID: false\n      }].concat(props));\n\n      json.avatarURL = this.avatarURL();\n      json.displayAvatarURL = this.displayAvatarURL();\n      return json;\n    } // These are here only for documentation purposes - they are implemented by TextBasedChannel\n\n    /* eslint-disable no-empty-function */\n\n  }, {\n    key: \"send\",\n    value: function send() {}\n  }, {\n    key: \"partial\",\n    get: function get() {\n      return typeof this.username !== 'string';\n    }\n    /**\n     * The timestamp the user was created at\n     * @type {number}\n     * @readonly\n     */\n\n  }, {\n    key: \"createdTimestamp\",\n    get: function get() {\n      return Snowflake.deconstruct(this.id).timestamp;\n    }\n    /**\n     * The time the user was created at\n     * @type {Date}\n     * @readonly\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function get() {\n      return new Date(this.createdTimestamp);\n    }\n    /**\n     * The Message object of the last message sent by the user, if one was sent\n     * @type {?Message}\n     * @readonly\n     */\n\n  }, {\n    key: \"lastMessage\",\n    get: function get() {\n      var channel = this.client.channels.cache.get(this.lastMessageChannelID);\n      return channel && channel.messages.cache.get(this.lastMessageID) || null;\n    }\n    /**\n     * The presence of this user\n     * @type {Presence}\n     * @readonly\n     */\n\n  }, {\n    key: \"presence\",\n    get: function get() {\n      var _iterator = _createForOfIteratorHelper(this.client.guilds.cache.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var guild = _step.value;\n          if (guild.presences.cache.has(this.id)) return guild.presences.cache.get(this.id);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return new Presence(this.client, {\n        user: {\n          id: this.id\n        }\n      });\n    }\n  }, {\n    key: \"defaultAvatarURL\",\n    get: function get() {\n      return this.client.rest.cdn.DefaultAvatar(this.discriminator % 5);\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return typeof this.username === 'string' ? \"\".concat(this.username, \"#\").concat(this.discriminator) : null;\n    }\n  }, {\n    key: \"dmChannel\",\n    get: function get() {\n      var _this2 = this;\n\n      return this.client.channels.cache.find(function (c) {\n        return c.type === 'dm' && c.recipient.id === _this2.id;\n      }) || null;\n    }\n  }]);\n\n  return User;\n}(Base);\n\nTextBasedChannel.applyToClass(User);\nmodule.exports = User;","map":null,"metadata":{},"sourceType":"module"}