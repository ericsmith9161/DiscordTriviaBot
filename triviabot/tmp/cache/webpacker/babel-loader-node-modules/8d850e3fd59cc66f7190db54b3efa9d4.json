{"ast":null,"code":"'use strict';\n/**\n * An extendable structure:\n * * **`GuildEmoji`**\n * * **`DMChannel`**\n * * **`TextChannel`**\n * * **`VoiceChannel`**\n * * **`CategoryChannel`**\n * * **`NewsChannel`**\n * * **`StoreChannel`**\n * * **`GuildMember`**\n * * **`Guild`**\n * * **`Message`**\n * * **`MessageReaction`**\n * * **`Presence`**\n * * **`ClientPresence`**\n * * **`VoiceState`**\n * * **`Role`**\n * * **`User`**\n * @typedef {string} ExtendableStructure\n */\n\n/**\n * Allows for the extension of built-in Discord.js structures that are instantiated by {@link BaseManager Managers}.\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Structures = /*#__PURE__*/function () {\n  function Structures() {\n    _classCallCheck(this, Structures);\n\n    throw new Error(\"The \".concat(this.constructor.name, \" class may not be instantiated.\"));\n  }\n  /**\n   * Retrieves a structure class.\n   * @param {string} structure Name of the structure to retrieve\n   * @returns {Function}\n   */\n\n\n  _createClass(Structures, null, [{\n    key: \"get\",\n    value: function get(structure) {\n      if (typeof structure === 'string') return structures[structure];\n      throw new TypeError(\"\\\"structure\\\" argument must be a string (received \".concat(_typeof(structure), \")\"));\n    }\n    /**\n     * Extends a structure.\n     * <warn> Make sure to extend all structures before instantiating your client.\n     * Extending after doing so may not work as expected. </warn>\n     * @param {ExtendableStructure} structure Name of the structure class to extend\n     * @param {Function} extender Function that takes the base class to extend as its only parameter and returns the\n     * extended class/prototype\n     * @returns {Function} Extended class/prototype returned from the extender\n     * @example\n     * const { Structures } = require('discord.js');\n     *\n     * Structures.extend('Guild', Guild => {\n     *   class CoolGuild extends Guild {\n     *     constructor(client, data) {\n     *       super(client, data);\n     *       this.cool = true;\n     *     }\n     *   }\n     *\n     *   return CoolGuild;\n     * });\n     */\n\n  }, {\n    key: \"extend\",\n    value: function extend(structure, extender) {\n      if (!structures[structure]) throw new RangeError(\"\\\"\".concat(structure, \"\\\" is not a valid extensible structure.\"));\n\n      if (typeof extender !== 'function') {\n        var received = \"(received \".concat(_typeof(extender), \")\");\n        throw new TypeError(\"\\\"extender\\\" argument must be a function that returns the extended structure class/prototype \".concat(received, \".\"));\n      }\n\n      var extended = extender(structures[structure]);\n\n      if (typeof extended !== 'function') {\n        var _received = \"(received \".concat(_typeof(extended), \")\");\n\n        throw new TypeError(\"The extender function must return the extended structure class/prototype \".concat(_received, \".\"));\n      }\n\n      if (!(extended.prototype instanceof structures[structure])) {\n        var prototype = Object.getPrototypeOf(extended);\n\n        var _received2 = \"\".concat(extended.name || 'unnamed').concat(prototype.name ? \" extends \".concat(prototype.name) : '');\n\n        throw new Error('The class/prototype returned from the extender function must extend the existing structure class/prototype' + \" (received function \".concat(_received2, \"; expected extension of \").concat(structures[structure].name, \").\"));\n      }\n\n      structures[structure] = extended;\n      return extended;\n    }\n  }]);\n\n  return Structures;\n}();\n\nvar structures = {\n  GuildEmoji: require('../structures/GuildEmoji'),\n  DMChannel: require('../structures/DMChannel'),\n  TextChannel: require('../structures/TextChannel'),\n  VoiceChannel: require('../structures/VoiceChannel'),\n  CategoryChannel: require('../structures/CategoryChannel'),\n  NewsChannel: require('../structures/NewsChannel'),\n  StoreChannel: require('../structures/StoreChannel'),\n  GuildMember: require('../structures/GuildMember'),\n  Guild: require('../structures/Guild'),\n  Message: require('../structures/Message'),\n  MessageReaction: require('../structures/MessageReaction'),\n  Presence: require('../structures/Presence').Presence,\n  ClientPresence: require('../structures/ClientPresence'),\n  VoiceState: require('../structures/VoiceState'),\n  Role: require('../structures/Role'),\n  User: require('../structures/User')\n};\nmodule.exports = Structures;","map":null,"metadata":{},"sourceType":"module"}