{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Collector = require('./interfaces/Collector');\n\nvar _require = require('../util/Constants'),\n    Events = _require.Events;\n/**\n * @typedef {CollectorOptions} MessageCollectorOptions\n * @property {number} max The maximum amount of messages to collect\n * @property {number} maxProcessed The maximum amount of messages to process\n */\n\n/**\n * Collects messages on a channel.\n * Will automatically stop if the channel (`'channelDelete'`) or guild (`'guildDelete'`) are deleted.\n * @extends {Collector}\n */\n\n\nvar MessageCollector = /*#__PURE__*/function (_Collector) {\n  _inherits(MessageCollector, _Collector);\n\n  var _super = _createSuper(MessageCollector);\n\n  /**\n   * @param {TextChannel|DMChannel} channel The channel\n   * @param {CollectorFilter} filter The filter to be applied to this collector\n   * @param {MessageCollectorOptions} options The options to be applied to this collector\n   * @emits MessageCollector#message\n   */\n  function MessageCollector(channel, filter) {\n    var _this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, MessageCollector);\n\n    _this = _super.call(this, channel.client, filter, options);\n    /**\n     * The channel\n     * @type {TextBasedChannel}\n     */\n\n    _this.channel = channel;\n    /**\n     * Total number of messages that were received in the channel during message collection\n     * @type {number}\n     */\n\n    _this.received = 0;\n\n    var bulkDeleteListener = function bulkDeleteListener(messages) {\n      var _iterator = _createForOfIteratorHelper(messages.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var message = _step.value;\n\n          _this.handleDispose(message);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n\n    _this._handleChannelDeletion = _this._handleChannelDeletion.bind(_assertThisInitialized(_this));\n    _this._handleGuildDeletion = _this._handleGuildDeletion.bind(_assertThisInitialized(_this));\n    if (_this.client.getMaxListeners() !== 0) _this.client.setMaxListeners(_this.client.getMaxListeners() + 1);\n\n    _this.client.on(Events.MESSAGE_CREATE, _this.handleCollect);\n\n    _this.client.on(Events.MESSAGE_DELETE, _this.handleDispose);\n\n    _this.client.on(Events.MESSAGE_BULK_DELETE, bulkDeleteListener);\n\n    _this.client.on(Events.CHANNEL_DELETE, _this._handleChannelDeletion);\n\n    _this.client.on(Events.GUILD_DELETE, _this._handleGuildDeletion);\n\n    _this.once('end', function () {\n      _this.client.removeListener(Events.MESSAGE_CREATE, _this.handleCollect);\n\n      _this.client.removeListener(Events.MESSAGE_DELETE, _this.handleDispose);\n\n      _this.client.removeListener(Events.MESSAGE_BULK_DELETE, bulkDeleteListener);\n\n      _this.client.removeListener(Events.CHANNEL_DELETE, _this._handleChannelDeletion);\n\n      _this.client.removeListener(Events.GUILD_DELETE, _this._handleGuildDeletion);\n\n      if (_this.client.getMaxListeners() !== 0) _this.client.setMaxListeners(_this.client.getMaxListeners() - 1);\n    });\n\n    return _this;\n  }\n  /**\n   * Handles a message for possible collection.\n   * @param {Message} message The message that could be collected\n   * @returns {?Snowflake}\n   * @private\n   */\n\n\n  _createClass(MessageCollector, [{\n    key: \"collect\",\n    value: function collect(message) {\n      /**\n       * Emitted whenever a message is collected.\n       * @event MessageCollector#collect\n       * @param {Message} message The message that was collected\n       */\n      if (message.channel.id !== this.channel.id) return null;\n      this.received++;\n      return message.id;\n    }\n    /**\n     * Handles a message for possible disposal.\n     * @param {Message} message The message that could be disposed of\n     * @returns {?Snowflake}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose(message) {\n      /**\n       * Emitted whenever a message is disposed of.\n       * @event MessageCollector#dispose\n       * @param {Message} message The message that was disposed of\n       */\n      return message.channel.id === this.channel.id ? message.id : null;\n    }\n    /**\n     * Checks after un/collection to see if the collector is done.\n     * @returns {?string}\n     * @private\n     */\n\n  }, {\n    key: \"endReason\",\n    value: function endReason() {\n      if (this.options.max && this.collected.size >= this.options.max) return 'limit';\n      if (this.options.maxProcessed && this.received === this.options.maxProcessed) return 'processedLimit';\n      return null;\n    }\n    /**\n     * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n     * @private\n     * @param {GuildChannel} channel The channel that was deleted\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_handleChannelDeletion\",\n    value: function _handleChannelDeletion(channel) {\n      if (channel.id === this.channel.id) {\n        this.stop('channelDelete');\n      }\n    }\n    /**\n     * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n     * @private\n     * @param {Guild} guild The guild that was deleted\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_handleGuildDeletion\",\n    value: function _handleGuildDeletion(guild) {\n      if (this.channel.guild && guild.id === this.channel.guild.id) {\n        this.stop('guildDelete');\n      }\n    }\n  }]);\n\n  return MessageCollector;\n}(Collector);\n\nmodule.exports = MessageCollector;","map":null,"metadata":{},"sourceType":"module"}