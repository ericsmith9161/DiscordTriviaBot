{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar DataResolver = require('../util/DataResolver');\n\nvar Structures = require('../util/Structures');\n/**\n * Represents the logged in client's Discord user.\n * @extends {User}\n */\n\n\nvar ClientUser = /*#__PURE__*/function (_Structures$get) {\n  _inherits(ClientUser, _Structures$get);\n\n  var _super = _createSuper(ClientUser);\n\n  function ClientUser(client, data) {\n    var _this;\n\n    _classCallCheck(this, ClientUser);\n\n    _this = _super.call(this, client, data);\n    _this._typing = new Map();\n    return _this;\n  }\n\n  _createClass(ClientUser, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      _get(_getPrototypeOf(ClientUser.prototype), \"_patch\", this).call(this, data);\n\n      if ('verified' in data) {\n        /**\n         * Whether or not this account has been verified\n         * @type {boolean}\n         */\n        this.verified = data.verified;\n      }\n\n      if ('mfa_enabled' in data) {\n        /**\n         * If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account\n         * @type {?boolean}\n         */\n        this.mfaEnabled = typeof data.mfa_enabled === 'boolean' ? data.mfa_enabled : null;\n      } else if (typeof this.mfaEnabled === 'undefined') {\n        this.mfaEnabled = null;\n      }\n\n      if (data.token) this.client.token = data.token;\n    }\n    /**\n     * ClientUser's presence\n     * @type {Presence}\n     * @readonly\n     */\n\n  }, {\n    key: \"edit\",\n    value: function edit(data) {\n      var _this2 = this;\n\n      return this.client.api.users('@me').patch({\n        data: data\n      }).then(function (newData) {\n        _this2.client.token = newData.token;\n\n        var _this2$client$actions = _this2.client.actions.UserUpdate.handle(newData),\n            updated = _this2$client$actions.updated;\n\n        if (updated) return updated;\n        return _this2;\n      });\n    }\n    /**\n     * Sets the username of the logged in client.\n     * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests\n     * every hour. Use this sparingly!</info>\n     * @param {string} username The new username\n     * @returns {Promise<ClientUser>}\n     * @example\n     * // Set username\n     * client.user.setUsername('discordjs')\n     *   .then(user => console.log(`My new username is ${user.username}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setUsername\",\n    value: function setUsername(username) {\n      return this.edit({\n        username: username\n      });\n    }\n    /**\n     * Sets the avatar of the logged in client.\n     * @param {BufferResolvable|Base64Resolvable} avatar The new avatar\n     * @returns {Promise<ClientUser>}\n     * @example\n     * // Set avatar\n     * client.user.setAvatar('./avatar.png')\n     *   .then(user => console.log(`New avatar set!`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setAvatar\",\n    value: function () {\n      var _setAvatar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(avatar) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = this;\n                _context.next = 3;\n                return DataResolver.resolveImage(avatar);\n\n              case 3:\n                _context.t1 = _context.sent;\n                _context.t2 = {\n                  avatar: _context.t1\n                };\n                return _context.abrupt(\"return\", _context.t0.edit.call(_context.t0, _context.t2));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setAvatar(_x) {\n        return _setAvatar.apply(this, arguments);\n      }\n\n      return setAvatar;\n    }()\n    /**\n     * Data resembling a raw Discord presence.\n     * @typedef {Object} PresenceData\n     * @property {PresenceStatusData} [status] Status of the user\n     * @property {boolean} [afk] Whether the user is AFK\n     * @property {Object} [activity] Activity the user is playing\n     * @property {Object|string} [activity.application] An application object or application id\n     * @property {string} [activity.application.id] The id of the application\n     * @property {string} [activity.name] Name of the activity\n     * @property {ActivityType|number} [activity.type] Type of the activity\n     * @property {string} [activity.url] Stream url\n     * @property {?number|number[]} [shardID] Shard Id(s) to have the activity set on\n     */\n\n    /**\n     * Sets the full presence of the client user.\n     * @param {PresenceData} data Data for the presence\n     * @returns {Promise<Presence>}\n     * @example\n     * // Set the client user's presence\n     * client.user.setPresence({ activity: { name: 'with discord.js' }, status: 'idle' })\n     *   .then(console.log)\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setPresence\",\n    value: function setPresence(data) {\n      return this.client.presence.set(data);\n    }\n    /**\n     * A user's status. Must be one of:\n     * * `online`\n     * * `idle`\n     * * `invisible`\n     * * `dnd` (do not disturb)\n     * @typedef {string} PresenceStatusData\n     */\n\n    /**\n     * Sets the status of the client user.\n     * @param {PresenceStatusData} status Status to change to\n     * @param {?number|number[]} [shardID] Shard ID(s) to have the activity set on\n     * @returns {Promise<Presence>}\n     * @example\n     * // Set the client user's status\n     * client.user.setStatus('idle')\n     *   .then(console.log)\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setStatus\",\n    value: function setStatus(status, shardID) {\n      return this.setPresence({\n        status: status,\n        shardID: shardID\n      });\n    }\n    /**\n     * Options for setting an activity\n     * @typedef ActivityOptions\n     * @type {Object}\n     * @property {string} [url] Twitch stream URL\n     * @property {ActivityType|number} [type] Type of the activity\n     * @property {?number|number[]} [shardID] Shard Id(s) to have the activity set on\n     */\n\n    /**\n     * Sets the activity the client user is playing.\n     * @param {string|ActivityOptions} [name] Activity being played, or options for setting the activity\n     * @param {ActivityOptions} [options] Options for setting the activity\n     * @returns {Promise<Presence>}\n     * @example\n     * // Set the client user's activity\n     * client.user.setActivity('discord.js', { type: 'WATCHING' })\n     *   .then(presence => console.log(`Activity set to ${presence.activities[0].name}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setActivity\",\n    value: function setActivity(name) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!name) return this.setPresence({\n        activity: null,\n        shardID: options.shardID\n      });\n      var activity = Object.assign({}, options, _typeof(name) === 'object' ? name : {\n        name: name\n      });\n      return this.setPresence({\n        activity: activity,\n        shardID: activity.shardID\n      });\n    }\n    /**\n     * Sets/removes the AFK flag for the client user.\n     * @param {boolean} afk Whether or not the user is AFK\n     * @returns {Promise<Presence>}\n     */\n\n  }, {\n    key: \"setAFK\",\n    value: function setAFK(afk) {\n      return this.setPresence({\n        afk: afk\n      });\n    }\n  }, {\n    key: \"presence\",\n    get: function get() {\n      return this.client.presence;\n    }\n  }]);\n\n  return ClientUser;\n}(Structures.get('User'));\n\nmodule.exports = ClientUser;","map":null,"metadata":{},"sourceType":"module"}