{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar BaseClient = require('./BaseClient');\n\nvar ActionsManager = require('./actions/ActionsManager');\n\nvar ClientVoiceManager = require('./voice/ClientVoiceManager');\n\nvar WebSocketManager = require('./websocket/WebSocketManager');\n\nvar _require = require('../errors'),\n    Error = _require.Error,\n    _TypeError = _require.TypeError,\n    RangeError = _require.RangeError;\n\nvar ChannelManager = require('../managers/ChannelManager');\n\nvar GuildEmojiManager = require('../managers/GuildEmojiManager');\n\nvar GuildManager = require('../managers/GuildManager');\n\nvar UserManager = require('../managers/UserManager');\n\nvar ShardClientUtil = require('../sharding/ShardClientUtil');\n\nvar ClientApplication = require('../structures/ClientApplication');\n\nvar GuildPreview = require('../structures/GuildPreview');\n\nvar Invite = require('../structures/Invite');\n\nvar VoiceRegion = require('../structures/VoiceRegion');\n\nvar Webhook = require('../structures/Webhook');\n\nvar Collection = require('../util/Collection');\n\nvar _require2 = require('../util/Constants'),\n    Events = _require2.Events,\n    browser = _require2.browser,\n    DefaultOptions = _require2.DefaultOptions;\n\nvar DataResolver = require('../util/DataResolver');\n\nvar Intents = require('../util/Intents');\n\nvar Permissions = require('../util/Permissions');\n\nvar Structures = require('../util/Structures');\n/**\n * The main hub for interacting with the Discord API, and the starting point for any bot.\n * @extends {BaseClient}\n */\n\n\nvar Client = /*#__PURE__*/function (_BaseClient) {\n  _inherits(Client, _BaseClient);\n\n  var _super = _createSuper(Client);\n\n  /**\n   * @param {ClientOptions} [options] Options for the client\n   */\n  function Client() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Client);\n\n    _this = _super.call(this, Object.assign({\n      _tokenType: 'Bot'\n    }, options)); // Obtain shard details from environment or if present, worker threads\n\n    var data = process.env;\n\n    try {\n      // Test if worker threads module is present and used\n      data = require('worker_threads').workerData || data;\n    } catch (_unused) {// Do nothing\n    }\n\n    if (_this.options.shards === DefaultOptions.shards) {\n      if ('SHARDS' in data) {\n        _this.options.shards = JSON.parse(data.SHARDS);\n      }\n    }\n\n    if (_this.options.shardCount === DefaultOptions.shardCount) {\n      if ('SHARD_COUNT' in data) {\n        _this.options.shardCount = Number(data.SHARD_COUNT);\n      } else if (Array.isArray(_this.options.shards)) {\n        _this.options.shardCount = _this.options.shards.length;\n      }\n    }\n\n    var typeofShards = _typeof(_this.options.shards);\n\n    if (typeofShards === 'undefined' && typeof _this.options.shardCount === 'number') {\n      _this.options.shards = Array.from({\n        length: _this.options.shardCount\n      }, function (_, i) {\n        return i;\n      });\n    }\n\n    if (typeofShards === 'number') _this.options.shards = [_this.options.shards];\n\n    if (Array.isArray(_this.options.shards)) {\n      _this.options.shards = _toConsumableArray(new Set(_this.options.shards.filter(function (item) {\n        return !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0);\n      })));\n    }\n\n    _this._validateOptions();\n    /**\n     * The WebSocket manager of the client\n     * @type {WebSocketManager}\n     */\n\n\n    _this.ws = new WebSocketManager(_assertThisInitialized(_this));\n    /**\n     * The action manager of the client\n     * @type {ActionsManager}\n     * @private\n     */\n\n    _this.actions = new ActionsManager(_assertThisInitialized(_this));\n    /**\n     * The voice manager of the client (`null` in browsers)\n     * @type {?ClientVoiceManager}\n     */\n\n    _this.voice = !browser ? new ClientVoiceManager(_assertThisInitialized(_this)) : null;\n    /**\n     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})\n     * @type {?ShardClientUtil}\n     */\n\n    _this.shard = !browser && process.env.SHARDING_MANAGER ? ShardClientUtil.singleton(_assertThisInitialized(_this), process.env.SHARDING_MANAGER_MODE) : null;\n    /**\n     * All of the {@link User} objects that have been cached at any point, mapped by their IDs\n     * @type {UserManager}\n     */\n\n    _this.users = new UserManager(_assertThisInitialized(_this));\n    /**\n     * All of the guilds the client is currently handling, mapped by their IDs -\n     * as long as sharding isn't being used, this will be *every* guild the bot is a member of\n     * @type {GuildManager}\n     */\n\n    _this.guilds = new GuildManager(_assertThisInitialized(_this));\n    /**\n     * All of the {@link Channel}s that the client is currently handling, mapped by their IDs -\n     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot\n     * is a member of. Note that DM channels will not be initially cached, and thus not be present\n     * in the Manager without their explicit fetching or use.\n     * @type {ChannelManager}\n     */\n\n    _this.channels = new ChannelManager(_assertThisInitialized(_this));\n    var ClientPresence = Structures.get('ClientPresence');\n    /**\n     * The presence of the Client\n     * @private\n     * @type {ClientPresence}\n     */\n\n    _this.presence = new ClientPresence(_assertThisInitialized(_this));\n    Object.defineProperty(_assertThisInitialized(_this), 'token', {\n      writable: true\n    });\n\n    if (!browser && !_this.token && 'DISCORD_TOKEN' in process.env) {\n      /**\n       * Authorization token for the logged in bot\n       * <warn>This should be kept private at all times.</warn>\n       * @type {?string}\n       */\n      _this.token = process.env.DISCORD_TOKEN;\n    } else {\n      _this.token = null;\n    }\n    /**\n     * User that the client is logged in as\n     * @type {?ClientUser}\n     */\n\n\n    _this.user = null;\n    /**\n     * Time at which the client was last regarded as being in the `READY` state\n     * (each time the client disconnects and successfully reconnects, this will be overwritten)\n     * @type {?Date}\n     */\n\n    _this.readyAt = null;\n\n    if (_this.options.messageSweepInterval > 0) {\n      _this.setInterval(_this.sweepMessages.bind(_assertThisInitialized(_this)), _this.options.messageSweepInterval * 1000);\n    }\n\n    return _this;\n  }\n  /**\n   * All custom emojis that the client has access to, mapped by their IDs\n   * @type {GuildEmojiManager}\n   * @readonly\n   */\n\n\n  _createClass(Client, [{\n    key: \"login\",\n\n    /**\n     * Logs the client in, establishing a websocket connection to Discord.\n     * @param {string} token Token of the account to log in with\n     * @returns {Promise<string>} Token of the account used\n     * @example\n     * client.login('my token');\n     */\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var token,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                token = _args.length > 0 && _args[0] !== undefined ? _args[0] : this.token;\n\n                if (!(!token || typeof token !== 'string')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('TOKEN_INVALID');\n\n              case 3:\n                this.token = token = token.replace(/^(Bot|Bearer)\\s*/i, '');\n                this.emit(Events.DEBUG, \"Provided token: \".concat(token.split('.').map(function (val, i) {\n                  return i > 1 ? val.replace(/./g, '*') : val;\n                }).join('.')));\n\n                if (!this.options.presence) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 8;\n                return this.presence._parse(this.options.presence);\n\n              case 8:\n                this.options.ws.presence = _context.sent;\n\n              case 9:\n                this.emit(Events.DEBUG, 'Preparing to connect to the gateway...');\n                _context.prev = 10;\n                _context.next = 13;\n                return this.ws.connect();\n\n              case 13:\n                return _context.abrupt(\"return\", this.token);\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](10);\n                this.destroy();\n                throw _context.t0;\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[10, 16]]);\n      }));\n\n      function login() {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Logs out, terminates the connection to Discord, and destroys the client.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(Client.prototype), \"destroy\", this).call(this);\n\n      this.ws.destroy();\n      this.token = null;\n    }\n    /**\n     * Obtains an invite from Discord.\n     * @param {InviteResolvable} invite Invite code or URL\n     * @returns {Promise<Invite>}\n     * @example\n     * client.fetchInvite('https://discord.gg/bRCvFy9')\n     *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"fetchInvite\",\n    value: function fetchInvite(invite) {\n      var _this2 = this;\n\n      var code = DataResolver.resolveInviteCode(invite);\n      return this.api.invites(code).get({\n        query: {\n          with_counts: true\n        }\n      }).then(function (data) {\n        return new Invite(_this2, data);\n      });\n    }\n    /**\n     * Obtains a webhook from Discord.\n     * @param {Snowflake} id ID of the webhook\n     * @param {string} [token] Token for the webhook\n     * @returns {Promise<Webhook>}\n     * @example\n     * client.fetchWebhook('id', 'token')\n     *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"fetchWebhook\",\n    value: function fetchWebhook(id, token) {\n      var _this3 = this;\n\n      return this.api.webhooks(id, token).get().then(function (data) {\n        return new Webhook(_this3, data);\n      });\n    }\n    /**\n     * Obtains the available voice regions from Discord.\n     * @returns {Promise<Collection<string, VoiceRegion>>}\n     * @example\n     * client.fetchVoiceRegions()\n     *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"fetchVoiceRegions\",\n    value: function fetchVoiceRegions() {\n      return this.api.voice.regions.get().then(function (res) {\n        var regions = new Collection();\n\n        var _iterator = _createForOfIteratorHelper(res),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var region = _step.value;\n            regions.set(region.id, new VoiceRegion(region));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return regions;\n      });\n    }\n    /**\n     * Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\n     * If the message has been edited, the time of the edit is used rather than the time of the original message.\n     * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)\n     * will be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}\n     * @returns {number} Amount of messages that were removed from the caches,\n     * or -1 if the message cache lifetime is unlimited\n     * @example\n     * // Remove all messages older than 1800 seconds from the messages cache\n     * const amount = client.sweepMessages(1800);\n     * console.log(`Successfully removed ${amount} messages from the cache.`);\n     */\n\n  }, {\n    key: \"sweepMessages\",\n    value: function sweepMessages() {\n      var lifetime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.messageCacheLifetime;\n\n      if (typeof lifetime !== 'number' || isNaN(lifetime)) {\n        throw new _TypeError('INVALID_TYPE', 'lifetime', 'number');\n      }\n\n      if (lifetime <= 0) {\n        this.emit(Events.DEBUG, \"Didn't sweep messages - lifetime is unlimited\");\n        return -1;\n      }\n\n      var lifetimeMs = lifetime * 1000;\n      var now = Date.now();\n      var channels = 0;\n      var messages = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(this.channels.cache.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var channel = _step2.value;\n          if (!channel.messages) continue;\n          channels++;\n          messages += channel.messages.cache.sweep(function (message) {\n            return now - (message.editedTimestamp || message.createdTimestamp) > lifetimeMs;\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.emit(Events.DEBUG, \"Swept \".concat(messages, \" messages older than \").concat(lifetime, \" seconds in \").concat(channels, \" text-based channels\"));\n      return messages;\n    }\n    /**\n     * Obtains the OAuth Application of this bot from Discord.\n     * @returns {Promise<ClientApplication>}\n     */\n\n  }, {\n    key: \"fetchApplication\",\n    value: function fetchApplication() {\n      var _this4 = this;\n\n      return this.api.oauth2.applications('@me').get().then(function (app) {\n        return new ClientApplication(_this4, app);\n      });\n    }\n    /**\n     * Obtains a guild preview from Discord, only available for public guilds.\n     * @param {GuildResolvable} guild The guild to fetch the preview for\n     * @returns {Promise<GuildPreview>}\n     */\n\n  }, {\n    key: \"fetchGuildPreview\",\n    value: function fetchGuildPreview(guild) {\n      var _this5 = this;\n\n      var id = this.guilds.resolveID(guild);\n      if (!id) throw new _TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');\n      return this.api.guilds(id).preview.get().then(function (data) {\n        return new GuildPreview(_this5, data);\n      });\n    }\n    /**\n     * Generates a link that can be used to invite the bot to a guild.\n     * @param {PermissionResolvable} [permissions] Permissions to request\n     * @returns {Promise<string>}\n     * @example\n     * client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])\n     *   .then(link => console.log(`Generated bot invite link: ${link}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"generateInvite\",\n    value: function () {\n      var _generateInvite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(permissions) {\n        var application, query;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                permissions = Permissions.resolve(permissions);\n                _context2.next = 3;\n                return this.fetchApplication();\n\n              case 3:\n                application = _context2.sent;\n                query = new URLSearchParams({\n                  client_id: application.id,\n                  permissions: permissions,\n                  scope: 'bot'\n                });\n                return _context2.abrupt(\"return\", \"\".concat(this.options.http.api).concat(this.api.oauth2.authorize, \"?\").concat(query));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function generateInvite(_x) {\n        return _generateInvite.apply(this, arguments);\n      }\n\n      return generateInvite;\n    }()\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _get(_getPrototypeOf(Client.prototype), \"toJSON\", this).call(this, {\n        readyAt: false,\n        presences: false\n      });\n    }\n    /**\n     * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\n     * with the client as `this`.\n     * @param {string} script Script to eval\n     * @returns {*}\n     * @private\n     */\n\n  }, {\n    key: \"_eval\",\n    value: function _eval(script) {\n      return eval(script);\n    }\n    /**\n     * Validates the client options.\n     * @param {ClientOptions} [options=this.options] Options to validate\n     * @private\n     */\n\n  }, {\n    key: \"_validateOptions\",\n    value: function _validateOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options;\n\n      if (typeof options.ws.intents !== 'undefined') {\n        options.ws.intents = Intents.resolve(options.ws.intents);\n      }\n\n      if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'shardCount', 'a number greater than or equal to 1');\n      }\n\n      if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'shards', \"'auto', a number or array of numbers\");\n      }\n\n      if (options.shards && !options.shards.length) throw new RangeError('CLIENT_INVALID_PROVIDED_SHARDS');\n\n      if (typeof options.messageCacheMaxSize !== 'number' || isNaN(options.messageCacheMaxSize)) {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'messageCacheMaxSize', 'a number');\n      }\n\n      if (typeof options.messageCacheLifetime !== 'number' || isNaN(options.messageCacheLifetime)) {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'The messageCacheLifetime', 'a number');\n      }\n\n      if (typeof options.messageSweepInterval !== 'number' || isNaN(options.messageSweepInterval)) {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'messageSweepInterval', 'a number');\n      }\n\n      if (typeof options.fetchAllMembers !== 'boolean') {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'fetchAllMembers', 'a boolean');\n      }\n\n      if (typeof options.disableMentions !== 'string') {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'disableMentions', 'a string');\n      }\n\n      if (!Array.isArray(options.partials)) {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'partials', 'an Array');\n      }\n\n      if (typeof options.restWsBridgeTimeout !== 'number' || isNaN(options.restWsBridgeTimeout)) {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'restWsBridgeTimeout', 'a number');\n      }\n\n      if (typeof options.restRequestTimeout !== 'number' || isNaN(options.restRequestTimeout)) {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'restRequestTimeout', 'a number');\n      }\n\n      if (typeof options.restSweepInterval !== 'number' || isNaN(options.restSweepInterval)) {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'restSweepInterval', 'a number');\n      }\n\n      if (typeof options.retryLimit !== 'number' || isNaN(options.retryLimit)) {\n        throw new _TypeError('CLIENT_INVALID_OPTION', 'retryLimit', 'a number');\n      }\n    }\n  }, {\n    key: \"emojis\",\n    get: function get() {\n      var emojis = new GuildEmojiManager({\n        client: this\n      });\n\n      var _iterator3 = _createForOfIteratorHelper(this.guilds.cache.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var guild = _step3.value;\n\n          if (guild.available) {\n            var _iterator4 = _createForOfIteratorHelper(guild.emojis.cache.values()),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var emoji = _step4.value;\n                emojis.cache.set(emoji.id, emoji);\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return emojis;\n    }\n    /**\n     * Timestamp of the time the client was last `READY` at\n     * @type {?number}\n     * @readonly\n     */\n\n  }, {\n    key: \"readyTimestamp\",\n    get: function get() {\n      return this.readyAt ? this.readyAt.getTime() : null;\n    }\n    /**\n     * How long it has been since the client last entered the `READY` state in milliseconds\n     * @type {?number}\n     * @readonly\n     */\n\n  }, {\n    key: \"uptime\",\n    get: function get() {\n      return this.readyAt ? Date.now() - this.readyAt : null;\n    }\n  }]);\n\n  return Client;\n}(BaseClient);\n\nmodule.exports = Client;\n/**\n * Emitted for general warnings.\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * Emitted for general debugging information.\n * @event Client#debug\n * @param {string} info The debug information\n */","map":null,"metadata":{},"sourceType":"module"}