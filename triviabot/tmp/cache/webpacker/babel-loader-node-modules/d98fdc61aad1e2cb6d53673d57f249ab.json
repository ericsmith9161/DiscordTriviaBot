{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Util = require('../util/Util'); // Discord epoch (2015-01-01T00:00:00.000Z)\n\n\nvar EPOCH = 1420070400000;\nvar INCREMENT = 0;\n/**\n * A container for useful snowflake-related methods.\n */\n\nvar SnowflakeUtil = /*#__PURE__*/function () {\n  function SnowflakeUtil() {\n    _classCallCheck(this, SnowflakeUtil);\n\n    throw new Error(\"The \".concat(this.constructor.name, \" class may not be instantiated.\"));\n  }\n  /**\n   * A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n   * ```\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   *\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker ID as 1 and the process ID as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n\n\n  _createClass(SnowflakeUtil, null, [{\n    key: \"generate\",\n    value: function generate() {\n      var timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n      if (timestamp instanceof Date) timestamp = timestamp.getTime();\n\n      if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n        throw new TypeError(\"\\\"timestamp\\\" argument must be a number (received \".concat(isNaN(timestamp) ? 'NaN' : _typeof(timestamp), \")\"));\n      }\n\n      if (INCREMENT >= 4095) INCREMENT = 0; // eslint-disable-next-line max-len\n\n      var BINARY = \"\".concat((timestamp - EPOCH).toString(2).padStart(42, '0'), \"0000100000\").concat((INCREMENT++).toString(2).padStart(12, '0'));\n      return Util.binaryToID(BINARY);\n    }\n    /**\n     * A deconstructed snowflake.\n     * @typedef {Object} DeconstructedSnowflake\n     * @property {number} timestamp Timestamp the snowflake was created\n     * @property {Date} date Date the snowflake was created\n     * @property {number} workerID Worker ID in the snowflake\n     * @property {number} processID Process ID in the snowflake\n     * @property {number} increment Increment in the snowflake\n     * @property {string} binary Binary representation of the snowflake\n     */\n\n    /**\n     * Deconstructs a Discord snowflake.\n     * @param {Snowflake} snowflake Snowflake to deconstruct\n     * @returns {DeconstructedSnowflake} Deconstructed snowflake\n     */\n\n  }, {\n    key: \"deconstruct\",\n    value: function deconstruct(snowflake) {\n      var BINARY = Util.idToBinary(snowflake).toString(2).padStart(64, '0');\n      var res = {\n        timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,\n        workerID: parseInt(BINARY.substring(42, 47), 2),\n        processID: parseInt(BINARY.substring(47, 52), 2),\n        increment: parseInt(BINARY.substring(52, 64), 2),\n        binary: BINARY\n      };\n      Object.defineProperty(res, 'date', {\n        get: function get() {\n          return new Date(this.timestamp);\n        },\n        enumerable: true\n      });\n      return res;\n    }\n  }]);\n\n  return SnowflakeUtil;\n}();\n\nmodule.exports = SnowflakeUtil;","map":null,"metadata":{},"sourceType":"module"}