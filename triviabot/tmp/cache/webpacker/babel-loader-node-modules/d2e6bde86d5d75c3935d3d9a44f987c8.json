{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Base = require('./Base');\n\nvar _require = require('../util/Constants'),\n    Endpoints = _require.Endpoints;\n\nvar Permissions = require('../util/Permissions');\n/**\n * Represents an invitation to a guild channel.\n * <warn>The only guaranteed properties are `code`, `channel`, and `url`. Other properties can be missing.</warn>\n * @extends {Base}\n */\n\n\nvar Invite = /*#__PURE__*/function (_Base) {\n  _inherits(Invite, _Base);\n\n  var _super = _createSuper(Invite);\n\n  function Invite(client, data) {\n    var _this;\n\n    _classCallCheck(this, Invite);\n\n    _this = _super.call(this, client);\n\n    _this._patch(data);\n\n    return _this;\n  }\n\n  _createClass(Invite, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      /**\n       * The guild the invite is for\n       * @type {?Guild}\n       */\n      this.guild = data.guild ? this.client.guilds.add(data.guild, false) : null;\n      /**\n       * The code for this invite\n       * @type {string}\n       */\n\n      this.code = data.code;\n      /**\n       * The approximate number of online members of the guild this invite is for\n       * @type {?number}\n       */\n\n      this.presenceCount = 'approximate_presence_count' in data ? data.approximate_presence_count : null;\n      /**\n       * The approximate total number of members of the guild this invite is for\n       * @type {?number}\n       */\n\n      this.memberCount = 'approximate_member_count' in data ? data.approximate_member_count : null;\n      /**\n       * Whether or not this invite is temporary\n       * @type {?boolean}\n       */\n\n      this.temporary = 'temporary' in data ? data.temporary : null;\n      /**\n       * The maximum age of the invite, in seconds, 0 if never expires\n       * @type {?number}\n       */\n\n      this.maxAge = 'max_age' in data ? data.max_age : null;\n      /**\n       * How many times this invite has been used\n       * @type {?number}\n       */\n\n      this.uses = 'uses' in data ? data.uses : null;\n      /**\n       * The maximum uses of this invite\n       * @type {?number}\n       */\n\n      this.maxUses = 'max_uses' in data ? data.max_uses : null;\n      /**\n       * The user who created this invite\n       * @type {?User}\n       */\n\n      this.inviter = data.inviter ? this.client.users.add(data.inviter) : null;\n      /**\n       * The target user for this invite\n       * @type {?User}\n       */\n\n      this.targetUser = data.target_user ? this.client.users.add(data.target_user) : null;\n      /**\n       * The type of the target user:\n       * * 1: STREAM\n       * @typedef {number} TargetUser\n       */\n\n      /**\n       * The target user type\n       * @type {?TargetUser}\n       */\n\n      this.targetUserType = typeof data.target_user_type === 'number' ? data.target_user_type : null;\n      /**\n       * The channel the invite is for\n       * @type {Channel}\n       */\n\n      this.channel = this.client.channels.add(data.channel, this.guild, false);\n      /**\n       * The timestamp the invite was created at\n       * @type {?number}\n       */\n\n      this.createdTimestamp = 'created_at' in data ? new Date(data.created_at).getTime() : null;\n    }\n    /**\n     * The time the invite was created at\n     * @type {?Date}\n     * @readonly\n     */\n\n  }, {\n    key: \"delete\",\n\n    /**\n     * Deletes this invite.\n     * @param {string} [reason] Reason for deleting this invite\n     * @returns {Promise<Invite>}\n     */\n    value: function _delete(reason) {\n      var _this2 = this;\n\n      return this.client.api.invites[this.code][\"delete\"]({\n        reason: reason\n      }).then(function () {\n        return _this2;\n      });\n    }\n    /**\n     * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n     * @returns {string}\n     * @example\n     * // Logs: Invite: https://discord.gg/A1b2C3\n     * console.log(`Invite: ${invite}`);\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.url;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _get(_getPrototypeOf(Invite.prototype), \"toJSON\", this).call(this, {\n        url: true,\n        expiresTimestamp: true,\n        presenceCount: false,\n        memberCount: false,\n        uses: false,\n        channel: 'channelID',\n        inviter: 'inviterID',\n        guild: 'guildID'\n      });\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.code;\n    }\n  }, {\n    key: \"createdAt\",\n    get: function get() {\n      return this.createdTimestamp ? new Date(this.createdTimestamp) : null;\n    }\n    /**\n     * Whether the invite is deletable by the client user\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"deletable\",\n    get: function get() {\n      var guild = this.guild;\n      if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n      if (!guild.me) throw new Error('GUILD_UNCACHED_ME');\n      return this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS, false) || guild.me.permissions.has(Permissions.FLAGS.MANAGE_GUILD);\n    }\n    /**\n     * The timestamp the invite will expire at\n     * @type {?number}\n     * @readonly\n     */\n\n  }, {\n    key: \"expiresTimestamp\",\n    get: function get() {\n      return this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1000 : null;\n    }\n    /**\n     * The time the invite will expire at\n     * @type {?Date}\n     * @readonly\n     */\n\n  }, {\n    key: \"expiresAt\",\n    get: function get() {\n      var expiresTimestamp = this.expiresTimestamp;\n      return expiresTimestamp ? new Date(expiresTimestamp) : null;\n    }\n    /**\n     * The URL to the invite\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: \"url\",\n    get: function get() {\n      return Endpoints.invite(this.client.options.http.invite, this.code);\n    }\n  }]);\n\n  return Invite;\n}(Base);\n\nmodule.exports = Invite;","map":null,"metadata":{},"sourceType":"module"}