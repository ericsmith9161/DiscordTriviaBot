{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar BaseManager = require('./BaseManager');\n\nvar GuildChannel = require('../structures/GuildChannel');\n\nvar PermissionOverwrites = require('../structures/PermissionOverwrites');\n\nvar _require = require('../util/Constants'),\n    ChannelTypes = _require.ChannelTypes;\n/**\n * Manages API methods for GuildChannels and stores their cache.\n * @extends {BaseManager}\n */\n\n\nvar GuildChannelManager = /*#__PURE__*/function (_BaseManager) {\n  _inherits(GuildChannelManager, _BaseManager);\n\n  var _super = _createSuper(GuildChannelManager);\n\n  function GuildChannelManager(guild, iterable) {\n    var _this;\n\n    _classCallCheck(this, GuildChannelManager);\n\n    _this = _super.call(this, guild.client, iterable, GuildChannel);\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n\n    _this.guild = guild;\n    return _this;\n  }\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildChannel>}\n   * @name GuildChannelManager#cache\n   */\n\n\n  _createClass(GuildChannelManager, [{\n    key: \"add\",\n    value: function add(channel) {\n      var existing = this.cache.get(channel.id);\n      if (existing) return existing;\n      this.cache.set(channel.id, channel);\n      return channel;\n    }\n    /**\n     * Data that can be resolved to give a Guild Channel object. This can be:\n     * * A GuildChannel object\n     * * A Snowflake\n     * @typedef {GuildChannel|Snowflake} GuildChannelResolvable\n     */\n\n    /**\n     * Resolves a GuildChannelResolvable to a Channel object.\n     * @method resolve\n     * @memberof GuildChannelManager\n     * @instance\n     * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n     * @returns {?Channel}\n     */\n\n    /**\n     * Resolves a GuildChannelResolvable to a channel ID string.\n     * @method resolveID\n     * @memberof GuildChannelManager\n     * @instance\n     * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n     * @returns {?Snowflake}\n     */\n\n    /**\n     * Creates a new channel in the guild.\n     * @param {string} name The name of the new channel\n     * @param {Object} [options] Options\n     * @param {string} [options.type='text'] The type of the new channel, either `text`, `voice`, or `category`\n     * @param {string} [options.topic] The topic for the new channel\n     * @param {boolean} [options.nsfw] Whether the new channel is nsfw\n     * @param {number} [options.bitrate] Bitrate of the new channel in bits (only voice)\n     * @param {number} [options.userLimit] Maximum amount of users allowed in the new channel (only voice)\n     * @param {ChannelResolvable} [options.parent] Parent of the new channel\n     * @param {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [options.permissionOverwrites]\n     * Permission overwrites of the new channel\n     * @param {number} [options.position] Position of the new channel\n     * @param {number} [options.rateLimitPerUser] The ratelimit per user for the channel\n     * @param {string} [options.reason] Reason for creating the channel\n     * @returns {Promise<GuildChannel>}\n     * @example\n     * // Create a new text channel\n     * guild.channels.create('new-general', { reason: 'Needed a cool new channel' })\n     *   .then(console.log)\n     *   .catch(console.error);\n     * @example\n     * // Create a new channel with permission overwrites\n     * guild.channels.create('new-voice', {\n     *   type: 'voice',\n     *   permissionOverwrites: [\n     *      {\n     *        id: message.author.id,\n     *        deny: ['VIEW_CHANNEL'],\n     *     },\n     *   ],\n     * })\n     */\n\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {\n        var _this2 = this;\n\n        var options,\n            type,\n            topic,\n            nsfw,\n            bitrate,\n            userLimit,\n            parent,\n            permissionOverwrites,\n            position,\n            rateLimitPerUser,\n            reason,\n            data,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                type = options.type, topic = options.topic, nsfw = options.nsfw, bitrate = options.bitrate, userLimit = options.userLimit, parent = options.parent, permissionOverwrites = options.permissionOverwrites, position = options.position, rateLimitPerUser = options.rateLimitPerUser, reason = options.reason;\n                if (parent) parent = this.client.channels.resolveID(parent);\n\n                if (permissionOverwrites) {\n                  permissionOverwrites = permissionOverwrites.map(function (o) {\n                    return PermissionOverwrites.resolve(o, _this2.guild);\n                  });\n                }\n\n                _context.next = 6;\n                return this.client.api.guilds(this.guild.id).channels.post({\n                  data: {\n                    name: name,\n                    topic: topic,\n                    type: type ? ChannelTypes[type.toUpperCase()] : ChannelTypes.TEXT,\n                    nsfw: nsfw,\n                    bitrate: bitrate,\n                    user_limit: userLimit,\n                    parent_id: parent,\n                    position: position,\n                    permission_overwrites: permissionOverwrites,\n                    rate_limit_per_user: rateLimitPerUser\n                  },\n                  reason: reason\n                });\n\n              case 6:\n                data = _context.sent;\n                return _context.abrupt(\"return\", this.client.actions.ChannelCreate.handle(data).channel);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return GuildChannelManager;\n}(BaseManager);\n\nmodule.exports = GuildChannelManager;","map":null,"metadata":{},"sourceType":"module"}