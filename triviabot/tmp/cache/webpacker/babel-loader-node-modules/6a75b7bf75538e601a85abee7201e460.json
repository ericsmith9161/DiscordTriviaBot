{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Action = require('./Action');\n\nvar _require = require('../../util/Constants'),\n    Events = _require.Events;\n\nvar _require2 = require('../../util/Constants'),\n    PartialTypes = _require2.PartialTypes;\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: 'ï¿½', id: null },\n     channel_id: 'id' } }\n*/\n\n\nvar MessageReactionAdd = /*#__PURE__*/function (_Action) {\n  _inherits(MessageReactionAdd, _Action);\n\n  var _super = _createSuper(MessageReactionAdd);\n\n  function MessageReactionAdd() {\n    _classCallCheck(this, MessageReactionAdd);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MessageReactionAdd, [{\n    key: \"handle\",\n    value: function handle(data) {\n      if (!data.emoji) return false;\n      var user = this.getUser(data);\n      if (!user) return false; // Verify channel\n\n      var channel = this.getChannel(data);\n      if (!channel || channel.type === 'voice') return false; // Verify message\n\n      var message = this.getMessage(data, channel);\n      if (!message) return false; // Verify reaction\n\n      if (message.partial && !this.client.options.partials.includes(PartialTypes.REACTION)) return false;\n      var reaction = message.reactions.add({\n        emoji: data.emoji,\n        count: message.partial ? null : 0,\n        me: user.id === this.client.user.id\n      });\n      if (!reaction) return false;\n\n      reaction._add(user);\n      /**\n       * Emitted whenever a reaction is added to a cached message.\n       * @event Client#messageReactionAdd\n       * @param {MessageReaction} messageReaction The reaction object\n       * @param {User} user The user that applied the guild or reaction emoji\n       */\n\n\n      this.client.emit(Events.MESSAGE_REACTION_ADD, reaction, user);\n      return {\n        message: message,\n        reaction: reaction,\n        user: user\n      };\n    }\n  }]);\n\n  return MessageReactionAdd;\n}(Action);\n\nmodule.exports = MessageReactionAdd;","map":null,"metadata":{},"sourceType":"module"}