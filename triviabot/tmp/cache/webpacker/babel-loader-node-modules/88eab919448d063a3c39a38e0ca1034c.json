{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Util = require('../util/Util');\n/**\n * Represents an attachment in a message.\n */\n\n\nvar MessageAttachment = /*#__PURE__*/function () {\n  /**\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @param {Object} [data] Extra data\n   */\n  function MessageAttachment(attachment) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var data = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, MessageAttachment);\n\n    this.attachment = attachment;\n    /**\n     * The name of this attachment\n     * @type {?string}\n     */\n\n    this.name = name;\n    if (data) this._patch(data);\n  }\n  /**\n   * Sets the file of this attachment.\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @returns {MessageAttachment} This attachment\n   */\n\n\n  _createClass(MessageAttachment, [{\n    key: \"setFile\",\n    value: function setFile(attachment) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this.attachment = attachment;\n      this.name = name;\n      return this;\n    }\n    /**\n     * Sets the name of this attachment.\n     * @param {string} name The name of the file\n     * @returns {MessageAttachment} This attachment\n     */\n\n  }, {\n    key: \"setName\",\n    value: function setName(name) {\n      this.name = name;\n      return this;\n    }\n  }, {\n    key: \"_patch\",\n    value: function _patch(data) {\n      /**\n       * The ID of this attachment\n       * @type {Snowflake}\n       */\n      this.id = data.id;\n      /**\n       * The size of this attachment in bytes\n       * @type {number}\n       */\n\n      this.size = data.size;\n      /**\n       * The URL to this attachment\n       * @type {string}\n       */\n\n      this.url = data.url;\n      /**\n       * The Proxy URL to this attachment\n       * @type {string}\n       */\n\n      this.proxyURL = data.proxy_url;\n      /**\n       * The height of this attachment (if an image or video)\n       * @type {?number}\n       */\n\n      this.height = typeof data.height !== 'undefined' ? data.height : null;\n      /**\n       * The width of this attachment (if an image or video)\n       * @type {?number}\n       */\n\n      this.width = typeof data.width !== 'undefined' ? data.width : null;\n    }\n    /**\n     * Whether or not this attachment has been marked as a spoiler\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Util.flatten(this);\n    }\n  }, {\n    key: \"spoiler\",\n    get: function get() {\n      return Util.basename(this.url).startsWith('SPOILER_');\n    }\n  }]);\n\n  return MessageAttachment;\n}();\n\nmodule.exports = MessageAttachment;","map":null,"metadata":{},"sourceType":"module"}