{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Base = require('./Base');\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n *  Represents a guild integration.\n */\n\n\nvar Integration = /*#__PURE__*/function (_Base) {\n  _inherits(Integration, _Base);\n\n  var _super = _createSuper(Integration);\n\n  function Integration(client, data, guild) {\n    var _this;\n\n    _classCallCheck(this, Integration);\n\n    _this = _super.call(this, client);\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n\n    _this.guild = guild;\n    /**\n     * The integration id\n     * @type {Snowflake}\n     */\n\n    _this.id = data.id;\n    /**\n     * The integration name\n     * @type {string}\n     */\n\n    _this.name = data.name;\n    /**\n     * The integration type (twitch, youtube, etc)\n     * @type {string}\n     */\n\n    _this.type = data.type;\n    /**\n     * Whether this integration is enabled\n     * @type {boolean}\n     */\n\n    _this.enabled = data.enabled;\n    /**\n     * Whether this integration is syncing\n     * @type {boolean}\n     */\n\n    _this.syncing = data.syncing;\n    /**\n     * The role that this integration uses for subscribers\n     * @type {Role}\n     */\n\n    _this.role = _this.guild.roles.cache.get(data.role_id);\n    /**\n     * The user for this integration\n     * @type {User}\n     */\n\n    _this.user = _this.client.users.add(data.user);\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n\n    _this.account = data.account;\n    /**\n     * The last time this integration was last synced\n     * @type {number}\n     */\n\n    _this.syncedAt = data.synced_at;\n\n    _this._patch(data);\n\n    return _this;\n  }\n\n  _createClass(Integration, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      /**\n       * The behavior of expiring subscribers\n       * @type {number}\n       */\n      this.expireBehavior = data.expire_behavior;\n      /**\n       * The grace period before expiring subscribers\n       * @type {number}\n       */\n\n      this.expireGracePeriod = data.expire_grace_period;\n    }\n    /**\n     * Sync this integration\n     * @returns {Promise<Integration>}\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      var _this2 = this;\n\n      this.syncing = true;\n      return this.client.api.guilds(this.guild.id).integrations(this.id).post().then(function () {\n        _this2.syncing = false;\n        _this2.syncedAt = Date.now();\n        return _this2;\n      });\n    }\n    /**\n     * The data for editing an integration.\n     * @typedef {Object} IntegrationEditData\n     * @property {number} [expireBehavior] The new behaviour of expiring subscribers\n     * @property {number} [expireGracePeriod] The new grace period before expiring subscribers\n     */\n\n    /**\n     * Edits this integration.\n     * @param {IntegrationEditData} data The data to edit this integration with\n     * @param {string} reason Reason for editing this integration\n     * @returns {Promise<Integration>}\n     */\n\n  }, {\n    key: \"edit\",\n    value: function edit(data, reason) {\n      var _this3 = this;\n\n      if ('expireBehavior' in data) {\n        data.expire_behavior = data.expireBehavior;\n        data.expireBehavior = null;\n      }\n\n      if ('expireGracePeriod' in data) {\n        data.expire_grace_period = data.expireGracePeriod;\n        data.expireGracePeriod = null;\n      } // The option enable_emoticons is only available for Twitch at this moment\n\n\n      return this.client.api.guilds(this.guild.id).integrations(this.id).patch({\n        data: data,\n        reason: reason\n      }).then(function () {\n        _this3._patch(data);\n\n        return _this3;\n      });\n    }\n    /**\n     * Deletes this integration.\n     * @returns {Promise<Integration>}\n     * @param {string} [reason] Reason for deleting this integration\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(reason) {\n      var _this4 = this;\n\n      return this.client.api.guilds(this.guild.id).integrations(this.id)[\"delete\"]({\n        reason: reason\n      }).then(function () {\n        return _this4;\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _get(_getPrototypeOf(Integration.prototype), \"toJSON\", this).call(this, {\n        role: 'roleID',\n        guild: 'guildID',\n        user: 'userID'\n      });\n    }\n  }]);\n\n  return Integration;\n}(Base);\n\nmodule.exports = Integration;","map":null,"metadata":{},"sourceType":"module"}