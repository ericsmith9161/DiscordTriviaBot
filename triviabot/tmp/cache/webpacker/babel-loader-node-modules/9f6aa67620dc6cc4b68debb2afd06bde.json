{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar BaseManager = require('./BaseManager');\n\nvar Guild = require('../structures/Guild');\n\nvar GuildChannel = require('../structures/GuildChannel');\n\nvar GuildEmoji = require('../structures/GuildEmoji');\n\nvar GuildMember = require('../structures/GuildMember');\n\nvar Invite = require('../structures/Invite');\n\nvar Role = require('../structures/Role');\n\nvar _require = require('../util/Constants'),\n    Events = _require.Events,\n    VerificationLevels = _require.VerificationLevels,\n    DefaultMessageNotifications = _require.DefaultMessageNotifications,\n    ExplicitContentFilterLevels = _require.ExplicitContentFilterLevels;\n\nvar DataResolver = require('../util/DataResolver');\n\nvar Permissions = require('../util/Permissions');\n\nvar _require2 = require('../util/Util'),\n    resolveColor = _require2.resolveColor;\n/**\n * Manages API methods for Guilds and stores their cache.\n * @extends {BaseManager}\n */\n\n\nvar GuildManager = /*#__PURE__*/function (_BaseManager) {\n  _inherits(GuildManager, _BaseManager);\n\n  var _super = _createSuper(GuildManager);\n\n  function GuildManager(client, iterable) {\n    _classCallCheck(this, GuildManager);\n\n    return _super.call(this, client, iterable, Guild);\n  }\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, Guild>}\n   * @name GuildManager#cache\n   */\n\n  /**\n   * Data that resolves to give a Guild object. This can be:\n   * * A Guild object\n   * * A GuildChannel object\n   * * A GuildEmoji object\n   * * A Role object\n   * * A Snowflake\n   * * An Invite object\n   * @typedef {Guild|GuildChannel|GuildMember|GuildEmoji|Role|Snowflake|Invite} GuildResolvable\n   */\n\n  /**\n   * Partial data for a Role.\n   * @typedef {Object} PartialRoleData\n   * @property {number} [id] The ID for this role, used to set channel overrides,\n   * this is a placeholder and will be replaced by the API after consumption\n   * @property {string} [name] The name of the role\n   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether or not the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {PermissionResolvable|number} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether or not the role should be mentionable\n   */\n\n  /**\n   * Partial overwrite data.\n   * @typedef {Object} PartialOverwriteData\n   * @property {number|Snowflake} id The Role or User ID for this overwrite\n   * @property {string} [type] The type of this overwrite\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   */\n\n  /**\n   * Partial data for a Channel.\n   * @typedef {Object} PartialChannelData\n   * @property {number} [id] The ID for this channel, used to set its parent,\n   * this is a placeholder and will be replaced by the API after consumption\n   * @property {number} [parentID] The parent ID for this channel\n   * @property {string} [type] The type of the channel\n   * @property {string} name The name of the channel\n   * @property {string} [topic] The topic of the text channel\n   * @property {boolean} [nsfw] Whether the channel is NSFW\n   * @property {number} [bitrate] The bitrate of the voice channel\n   * @property {number} [userLimit] The user limit of the channel\n   * @property {PartialOverwriteData} [permissionOverwrites]\n   * Overwrites of the channel\n   * @property {number} [rateLimitPerUser] The rate limit per user of the channel in seconds\n   */\n\n  /**\n   * Resolves a GuildResolvable to a Guild object.\n   * @method resolve\n   * @memberof GuildManager\n   * @instance\n   * @param {GuildResolvable} guild The guild resolvable to identify\n   * @returns {?Guild}\n   */\n\n\n  _createClass(GuildManager, [{\n    key: \"resolve\",\n    value: function resolve(guild) {\n      if (guild instanceof GuildChannel || guild instanceof GuildMember || guild instanceof GuildEmoji || guild instanceof Role || guild instanceof Invite && guild.guild) {\n        return _get(_getPrototypeOf(GuildManager.prototype), \"resolve\", this).call(this, guild.guild);\n      }\n\n      return _get(_getPrototypeOf(GuildManager.prototype), \"resolve\", this).call(this, guild);\n    }\n    /**\n     * Resolves a GuildResolvable to a Guild ID string.\n     * @method resolveID\n     * @memberof GuildManager\n     * @instance\n     * @param {GuildResolvable} guild The guild resolvable to identify\n     * @returns {?Snowflake}\n     */\n\n  }, {\n    key: \"resolveID\",\n    value: function resolveID(guild) {\n      if (guild instanceof GuildChannel || guild instanceof GuildMember || guild instanceof GuildEmoji || guild instanceof Role || guild instanceof Invite && guild.guild) {\n        return _get(_getPrototypeOf(GuildManager.prototype), \"resolveID\", this).call(this, guild.guild.id);\n      }\n\n      return _get(_getPrototypeOf(GuildManager.prototype), \"resolveID\", this).call(this, guild);\n    }\n    /**\n     * Creates a guild.\n     * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n     * @param {string} name The name of the guild\n     * @param {Object} [options] Options for the creating\n     * @param {PartialChannelData[]} [options.channels] The channels for this guild\n     * @param {DefaultMessageNotifications} [options.defaultMessageNotifications] The default message notifications\n     * for the guild\n     * @param {ExplicitContentFilterLevel} [options.explicitContentFilter] The explicit content filter level for the guild\n     * @param {BufferResolvable|Base64Resolvable} [options.icon=null] The icon for the guild\n     * @param {string} [options.region] The region for the server, defaults to the closest one available\n     * @param {PartialRoleData[]} [options.roles] The roles for this guild,\n     * the first element of this array is used to change properties of the guild's everyone role.\n     * @param {VerificationLevel} [options.verificationLevel] The verification level for the guild\n     * @returns {Promise<Guild>} The guild that was created\n     */\n\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {\n        var _this = this;\n\n        var _ref,\n            _ref$channels,\n            channels,\n            defaultMessageNotifications,\n            explicitContentFilter,\n            _ref$icon,\n            icon,\n            region,\n            _ref$roles,\n            roles,\n            verificationLevel,\n            _iterator,\n            _step,\n            channel,\n            _iterator3,\n            _step3,\n            overwrite,\n            _iterator2,\n            _step2,\n            role,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, _ref$channels = _ref.channels, channels = _ref$channels === void 0 ? [] : _ref$channels, defaultMessageNotifications = _ref.defaultMessageNotifications, explicitContentFilter = _ref.explicitContentFilter, _ref$icon = _ref.icon, icon = _ref$icon === void 0 ? null : _ref$icon, region = _ref.region, _ref$roles = _ref.roles, roles = _ref$roles === void 0 ? [] : _ref$roles, verificationLevel = _ref.verificationLevel;\n                _context.next = 3;\n                return DataResolver.resolveImage(icon);\n\n              case 3:\n                icon = _context.sent;\n\n                if (typeof verificationLevel !== 'undefined' && typeof verificationLevel !== 'number') {\n                  verificationLevel = VerificationLevels.indexOf(verificationLevel);\n                }\n\n                if (typeof defaultMessageNotifications !== 'undefined' && typeof defaultMessageNotifications !== 'number') {\n                  defaultMessageNotifications = DefaultMessageNotifications.indexOf(defaultMessageNotifications);\n                }\n\n                if (typeof explicitContentFilter !== 'undefined' && typeof explicitContentFilter !== 'number') {\n                  explicitContentFilter = ExplicitContentFilterLevels.indexOf(explicitContentFilter);\n                }\n\n                _iterator = _createForOfIteratorHelper(channels);\n                _context.prev = 8;\n\n                _iterator.s();\n\n              case 10:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 22;\n                  break;\n                }\n\n                channel = _step.value;\n                channel.parent_id = channel.parentID;\n                delete channel.parentID;\n\n                if (channel.permissionOverwrites) {\n                  _context.next = 16;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 20);\n\n              case 16:\n                _iterator3 = _createForOfIteratorHelper(channel.permissionOverwrites);\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    overwrite = _step3.value;\n                    if (overwrite.allow) overwrite.allow = Permissions.resolve(overwrite.allow);\n                    if (overwrite.deny) overwrite.deny = Permissions.resolve(overwrite.deny);\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                channel.permission_overwrites = channel.permissionOverwrites;\n                delete channel.permissionOverwrites;\n\n              case 20:\n                _context.next = 10;\n                break;\n\n              case 22:\n                _context.next = 27;\n                break;\n\n              case 24:\n                _context.prev = 24;\n                _context.t0 = _context[\"catch\"](8);\n\n                _iterator.e(_context.t0);\n\n              case 27:\n                _context.prev = 27;\n\n                _iterator.f();\n\n                return _context.finish(27);\n\n              case 30:\n                _iterator2 = _createForOfIteratorHelper(roles);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    role = _step2.value;\n                    if (role.color) role.color = resolveColor(role.color);\n                    if (role.permissions) role.permissions = Permissions.resolve(role.permissions);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  return _this.client.api.guilds.post({\n                    data: {\n                      name: name,\n                      region: region,\n                      icon: icon,\n                      verification_level: verificationLevel,\n                      default_message_notifications: defaultMessageNotifications,\n                      explicit_content_filter: explicitContentFilter,\n                      channels: channels,\n                      roles: roles\n                    }\n                  }).then(function (data) {\n                    if (_this.client.guilds.cache.has(data.id)) return resolve(_this.client.guilds.cache.get(data.id));\n\n                    var handleGuild = function handleGuild(guild) {\n                      if (guild.id === data.id) {\n                        _this.client.removeListener(Events.GUILD_CREATE, handleGuild);\n\n                        _this.client.clearTimeout(timeout);\n\n                        resolve(guild);\n                      }\n                    };\n\n                    _this.client.on(Events.GUILD_CREATE, handleGuild);\n\n                    var timeout = _this.client.setTimeout(function () {\n                      _this.client.removeListener(Events.GUILD_CREATE, handleGuild);\n\n                      resolve(_this.client.guilds.add(data));\n                    }, 10000);\n\n                    return undefined;\n                  }, reject);\n                }));\n\n              case 33:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[8, 24, 27, 30]]);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return GuildManager;\n}(BaseManager);\n\nmodule.exports = GuildManager;","map":null,"metadata":{},"sourceType":"module"}