{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Base = require('./Base');\n\nvar Snowflake = require('../util/Snowflake');\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\n\n\nvar Emoji = /*#__PURE__*/function (_Base) {\n  _inherits(Emoji, _Base);\n\n  var _super = _createSuper(Emoji);\n\n  function Emoji(client, emoji) {\n    var _this;\n\n    _classCallCheck(this, Emoji);\n\n    _this = _super.call(this, client);\n    /**\n     * Whether this emoji is animated\n     * @type {boolean}\n     */\n\n    _this.animated = emoji.animated;\n    /**\n     * The name of this emoji\n     * @type {string}\n     */\n\n    _this.name = emoji.name;\n    /**\n     * The ID of this emoji\n     * @type {?Snowflake}\n     */\n\n    _this.id = emoji.id;\n    /**\n     * Whether this emoji has been deleted\n     * @type {boolean}\n     */\n\n    _this.deleted = false;\n    return _this;\n  }\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n\n\n  _createClass(Emoji, [{\n    key: \"toString\",\n\n    /**\n     * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n     * instead of the Emoji object.\n     * @returns {string}\n     * @example\n     * // Send a custom emoji from a guild:\n     * const emoji = guild.emojis.cache.first();\n     * msg.reply(`Hello! ${emoji}`);\n     * @example\n     * // Send the emoji used in a reaction to the channel the reaction is part of\n     * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n     */\n    value: function toString() {\n      return this.id ? \"<\".concat(this.animated ? 'a' : '', \":\").concat(this.name, \":\").concat(this.id, \">\") : this.name;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _get(_getPrototypeOf(Emoji.prototype), \"toJSON\", this).call(this, {\n        guild: 'guildID',\n        createdTimestamp: true,\n        url: true,\n        identifier: true\n      });\n    }\n  }, {\n    key: \"identifier\",\n    get: function get() {\n      if (this.id) return \"\".concat(this.animated ? 'a:' : '').concat(this.name, \":\").concat(this.id);\n      return encodeURIComponent(this.name);\n    }\n    /**\n     * The URL to the emoji file if its a custom emoji\n     * @type {?string}\n     * @readonly\n     */\n\n  }, {\n    key: \"url\",\n    get: function get() {\n      if (!this.id) return null;\n      return this.client.rest.cdn.Emoji(this.id, this.animated ? 'gif' : 'png');\n    }\n    /**\n     * The timestamp the emoji was created at, or null if unicode\n     * @type {?number}\n     * @readonly\n     */\n\n  }, {\n    key: \"createdTimestamp\",\n    get: function get() {\n      if (!this.id) return null;\n      return Snowflake.deconstruct(this.id).timestamp;\n    }\n    /**\n     * The time the emoji was created at, or null if unicode\n     * @type {?Date}\n     * @readonly\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function get() {\n      if (!this.id) return null;\n      return new Date(this.createdTimestamp);\n    }\n  }]);\n\n  return Emoji;\n}(Base);\n\nmodule.exports = Emoji;","map":null,"metadata":{},"sourceType":"module"}