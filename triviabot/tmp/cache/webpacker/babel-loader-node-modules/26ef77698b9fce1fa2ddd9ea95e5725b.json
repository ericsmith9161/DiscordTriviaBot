{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar GuildChannel = require('./GuildChannel');\n\nvar Webhook = require('./Webhook');\n\nvar TextBasedChannel = require('./interfaces/TextBasedChannel');\n\nvar MessageManager = require('../managers/MessageManager');\n\nvar Collection = require('../util/Collection');\n\nvar DataResolver = require('../util/DataResolver');\n/**\n * Represents a guild text channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\n\n\nvar TextChannel = /*#__PURE__*/function (_GuildChannel) {\n  _inherits(TextChannel, _GuildChannel);\n\n  var _super = _createSuper(TextChannel);\n\n  /**\n   * @param {Guild} guild The guild the text channel is part of\n   * @param {Object} data The data for the text channel\n   */\n  function TextChannel(guild, data) {\n    var _this;\n\n    _classCallCheck(this, TextChannel);\n\n    _this = _super.call(this, guild, data);\n    /**\n     * A manager of the messages sent to this channel\n     * @type {MessageManager}\n     */\n\n    _this.messages = new MessageManager(_assertThisInitialized(_this));\n    _this._typing = new Map();\n    return _this;\n  }\n\n  _createClass(TextChannel, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      _get(_getPrototypeOf(TextChannel.prototype), \"_patch\", this).call(this, data);\n      /**\n       * The topic of the text channel\n       * @type {?string}\n       */\n\n\n      this.topic = data.topic;\n      /**\n       * If the guild considers this channel NSFW\n       * @type {boolean}\n       * @readonly\n       */\n\n      this.nsfw = data.nsfw;\n      /**\n       * The ID of the last message sent in this channel, if one was sent\n       * @type {?Snowflake}\n       */\n\n      this.lastMessageID = data.last_message_id;\n      /**\n       * The ratelimit per user for this channel in seconds\n       * @type {number}\n       */\n\n      this.rateLimitPerUser = data.rate_limit_per_user || 0;\n      /**\n       * The timestamp when the last pinned message was pinned, if there was one\n       * @type {?number}\n       */\n\n      this.lastPinTimestamp = data.last_pin_timestamp ? new Date(data.last_pin_timestamp).getTime() : null;\n\n      if (data.messages) {\n        var _iterator = _createForOfIteratorHelper(data.messages),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var message = _step.value;\n            this.messages.add(message);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n    /**\n     * Sets the rate limit per user for this channel.\n     * @param {number} rateLimitPerUser The new ratelimit in seconds\n     * @param {string} [reason] Reason for changing the channel's ratelimits\n     * @returns {Promise<TextChannel>}\n     */\n\n  }, {\n    key: \"setRateLimitPerUser\",\n    value: function setRateLimitPerUser(rateLimitPerUser, reason) {\n      return this.edit({\n        rateLimitPerUser: rateLimitPerUser\n      }, reason);\n    }\n    /**\n     * Sets whether this channel is flagged as NSFW.\n     * @param {boolean} nsfw Whether the channel should be considered NSFW\n     * @param {string} [reason] Reason for changing the channel's NSFW flag\n     * @returns {Promise<TextChannel>}\n     */\n\n  }, {\n    key: \"setNSFW\",\n    value: function setNSFW(nsfw, reason) {\n      return this.edit({\n        nsfw: nsfw\n      }, reason);\n    }\n    /**\n     * Fetches all webhooks for the channel.\n     * @returns {Promise<Collection<Snowflake, Webhook>>}\n     * @example\n     * // Fetch webhooks\n     * channel.fetchWebhooks()\n     *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"fetchWebhooks\",\n    value: function fetchWebhooks() {\n      var _this2 = this;\n\n      return this.client.api.channels[this.id].webhooks.get().then(function (data) {\n        var hooks = new Collection();\n\n        var _iterator2 = _createForOfIteratorHelper(data),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var hook = _step2.value;\n            hooks.set(hook.id, new Webhook(_this2.client, hook));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return hooks;\n      });\n    }\n    /**\n     * Creates a webhook for the channel.\n     * @param {string} name The name of the webhook\n     * @param {Object} [options] Options for creating the webhook\n     * @param {BufferResolvable|Base64Resolvable} [options.avatar] Avatar for the webhook\n     * @param {string} [options.reason] Reason for creating the webhook\n     * @returns {Promise<Webhook>} webhook The created webhook\n     * @example\n     * // Create a webhook for the current channel\n     * channel.createWebhook('Snek', {\n     *   avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n     *   reason: 'Needed a cool new Webhook'\n     * })\n     *   .then(console.log)\n     *   .catch(console.error)\n     */\n\n  }, {\n    key: \"createWebhook\",\n    value: function () {\n      var _createWebhook = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {\n        var _this3 = this;\n\n        var _ref,\n            avatar,\n            reason,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, avatar = _ref.avatar, reason = _ref.reason;\n\n                if (!(typeof avatar === 'string' && !avatar.startsWith('data:'))) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return DataResolver.resolveImage(avatar);\n\n              case 4:\n                avatar = _context.sent;\n\n              case 5:\n                return _context.abrupt(\"return\", this.client.api.channels[this.id].webhooks.post({\n                  data: {\n                    name: name,\n                    avatar: avatar\n                  },\n                  reason: reason\n                }).then(function (data) {\n                  return new Webhook(_this3.client, data);\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createWebhook(_x) {\n        return _createWebhook.apply(this, arguments);\n      }\n\n      return createWebhook;\n    }() // These are here only for documentation purposes - they are implemented by TextBasedChannel\n\n    /* eslint-disable no-empty-function */\n\n  }, {\n    key: \"send\",\n    value: function send() {}\n  }, {\n    key: \"startTyping\",\n    value: function startTyping() {}\n  }, {\n    key: \"stopTyping\",\n    value: function stopTyping() {}\n  }, {\n    key: \"createMessageCollector\",\n    value: function createMessageCollector() {}\n  }, {\n    key: \"awaitMessages\",\n    value: function awaitMessages() {}\n  }, {\n    key: \"bulkDelete\",\n    value: function bulkDelete() {}\n  }, {\n    key: \"lastMessage\",\n    get: function get() {}\n  }, {\n    key: \"lastPinAt\",\n    get: function get() {}\n  }, {\n    key: \"typing\",\n    get: function get() {}\n  }, {\n    key: \"typingCount\",\n    get: function get() {}\n  }]);\n\n  return TextChannel;\n}(GuildChannel);\n\nTextBasedChannel.applyToClass(TextChannel, true);\nmodule.exports = TextChannel;","map":null,"metadata":{},"sourceType":"module"}