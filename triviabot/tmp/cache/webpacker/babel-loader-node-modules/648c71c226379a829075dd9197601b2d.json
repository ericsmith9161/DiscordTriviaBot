{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _asyncIterator(iterable) { var method; if (typeof Symbol !== \"undefined\") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError(\"Object is not async iterable\"); }\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar stream = require('stream');\n\nvar fetch = require('node-fetch');\n\nvar _require = require('../errors'),\n    DiscordError = _require.Error,\n    _TypeError = _require.TypeError;\n\nvar _require2 = require('../util/Constants'),\n    browser = _require2.browser;\n\nvar Util = require('../util/Util');\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them.\n * @private\n */\n\n\nvar DataResolver = /*#__PURE__*/function () {\n  function DataResolver() {\n    _classCallCheck(this, DataResolver);\n\n    throw new Error(\"The \".concat(this.constructor.name, \" class may not be instantiated.\"));\n  }\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n\n\n  _createClass(DataResolver, null, [{\n    key: \"resolveInviteCode\",\n    value: function resolveInviteCode(data) {\n      var inviteRegex = /discord(?:app\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/i;\n      var match = inviteRegex.exec(data);\n      if (match && match[1]) return match[1];\n      return data;\n    }\n    /**\n     * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n     * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n     * @returns {Promise<?string>}\n     */\n\n  }, {\n    key: \"resolveImage\",\n    value: function () {\n      var _resolveImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image) {\n        var file;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (image) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 2:\n                if (!(typeof image === 'string' && image.startsWith('data:'))) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", image);\n\n              case 4:\n                _context.next = 6;\n                return this.resolveFileAsBuffer(image);\n\n              case 6:\n                file = _context.sent;\n                return _context.abrupt(\"return\", DataResolver.resolveBase64(file));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveImage(_x) {\n        return _resolveImage.apply(this, arguments);\n      }\n\n      return resolveImage;\n    }()\n    /**\n     * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n     * * A Buffer\n     * * A base64 string\n     * @typedef {Buffer|string} Base64Resolvable\n     */\n\n    /**\n     * Resolves a Base64Resolvable to a Base 64 image.\n     * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n     * @returns {?string}\n     */\n\n  }, {\n    key: \"resolveBase64\",\n    value: function resolveBase64(data) {\n      if (Buffer.isBuffer(data)) return \"data:image/jpg;base64,\".concat(data.toString('base64'));\n      return data;\n    }\n    /**\n     * Data that can be resolved to give a Buffer. This can be:\n     * * A Buffer\n     * * The path to a local file\n     * * A URL\n     * @typedef {string|Buffer} BufferResolvable\n     */\n\n    /**\n     * @external Stream\n     * @see {@link https://nodejs.org/api/stream.html}\n     */\n\n    /**\n     * Resolves a BufferResolvable to a Buffer or a Stream.\n     * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n     * @returns {Promise<Buffer|Stream>}\n     */\n\n  }, {\n    key: \"resolveFile\",\n    value: function () {\n      var _resolveFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resource) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(!browser && Buffer.isBuffer(resource))) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", resource);\n\n              case 2:\n                if (!(browser && resource instanceof ArrayBuffer)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Util.convertToBuffer(resource));\n\n              case 4:\n                if (!(resource instanceof stream.Readable)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", resource);\n\n              case 6:\n                if (!(typeof resource === 'string')) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                if (!/^https?:\\/\\//.test(resource)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                _context2.next = 10;\n                return fetch(resource);\n\n              case 10:\n                res = _context2.sent;\n                return _context2.abrupt(\"return\", browser ? res.blob() : res.body);\n\n              case 14:\n                if (browser) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var file = path.resolve(resource);\n                  fs.stat(file, function (err, stats) {\n                    if (err) return reject(err);\n                    if (!stats.isFile()) return reject(new DiscordError('FILE_NOT_FOUND', file));\n                    return resolve(fs.createReadStream(file));\n                  });\n                }));\n\n              case 16:\n                throw new _TypeError('REQ_RESOURCE_TYPE');\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function resolveFile(_x2) {\n        return _resolveFile.apply(this, arguments);\n      }\n\n      return resolveFile;\n    }()\n    /**\n     * Resolves a BufferResolvable to a Buffer.\n     * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n     * @returns {Promise<Buffer>}\n     */\n\n  }, {\n    key: \"resolveFileAsBuffer\",\n    value: function () {\n      var _resolveFileAsBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(resource) {\n        var file, buffers, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, data;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.resolveFile(resource);\n\n              case 2:\n                file = _context3.sent;\n\n                if (!Buffer.isBuffer(file)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", file);\n\n              case 5:\n                buffers = [];\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context3.prev = 8;\n                _iterator = _asyncIterator(file);\n\n              case 10:\n                _context3.next = 12;\n                return _iterator.next();\n\n              case 12:\n                _step = _context3.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context3.next = 16;\n                return _step.value;\n\n              case 16:\n                _value = _context3.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                data = _value;\n                buffers.push(data);\n\n              case 20:\n                _iteratorNormalCompletion = true;\n                _context3.next = 10;\n                break;\n\n              case 23:\n                _context3.next = 29;\n                break;\n\n              case 25:\n                _context3.prev = 25;\n                _context3.t0 = _context3[\"catch\"](8);\n                _didIteratorError = true;\n                _iteratorError = _context3.t0;\n\n              case 29:\n                _context3.prev = 29;\n                _context3.prev = 30;\n\n                if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n                  _context3.next = 34;\n                  break;\n                }\n\n                _context3.next = 34;\n                return _iterator[\"return\"]();\n\n              case 34:\n                _context3.prev = 34;\n\n                if (!_didIteratorError) {\n                  _context3.next = 37;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 37:\n                return _context3.finish(34);\n\n              case 38:\n                return _context3.finish(29);\n\n              case 39:\n                return _context3.abrupt(\"return\", Buffer.concat(buffers));\n\n              case 40:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[8, 25, 29, 39], [30,, 34, 38]]);\n      }));\n\n      function resolveFileAsBuffer(_x3) {\n        return _resolveFileAsBuffer.apply(this, arguments);\n      }\n\n      return resolveFileAsBuffer;\n    }()\n  }]);\n\n  return DataResolver;\n}();\n\nmodule.exports = DataResolver;","map":null,"metadata":{},"sourceType":"module"}