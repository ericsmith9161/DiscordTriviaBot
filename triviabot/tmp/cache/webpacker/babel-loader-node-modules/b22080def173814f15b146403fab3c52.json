{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar BaseGuildEmoji = require('./BaseGuildEmoji');\n\nvar _require = require('../errors'),\n    Error = _require.Error;\n\nvar GuildEmojiRoleManager = require('../managers/GuildEmojiRoleManager');\n\nvar Permissions = require('../util/Permissions');\n/**\n * Represents a custom emoji.\n * @extends {BaseGuildEmoji}\n */\n\n\nvar GuildEmoji = /*#__PURE__*/function (_BaseGuildEmoji) {\n  _inherits(GuildEmoji, _BaseGuildEmoji);\n\n  var _super = _createSuper(GuildEmoji);\n\n  function GuildEmoji() {\n    _classCallCheck(this, GuildEmoji);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GuildEmoji, [{\n    key: \"_clone\",\n\n    /**\n     * @name GuildEmoji\n     * @kind constructor\n     * @memberof GuildEmoji\n     * @param {Client} client The instantiating client\n     * @param {Object} data The data for the guild emoji\n     * @param {Guild} guild The guild the guild emoji is part of\n     */\n\n    /**\n     * The guild this emoji is part of\n     * @type {Guild}\n     * @name GuildEmoji#guild\n     */\n    value: function _clone() {\n      var clone = _get(_getPrototypeOf(GuildEmoji.prototype), \"_clone\", this).call(this);\n\n      clone._roles = this._roles.slice();\n      return clone;\n    }\n    /**\n     * Whether the emoji is deletable by the client user\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"fetchAuthor\",\n\n    /**\n     * Fetches the author for this emoji\n     * @returns {Promise<User>}\n     */\n    value: function fetchAuthor() {\n      var _this = this;\n\n      if (this.managed) {\n        return Promise.reject(new Error('EMOJI_MANAGED'));\n      } else {\n        if (!this.guild.me) return Promise.reject(new Error('GUILD_UNCACHED_ME'));\n\n        if (!this.guild.me.permissions.has(Permissions.FLAGS.MANAGE_EMOJIS)) {\n          return Promise.reject(new Error('MISSING_MANAGE_EMOJIS_PERMISSION', this.guild));\n        }\n      }\n\n      return this.client.api.guilds(this.guild.id).emojis(this.id).get().then(function (emoji) {\n        return _this.client.users.add(emoji.user);\n      });\n    }\n    /**\n     * Data for editing an emoji.\n     * @typedef {Object} GuildEmojiEditData\n     * @property {string} [name] The name of the emoji\n     * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] Roles to restrict emoji to\n     */\n\n    /**\n     * Edits the emoji.\n     * @param {GuildEmojiEditData} data The new data for the emoji\n     * @param {string} [reason] Reason for editing this emoji\n     * @returns {Promise<GuildEmoji>}\n     * @example\n     * // Edit an emoji\n     * emoji.edit({ name: 'newemoji' })\n     *   .then(e => console.log(`Edited emoji ${e}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"edit\",\n    value: function edit(data, reason) {\n      var _this2 = this;\n\n      var roles = data.roles ? data.roles.map(function (r) {\n        return r.id || r;\n      }) : undefined;\n      return this.client.api.guilds(this.guild.id).emojis(this.id).patch({\n        data: {\n          name: data.name,\n          roles: roles\n        },\n        reason: reason\n      }).then(function (newData) {\n        var clone = _this2._clone();\n\n        clone._patch(newData);\n\n        return clone;\n      });\n    }\n    /**\n     * Sets the name of the emoji.\n     * @param {string} name The new name for the emoji\n     * @param {string} [reason] Reason for changing the emoji's name\n     * @returns {Promise<GuildEmoji>}\n     */\n\n  }, {\n    key: \"setName\",\n    value: function setName(name, reason) {\n      return this.edit({\n        name: name\n      }, reason);\n    }\n    /**\n     * Deletes the emoji.\n     * @param {string} [reason] Reason for deleting the emoji\n     * @returns {Promise<GuildEmoji>}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(reason) {\n      var _this3 = this;\n\n      return this.client.api.guilds(this.guild.id).emojis(this.id)[\"delete\"]({\n        reason: reason\n      }).then(function () {\n        return _this3;\n      });\n    }\n    /**\n     * Whether this emoji is the same as another one.\n     * @param {GuildEmoji|Object} other The emoji to compare it to\n     * @returns {boolean} Whether the emoji is equal to the given emoji or not\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      var _this4 = this;\n\n      if (other instanceof GuildEmoji) {\n        return other.id === this.id && other.name === this.name && other.managed === this.managed && other.requiresColons === this.requiresColons && other.roles.cache.size === this.roles.cache.size && other.roles.cache.every(function (role) {\n          return _this4.roles.cache.has(role.id);\n        });\n      } else {\n        return other.id === this.id && other.name === this.name && other.roles.length === this.roles.cache.size && other.roles.every(function (role) {\n          return _this4.roles.cache.has(role);\n        });\n      }\n    }\n  }, {\n    key: \"deletable\",\n    get: function get() {\n      if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n      return !this.managed && this.guild.me.hasPermission(Permissions.FLAGS.MANAGE_EMOJIS);\n    }\n    /**\n     * A manager for roles this emoji is active for.\n     * @type {GuildEmojiRoleManager}\n     * @readonly\n     */\n\n  }, {\n    key: \"roles\",\n    get: function get() {\n      return new GuildEmojiRoleManager(this);\n    }\n  }]);\n\n  return GuildEmoji;\n}(BaseGuildEmoji);\n\nmodule.exports = GuildEmoji;","map":null,"metadata":{},"sourceType":"module"}