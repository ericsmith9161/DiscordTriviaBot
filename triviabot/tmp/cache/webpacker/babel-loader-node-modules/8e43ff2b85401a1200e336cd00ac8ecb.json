{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Emoji = require('./Emoji');\n\nvar ActivityFlags = require('../util/ActivityFlags');\n\nvar _require = require('../util/Constants'),\n    ActivityTypes = _require.ActivityTypes;\n\nvar Util = require('../util/Util');\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyID] Id of the party represented in activity\n * @property {number} [type] Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n */\n\n\nvar Presence = /*#__PURE__*/function () {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} [data={}] The data for the presence\n   */\n  function Presence(client) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Presence);\n\n    /**\n     * The client that instantiated this\n     * @name Presence#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The user ID of this presence\n     * @type {Snowflake}\n     */\n\n    this.userID = data.user.id;\n    /**\n     * The guild of this presence\n     * @type {?Guild}\n     */\n\n    this.guild = data.guild || null;\n    this.patch(data);\n  }\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n\n\n  _createClass(Presence, [{\n    key: \"patch\",\n    value: function patch(data) {\n      var _this = this;\n\n      /**\n       * The status of this presence\n       * @type {PresenceStatus}\n       */\n      this.status = data.status || this.status || 'offline';\n\n      if (data.activities) {\n        /**\n         * The activities of this presence\n         * @type {Activity[]}\n         */\n        this.activities = data.activities.map(function (activity) {\n          return new Activity(_this, activity);\n        });\n      } else if (data.activity || data.game) {\n        this.activities = [new Activity(this, data.game || data.activity)];\n      } else {\n        this.activities = [];\n      }\n      /**\n       * The devices this presence is on\n       * @type {?Object}\n       * @property {?ClientPresenceStatus} web The current presence in the web application\n       * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n       * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n       */\n\n\n      this.clientStatus = data.client_status || null;\n      return this;\n    }\n  }, {\n    key: \"_clone\",\n    value: function _clone() {\n      var clone = Object.assign(Object.create(this), this);\n      if (this.activities) clone.activities = this.activities.map(function (activity) {\n        return activity._clone();\n      });\n      return clone;\n    }\n    /**\n     * Whether this presence is equal to another.\n     * @param {Presence} presence The presence to compare with\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(presence) {\n      return this === presence || presence && this.status === presence.status && this.activities.length === presence.activities.length && this.activities.every(function (activity, index) {\n        return activity.equals(presence.activities[index]);\n      }) && this.clientStatus.web === presence.clientStatus.web && this.clientStatus.mobile === presence.clientStatus.mobile && this.clientStatus.desktop === presence.clientStatus.desktop;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Util.flatten(this);\n    }\n  }, {\n    key: \"user\",\n    get: function get() {\n      return this.client.users.cache.get(this.userID) || null;\n    }\n    /**\n     * The member of this presence\n     * @type {?GuildMember}\n     * @readonly\n     */\n\n  }, {\n    key: \"member\",\n    get: function get() {\n      return this.guild.members.cache.get(this.userID) || null;\n    }\n  }]);\n\n  return Presence;\n}();\n/**\n * Represents an activity that is part of a user's presence.\n */\n\n\nvar Activity = /*#__PURE__*/function () {\n  function Activity(presence, data) {\n    _classCallCheck(this, Activity);\n\n    Object.defineProperty(this, 'presence', {\n      value: presence\n    });\n    /**\n     * The name of the activity being played\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The type of the activity status\n     * @type {ActivityType}\n     */\n\n    this.type = ActivityTypes[data.type];\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n\n    this.url = data.url || null;\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n\n    this.details = data.details || null;\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n\n    this.state = data.state || null;\n    /**\n     * Application ID associated with this activity\n     * @type {?Snowflake}\n     */\n\n    this.applicationID = data.application_id || null;\n    /**\n     * Timestamps for the activity\n     * @type {?Object}\n     * @prop {?Date} start When the activity started\n     * @prop {?Date} end When the activity will end\n     */\n\n    this.timestamps = data.timestamps ? {\n      start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n      end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null\n    } : null;\n    /**\n     * Party of the activity\n     * @type {?Object}\n     * @prop {?string} id ID of the party\n     * @prop {number[]} size Size of the party as `[current, max]`\n     */\n\n    this.party = data.party || null;\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n    this.syncID = data.sync_id;\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlags>}\n     */\n\n    this.flags = new ActivityFlags(data.flags).freeze();\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n\n    this.createdTimestamp = new Date(data.created_at).getTime();\n  }\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n\n\n  _createClass(Activity, [{\n    key: \"equals\",\n    value: function equals(activity) {\n      return this === activity || activity && this.name === activity.name && this.type === activity.type && this.url === activity.url;\n    }\n    /**\n     * The time the activity was created at\n     * @type {Date}\n     * @readonly\n     */\n\n  }, {\n    key: \"toString\",\n\n    /**\n     * When concatenated with a string, this automatically returns the activities' name instead of the Activity object.\n     * @returns {string}\n     */\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"_clone\",\n    value: function _clone() {\n      return Object.assign(Object.create(this), this);\n    }\n  }, {\n    key: \"createdAt\",\n    get: function get() {\n      return new Date(this.createdTimestamp);\n    }\n  }]);\n\n  return Activity;\n}();\n/**\n * Assets for a rich presence\n */\n\n\nvar RichPresenceAssets = /*#__PURE__*/function () {\n  function RichPresenceAssets(activity, assets) {\n    _classCallCheck(this, RichPresenceAssets);\n\n    Object.defineProperty(this, 'activity', {\n      value: activity\n    });\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n\n    this.largeText = assets.large_text || null;\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n\n    this.smallText = assets.small_text || null;\n    /**\n     * ID of the large image asset\n     * @type {?Snowflake}\n     */\n\n    this.largeImage = assets.large_image || null;\n    /**\n     * ID of the small image asset\n     * @type {?Snowflake}\n     */\n\n    this.smallImage = assets.small_image || null;\n  }\n  /**\n   * Gets the URL of the small image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The small image URL\n   */\n\n\n  _createClass(RichPresenceAssets, [{\n    key: \"smallImageURL\",\n    value: function smallImageURL() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          format = _ref.format,\n          size = _ref.size;\n\n      if (!this.smallImage) return null;\n      return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.smallImage, {\n        format: format,\n        size: size\n      });\n    }\n    /**\n     * Gets the URL of the large image asset\n     * @param {Object} [options] Options for the image url\n     * @param {string} [options.format] Format of the image\n     * @param {number} [options.size] Size of the image\n     * @returns {?string} The large image URL\n     */\n\n  }, {\n    key: \"largeImageURL\",\n    value: function largeImageURL() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          format = _ref2.format,\n          size = _ref2.size;\n\n      if (!this.largeImage) return null;\n\n      if (/^spotify:/.test(this.largeImage)) {\n        return \"https://i.scdn.co/image/\".concat(this.largeImage.slice(8));\n      } else if (/^twitch:/.test(this.largeImage)) {\n        return \"https://static-cdn.jtvnw.net/previews-ttv/live_user_\".concat(this.largeImage.slice(7), \".png\");\n      }\n\n      return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.largeImage, {\n        format: format,\n        size: size\n      });\n    }\n  }]);\n\n  return RichPresenceAssets;\n}();\n\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;","map":null,"metadata":{},"sourceType":"module"}