{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Base = require('./Base');\n\nvar _require = require('../errors'),\n    Error = _require.Error,\n    _TypeError = _require.TypeError;\n\nvar _require2 = require('../util/Constants'),\n    browser = _require2.browser;\n/**\n * Represents the voice state for a Guild Member.\n */\n\n\nvar VoiceState = /*#__PURE__*/function (_Base) {\n  _inherits(VoiceState, _Base);\n\n  var _super = _createSuper(VoiceState);\n\n  /**\n   * @param {Guild} guild The guild the voice state is part of\n   * @param {Object} data The data for the voice state\n   */\n  function VoiceState(guild, data) {\n    var _this;\n\n    _classCallCheck(this, VoiceState);\n\n    _this = _super.call(this, guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n\n    _this.guild = guild;\n    /**\n     * The ID of the member of this voice state\n     * @type {Snowflake}\n     */\n\n    _this.id = data.user_id;\n\n    _this._patch(data);\n\n    return _this;\n  }\n\n  _createClass(VoiceState, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      /**\n       * Whether this member is deafened server-wide\n       * @type {?boolean}\n       */\n      this.serverDeaf = data.deaf;\n      /**\n       * Whether this member is muted server-wide\n       * @type {?boolean}\n       */\n\n      this.serverMute = data.mute;\n      /**\n       * Whether this member is self-deafened\n       * @type {?boolean}\n       */\n\n      this.selfDeaf = data.self_deaf;\n      /**\n       * Whether this member is self-muted\n       * @type {?boolean}\n       */\n\n      this.selfMute = data.self_mute;\n      /**\n       * The session ID of this member's connection\n       * @type {?string}\n       */\n\n      this.sessionID = data.session_id;\n      /**\n       * Whether this member is streaming using \"Go Live\"\n       * @type {boolean}\n       */\n\n      this.streaming = data.self_stream || false;\n      /**\n       * The ID of the voice channel that this member is in\n       * @type {?Snowflake}\n       */\n\n      this.channelID = data.channel_id;\n      return this;\n    }\n    /**\n     * The member that this voice state belongs to\n     * @type {?GuildMember}\n     * @readonly\n     */\n\n  }, {\n    key: \"setMute\",\n\n    /**\n     * Mutes/unmutes the member of this voice state.\n     * @param {boolean} mute Whether or not the member should be muted\n     * @param {string} [reason] Reason for muting or unmuting\n     * @returns {Promise<GuildMember>}\n     */\n    value: function setMute(mute, reason) {\n      return this.member ? this.member.edit({\n        mute: mute\n      }, reason) : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n    }\n    /**\n     * Deafens/undeafens the member of this voice state.\n     * @param {boolean} deaf Whether or not the member should be deafened\n     * @param {string} [reason] Reason for deafening or undeafening\n     * @returns {Promise<GuildMember>}\n     */\n\n  }, {\n    key: \"setDeaf\",\n    value: function setDeaf(deaf, reason) {\n      return this.member ? this.member.edit({\n        deaf: deaf\n      }, reason) : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n    }\n    /**\n     * Kicks the member from the voice channel.\n     * @param {string} [reason] Reason for kicking member from the channel\n     * @returns {Promise<GuildMember>}\n     */\n\n  }, {\n    key: \"kick\",\n    value: function kick(reason) {\n      return this.setChannel(null, reason);\n    }\n    /**\n     * Moves the member to a different channel, or disconnects them from the one they're in.\n     * @param {ChannelResolvable|null} [channel] Channel to move the member to, or `null` if you want to disconnect them\n     * from voice. Requires the `MOVE_MEMBERS` permission.\n     * @param {string} [reason] Reason for moving member to another channel or disconnecting\n     * @returns {Promise<GuildMember>}\n     */\n\n  }, {\n    key: \"setChannel\",\n    value: function setChannel(channel, reason) {\n      return this.member ? this.member.edit({\n        channel: channel\n      }, reason) : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n    }\n    /**\n     * Self-mutes/unmutes the bot for this voice state.\n     * @param {boolean} mute Whether or not the bot should be self-muted\n     * @returns {Promise<boolean>} true if the voice state was successfully updated, otherwise false\n     */\n\n  }, {\n    key: \"setSelfMute\",\n    value: function () {\n      var _setSelfMute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mute) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.id !== this.client.user.id)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('VOICE_STATE_NOT_OWN');\n\n              case 2:\n                if (!(typeof mute !== 'boolean')) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new _TypeError('VOICE_STATE_INVALID_TYPE', 'mute');\n\n              case 4:\n                if (this.connection) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 6:\n                this.selfMute = mute;\n                _context.next = 9;\n                return this.connection.sendVoiceStateUpdate();\n\n              case 9:\n                return _context.abrupt(\"return\", true);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setSelfMute(_x) {\n        return _setSelfMute.apply(this, arguments);\n      }\n\n      return setSelfMute;\n    }()\n    /**\n     * Self-deafens/undeafens the bot for this voice state.\n     * @param {boolean} deaf Whether or not the bot should be self-deafened\n     * @returns {Promise<boolean>} true if the voice state was successfully updated, otherwise false\n     */\n\n  }, {\n    key: \"setSelfDeaf\",\n    value: function () {\n      var _setSelfDeaf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(deaf) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.id !== this.client.user.id)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", new Error('VOICE_STATE_NOT_OWN'));\n\n              case 2:\n                if (!(typeof deaf !== 'boolean')) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", new _TypeError('VOICE_STATE_INVALID_TYPE', 'deaf'));\n\n              case 4:\n                if (this.connection) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 6:\n                this.selfDeaf = deaf;\n                _context2.next = 9;\n                return this.connection.sendVoiceStateUpdate();\n\n              case 9:\n                return _context2.abrupt(\"return\", true);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setSelfDeaf(_x2) {\n        return _setSelfDeaf.apply(this, arguments);\n      }\n\n      return setSelfDeaf;\n    }()\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _get(_getPrototypeOf(VoiceState.prototype), \"toJSON\", this).call(this, {\n        id: true,\n        serverDeaf: true,\n        serverMute: true,\n        selfDeaf: true,\n        selfMute: true,\n        sessionID: true,\n        channelID: 'channel'\n      });\n    }\n  }, {\n    key: \"member\",\n    get: function get() {\n      return this.guild.members.cache.get(this.id) || null;\n    }\n    /**\n     * The channel that the member is connected to\n     * @type {?VoiceChannel}\n     * @readonly\n     */\n\n  }, {\n    key: \"channel\",\n    get: function get() {\n      return this.guild.channels.cache.get(this.channelID) || null;\n    }\n    /**\n     * If this is a voice state of the client user, then this will refer to the active VoiceConnection for this guild\n     * @type {?VoiceConnection}\n     * @readonly\n     */\n\n  }, {\n    key: \"connection\",\n    get: function get() {\n      if (browser || this.id !== this.client.user.id) return null;\n      return this.client.voice.connections.get(this.guild.id) || null;\n    }\n    /**\n     * Whether this member is either self-deafened or server-deafened\n     * @type {?boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"deaf\",\n    get: function get() {\n      return this.serverDeaf || this.selfDeaf;\n    }\n    /**\n     * Whether this member is either self-muted or server-muted\n     * @type {?boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"mute\",\n    get: function get() {\n      return this.serverMute || this.selfMute;\n    }\n    /**\n     * Whether this member is currently speaking. A boolean if the information is available (aka\n     * the bot is connected to any voice channel in the guild), otherwise this is null\n     * @type {?boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"speaking\",\n    get: function get() {\n      return this.channel && this.channel.connection ? Boolean(this.channel.connection._speaking.get(this.id)) : null;\n    }\n  }]);\n\n  return VoiceState;\n}(Base);\n\nmodule.exports = VoiceState;","map":null,"metadata":{},"sourceType":"module"}