{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar _require = require('../../../util/Constants'),\n    Events = _require.Events,\n    Status = _require.Status;\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(client, _ref, shard) {\n    var data, guild;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = _ref.d;\n            guild = client.guilds.cache.get(data.id);\n\n            if (!guild) {\n              _context.next = 10;\n              break;\n            }\n\n            if (!(!guild.available && !data.unavailable)) {\n              _context.next = 8;\n              break;\n            }\n\n            // A newly available guild\n            guild._patch(data); // If the client was ready before and we had unavailable guilds, fetch them\n\n\n            if (!(client.ws.status === Status.READY && client.options.fetchAllMembers)) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 8;\n            return guild.members.fetch()[\"catch\"](function (err) {\n              return client.emit(Events.DEBUG, \"Failed to fetch all members: \".concat(err, \"\\n\").concat(err.stack));\n            });\n\n          case 8:\n            _context.next = 17;\n            break;\n\n          case 10:\n            // A new guild\n            data.shardID = shard.id;\n            guild = client.guilds.add(data);\n\n            if (!(client.ws.status === Status.READY)) {\n              _context.next = 17;\n              break;\n            }\n\n            if (!client.options.fetchAllMembers) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 16;\n            return guild.members.fetch()[\"catch\"](function (err) {\n              return client.emit(Events.DEBUG, \"Failed to fetch all members: \".concat(err, \"\\n\").concat(err.stack));\n            });\n\n          case 16:\n            client.emit(Events.GUILD_CREATE, guild);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}