{"ast":null,"code":"'use strict';\n/**\n * Represents an error from the Discord API.\n * @extends Error\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar DiscordAPIError = /*#__PURE__*/function (_Error) {\n  _inherits(DiscordAPIError, _Error);\n\n  var _super = _createSuper(DiscordAPIError);\n\n  function DiscordAPIError(path, error, method, status) {\n    var _this;\n\n    _classCallCheck(this, DiscordAPIError);\n\n    _this = _super.call(this);\n\n    var flattened = _this.constructor.flattenErrors(error.errors || error).join('\\n');\n\n    _this.name = 'DiscordAPIError';\n    _this.message = error.message && flattened ? \"\".concat(error.message, \"\\n\").concat(flattened) : error.message || flattened;\n    /**\n     * The HTTP method used for the request\n     * @type {string}\n     */\n\n    _this.method = method;\n    /**\n     * The path of the request relative to the HTTP endpoint\n     * @type {string}\n     */\n\n    _this.path = path;\n    /**\n     * HTTP error code returned by Discord\n     * @type {number}\n     */\n\n    _this.code = error.code;\n    /**\n     * The HTTP status code\n     * @type {number}\n     */\n\n    _this.httpStatus = status;\n    return _this;\n  }\n  /**\n   * Flattens an errors object returned from the API into an array.\n   * @param {Object} obj Discord errors object\n   * @param {string} [key] Used internally to determine key names of nested fields\n   * @returns {string[]}\n   * @private\n   */\n\n\n  _createClass(DiscordAPIError, null, [{\n    key: \"flattenErrors\",\n    value: function flattenErrors(obj) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var messages = [];\n\n      for (var _i2 = 0, _Object$entries = Object.entries(obj); _i2 < _Object$entries.length; _i2++) {\n        var _ref3 = _Object$entries[_i2];\n\n        var _ref2 = _slicedToArray(_ref3, 2);\n\n        var k = _ref2[0];\n        var v = _ref2[1];\n        if (k === 'message') continue;\n        var newKey = key ? isNaN(k) ? \"\".concat(key, \".\").concat(k) : \"\".concat(key, \"[\").concat(k, \"]\") : k;\n\n        if (v._errors) {\n          messages.push(\"\".concat(newKey, \": \").concat(v._errors.map(function (e) {\n            return e.message;\n          }).join(' ')));\n        } else if (v.code || v.message) {\n          messages.push(\"\".concat(v.code ? \"\".concat(v.code, \": \") : '').concat(v.message).trim());\n        } else if (typeof v === 'string') {\n          messages.push(v);\n        } else {\n          messages = messages.concat(this.flattenErrors(v, newKey));\n        }\n      }\n\n      return messages;\n    }\n  }]);\n\n  return DiscordAPIError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nmodule.exports = DiscordAPIError;","map":null,"metadata":{},"sourceType":"module"}