{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Base = require('./Base');\n\nvar _require = require('../errors'),\n    Error = _require.Error,\n    _TypeError = _require.TypeError;\n\nvar Permissions = require('../util/Permissions');\n\nvar Snowflake = require('../util/Snowflake');\n\nvar Util = require('../util/Util');\n/**\n * Represents a role on Discord.\n * @extends {Base}\n */\n\n\nvar Role = /*#__PURE__*/function (_Base) {\n  _inherits(Role, _Base);\n\n  var _super = _createSuper(Role);\n\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the role\n   * @param {Guild} guild The guild the role is part of\n   */\n  function Role(client, data, guild) {\n    var _this;\n\n    _classCallCheck(this, Role);\n\n    _this = _super.call(this, client);\n    /**\n     * The guild that the role belongs to\n     * @type {Guild}\n     */\n\n    _this.guild = guild;\n    if (data) _this._patch(data);\n    return _this;\n  }\n\n  _createClass(Role, [{\n    key: \"_patch\",\n    value: function _patch(data) {\n      /**\n       * The ID of the role (unique to the guild it is part of)\n       * @type {Snowflake}\n       */\n      this.id = data.id;\n      /**\n       * The name of the role\n       * @type {string}\n       */\n\n      this.name = data.name;\n      /**\n       * The base 10 color of the role\n       * @type {number}\n       */\n\n      this.color = data.color;\n      /**\n       * If true, users that are part of this role will appear in a separate category in the users list\n       * @type {boolean}\n       */\n\n      this.hoist = data.hoist;\n      /**\n       * The raw position of the role from the API\n       * @type {number}\n       */\n\n      this.rawPosition = data.position;\n      /**\n       * The permissions of the role\n       * @type {Readonly<Permissions>}\n       */\n\n      this.permissions = new Permissions(data.permissions).freeze();\n      /**\n       * Whether or not the role is managed by an external service\n       * @type {boolean}\n       */\n\n      this.managed = data.managed;\n      /**\n       * Whether or not the role can be mentioned by anyone\n       * @type {boolean}\n       */\n\n      this.mentionable = data.mentionable;\n      /**\n       * Whether the role has been deleted\n       * @type {boolean}\n       */\n\n      this.deleted = false;\n    }\n    /**\n     * The timestamp the role was created at\n     * @type {number}\n     * @readonly\n     */\n\n  }, {\n    key: \"comparePositionTo\",\n\n    /**\n     * Compares this role's position to another role's.\n     * @param {RoleResolvable} role Role to compare to this one\n     * @returns {number} Negative number if this role's position is lower (other role's is higher),\n     * positive number if this one is higher (other's is lower), 0 if equal\n     */\n    value: function comparePositionTo(role) {\n      role = this.guild.roles.resolve(role);\n      if (!role) throw new _TypeError('INVALID_TYPE', 'role', 'Role nor a Snowflake');\n      return this.constructor.comparePositions(this, role);\n    }\n    /**\n     * The data for a role.\n     * @typedef {Object} RoleData\n     * @property {string} [name] The name of the role\n     * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n     * @property {boolean} [hoist] Whether or not the role should be hoisted\n     * @property {number} [position] The position of the role\n     * @property {PermissionResolvable} [permissions] The permissions of the role\n     * @property {boolean} [mentionable] Whether or not the role should be mentionable\n     */\n\n    /**\n     * Edits the role.\n     * @param {RoleData} data The new data for the role\n     * @param {string} [reason] Reason for editing this role\n     * @returns {Promise<Role>}\n     * @example\n     * // Edit a role\n     * role.edit({ name: 'new role' })\n     *   .then(updated => console.log(`Edited role ${updated.name} name to ${updated.name}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"edit\",\n    value: function () {\n      var _edit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, reason) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (typeof data.permissions !== 'undefined') data.permissions = Permissions.resolve(data.permissions);else data.permissions = this.permissions.bitfield;\n\n                if (!(typeof data.position !== 'undefined')) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 4;\n                return Util.setPosition(this, data.position, false, this.guild._sortedRoles(), this.client.api.guilds(this.guild.id).roles, reason).then(function (updatedRoles) {\n                  _this2.client.actions.GuildRolesPositionUpdate.handle({\n                    guild_id: _this2.guild.id,\n                    roles: updatedRoles\n                  });\n                });\n\n              case 4:\n                return _context.abrupt(\"return\", this.client.api.guilds[this.guild.id].roles[this.id].patch({\n                  data: {\n                    name: data.name || this.name,\n                    color: data.color !== null ? Util.resolveColor(data.color || this.color) : null,\n                    hoist: typeof data.hoist !== 'undefined' ? data.hoist : this.hoist,\n                    permissions: data.permissions,\n                    mentionable: typeof data.mentionable !== 'undefined' ? data.mentionable : this.mentionable\n                  },\n                  reason: reason\n                }).then(function (role) {\n                  var clone = _this2._clone();\n\n                  clone._patch(role);\n\n                  return clone;\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function edit(_x, _x2) {\n        return _edit.apply(this, arguments);\n      }\n\n      return edit;\n    }()\n    /**\n     * Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\n     * taking into account permission overwrites.\n     * @param {ChannelResolvable} channel The guild channel to use as context\n     * @returns {Readonly<Permissions>}\n     */\n\n  }, {\n    key: \"permissionsIn\",\n    value: function permissionsIn(channel) {\n      channel = this.guild.channels.resolve(channel);\n      if (!channel) throw new Error('GUILD_CHANNEL_RESOLVE');\n      return channel.rolePermissions(this);\n    }\n    /**\n     * Sets a new name for the role.\n     * @param {string} name The new name of the role\n     * @param {string} [reason] Reason for changing the role's name\n     * @returns {Promise<Role>}\n     * @example\n     * // Set the name of the role\n     * role.setName('new role')\n     *   .then(updated => console.log(`Edited name of role ${role.name} to ${updated.name}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setName\",\n    value: function setName(name, reason) {\n      return this.edit({\n        name: name\n      }, reason);\n    }\n    /**\n     * Sets a new color for the role.\n     * @param {ColorResolvable} color The color of the role\n     * @param {string} [reason] Reason for changing the role's color\n     * @returns {Promise<Role>}\n     * @example\n     * // Set the color of a role\n     * role.setColor('#FF0000')\n     *   .then(updated => console.log(`Set color of role to ${updated.color}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setColor\",\n    value: function setColor(color, reason) {\n      return this.edit({\n        color: color\n      }, reason);\n    }\n    /**\n     * Sets whether or not the role should be hoisted.\n     * @param {boolean} hoist Whether or not to hoist the role\n     * @param {string} [reason] Reason for setting whether or not the role should be hoisted\n     * @returns {Promise<Role>}\n     * @example\n     * // Set the hoist of the role\n     * role.setHoist(true)\n     *   .then(r => console.log(`Role hoisted: ${r.hoist}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setHoist\",\n    value: function setHoist(hoist, reason) {\n      return this.edit({\n        hoist: hoist\n      }, reason);\n    }\n    /**\n     * Sets the permissions of the role.\n     * @param {PermissionResolvable} permissions The permissions of the role\n     * @param {string} [reason] Reason for changing the role's permissions\n     * @returns {Promise<Role>}\n     * @example\n     * // Set the permissions of the role\n     * role.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\n     *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n     *   .catch(console.error);\n     * @example\n     * // Remove all permissions from a role\n     * role.setPermissions(0)\n     *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setPermissions\",\n    value: function setPermissions(permissions, reason) {\n      return this.edit({\n        permissions: permissions\n      }, reason);\n    }\n    /**\n     * Sets whether this role is mentionable.\n     * @param {boolean} mentionable Whether this role should be mentionable\n     * @param {string} [reason] Reason for setting whether or not this role should be mentionable\n     * @returns {Promise<Role>}\n     * @example\n     * // Make the role mentionable\n     * role.setMentionable(true)\n     *   .then(updated => console.log(`Role updated ${updated.name}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setMentionable\",\n    value: function setMentionable(mentionable, reason) {\n      return this.edit({\n        mentionable: mentionable\n      }, reason);\n    }\n    /**\n     * Sets the position of the role.\n     * @param {number} position The position of the role\n     * @param {Object} [options] Options for setting position\n     * @param {boolean} [options.relative=false] Change the position relative to its current value\n     * @param {string} [options.reason] Reason for changing the position\n     * @returns {Promise<Role>}\n     * @example\n     * // Set the position of the role\n     * role.setPosition(1)\n     *   .then(updated => console.log(`Role position: ${updated.position}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      var _this3 = this;\n\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          relative = _ref.relative,\n          reason = _ref.reason;\n\n      return Util.setPosition(this, position, relative, this.guild._sortedRoles(), this.client.api.guilds(this.guild.id).roles, reason).then(function (updatedRoles) {\n        _this3.client.actions.GuildRolesPositionUpdate.handle({\n          guild_id: _this3.guild.id,\n          roles: updatedRoles\n        });\n\n        return _this3;\n      });\n    }\n    /**\n     * Deletes the role.\n     * @param {string} [reason] Reason for deleting this role\n     * @returns {Promise<Role>}\n     * @example\n     * // Delete a role\n     * role.delete('The role needed to go')\n     *   .then(deleted => console.log(`Deleted role ${deleted.name}`))\n     *   .catch(console.error);\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(reason) {\n      var _this4 = this;\n\n      return this.client.api.guilds[this.guild.id].roles[this.id][\"delete\"]({\n        reason: reason\n      }).then(function () {\n        _this4.client.actions.GuildRoleDelete.handle({\n          guild_id: _this4.guild.id,\n          role_id: _this4.id\n        });\n\n        return _this4;\n      });\n    }\n    /**\n     * Whether this role equals another role. It compares all properties, so for most operations\n     * it is advisable to just compare `role.id === role2.id` as it is much faster and is often\n     * what most users need.\n     * @param {Role} role Role to compare with\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(role) {\n      return role && this.id === role.id && this.name === role.name && this.color === role.color && this.hoist === role.hoist && this.position === role.position && this.permissions.bitfield === role.permissions.bitfield && this.managed === role.managed;\n    }\n    /**\n     * When concatenated with a string, this automatically returns the role's mention instead of the Role object.\n     * @returns {string}\n     * @example\n     * // Logs: Role: <@&123456789012345678>\n     * console.log(`Role: ${role}`);\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this.id === this.guild.id) return '@everyone';\n      return \"<@&\".concat(this.id, \">\");\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return _get(_getPrototypeOf(Role.prototype), \"toJSON\", this).call(this, {\n        createdTimestamp: true\n      });\n    }\n    /**\n     * Compares the positions of two roles.\n     * @param {Role} role1 First role to compare\n     * @param {Role} role2 Second role to compare\n     * @returns {number} Negative number if the first role's position is lower (second role's is higher),\n     * positive number if the first's is higher (second's is lower), 0 if equal\n     */\n\n  }, {\n    key: \"createdTimestamp\",\n    get: function get() {\n      return Snowflake.deconstruct(this.id).timestamp;\n    }\n    /**\n     * The time the role was created at\n     * @type {Date}\n     * @readonly\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function get() {\n      return new Date(this.createdTimestamp);\n    }\n    /**\n     * The hexadecimal version of the role color, with a leading hashtag\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: \"hexColor\",\n    get: function get() {\n      return \"#\".concat(this.color.toString(16).padStart(6, '0'));\n    }\n    /**\n     * The cached guild members that have this role\n     * @type {Collection<Snowflake, GuildMember>}\n     * @readonly\n     */\n\n  }, {\n    key: \"members\",\n    get: function get() {\n      var _this5 = this;\n\n      return this.guild.members.cache.filter(function (m) {\n        return m.roles.cache.has(_this5.id);\n      });\n    }\n    /**\n     * Whether the role is editable by the client user\n     * @type {boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"editable\",\n    get: function get() {\n      if (this.managed) return false;\n      var clientMember = this.guild.member(this.client.user);\n      if (!clientMember.permissions.has(Permissions.FLAGS.MANAGE_ROLES)) return false;\n      return clientMember.roles.highest.comparePositionTo(this) > 0;\n    }\n    /**\n     * The position of the role in the role manager\n     * @type {number}\n     * @readonly\n     */\n\n  }, {\n    key: \"position\",\n    get: function get() {\n      var sorted = this.guild._sortedRoles();\n\n      return sorted.array().indexOf(sorted.get(this.id));\n    }\n  }], [{\n    key: \"comparePositions\",\n    value: function comparePositions(role1, role2) {\n      if (role1.position === role2.position) return role2.id - role1.id;\n      return role1.position - role2.position;\n    }\n  }]);\n\n  return Role;\n}(Base);\n\nmodule.exports = Role;","map":null,"metadata":{},"sourceType":"module"}